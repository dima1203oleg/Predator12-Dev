apiVersion: argoproj.io/v1alpha1
kind: Rollout
metadata:
  name: predator12-backend
  namespace: predator12-prod
  labels:
    app: predator12
    component: backend
spec:
  replicas: 3
  revisionHistoryLimit: 5
  
  selector:
    matchLabels:
      app: predator12
      component: backend
  
  template:
    metadata:
      labels:
        app: predator12
        component: backend
        version: stable
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8000"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: predator12-backend
      
      containers:
        - name: backend
          image: predator12/backend:latest
          imagePullPolicy: Always
          
          ports:
            - name: http
              containerPort: 8000
              protocol: TCP
            - name: metrics
              containerPort: 9090
              protocol: TCP
          
          env:
            - name: ENVIRONMENT
              value: "production"
            - name: LOG_LEVEL
              value: "INFO"
            - name: OTEL_EXPORTER_OTLP_ENDPOINT
              value: "http://otel-collector:4317"
          
          livenessProbe:
            httpGet:
              path: /health/live
              port: http
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
          
          readinessProbe:
            httpGet:
              path: /health/ready
              port: http
            initialDelaySeconds: 10
            periodSeconds: 5
            timeoutSeconds: 3
            successThreshold: 1
            failureThreshold: 3
          
          resources:
            requests:
              cpu: 500m
              memory: 1Gi
            limits:
              cpu: 2000m
              memory: 4Gi
          
          securityContext:
            runAsNonRoot: true
            runAsUser: 1000
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - ALL
            readOnlyRootFilesystem: true
  
  # Progressive Delivery Strategy
  strategy:
    canary:
      # Canary Service
      canaryService: predator12-backend-canary
      # Stable Service
      stableService: predator12-backend-stable
      
      # Traffic Management (Istio/NGINX)
      trafficRouting:
        nginx:
          stableIngress: predator12-backend
          additionalIngressAnnotations:
            canary-by-header: X-Canary
            canary-by-header-value: "true"
      
      # Canary Steps
      steps:
        # 1. Start with 10% traffic
        - setWeight: 10
        - pause:
            duration: 2m
        
        # 2. Run analysis
        - analysis:
            templates:
              - templateName: success-rate
              - templateName: latency
            args:
              - name: service-name
                value: predator12-backend-canary
        
        # 3. Increase to 25%
        - setWeight: 25
        - pause:
            duration: 5m
        
        # 4. Run analysis again
        - analysis:
            templates:
              - templateName: success-rate
              - templateName: latency
              - templateName: error-rate
        
        # 5. Increase to 50%
        - setWeight: 50
        - pause:
            duration: 5m
        
        # 6. Final analysis
        - analysis:
            templates:
              - templateName: success-rate
              - templateName: latency
              - templateName: error-rate
            args:
              - name: service-name
                value: predator12-backend-canary
        
        # 7. Full rollout
        - setWeight: 100
      
      # Anti-affinity for canary pods
      antiAffinity:
        requiredDuringSchedulingIgnoredDuringExecution: {}
        preferredDuringSchedulingIgnoredDuringExecution:
          weight: 100
      
      # Analysis during entire rollout
      analysis:
        templates:
          - templateName: continuous-success-rate
        startingStep: 2
        args:
          - name: service-name
            value: predator12-backend-canary
      
      # Max surge/unavailable
      maxSurge: "25%"
      maxUnavailable: 0
      
      # Abort conditions
      abortScaleDownDelaySeconds: 30
