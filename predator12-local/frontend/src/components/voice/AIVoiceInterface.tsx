// @ts-nocheck
import React, { useState, useEffect, useRef } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import {
  Box,
  Card,
  CardContent,
  Typography,
  Avatar,
  Chip,
  Button,
  Paper,
  IconButton,
  LinearProgress,
  List,
  ListItem,
  ListItemIcon,
  ListItemText,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  Tooltip,
  Badge,
  Divider,
  Slider,
  FormControlLabel,
  Switch,
  Select,
  MenuItem,
  FormControl,
  InputLabel
} from '@mui/material';
import {
  Mic as MicIcon,
  MicOff as MicOffIcon,
  VolumeUp as VolumeUpIcon,
  VolumeOff as VolumeOffIcon,
  PlayArrow as PlayIcon,
  Stop as StopIcon,
  Settings as SettingsIcon,
  Translate as TranslateIcon,
  Psychology as PsychologyIcon,
  Hearing as HearingIcon,
  RecordVoiceOver as VoiceIcon,
  GraphicEq as EqIcon,
  Tune as TuneIcon,
  Language as LanguageIcon,
  Speed as SpeedIcon,
  HighQuality as QualityIcon,
  Assistant as AssistantIcon,
  Chat as ChatIcon,
  SmartToy as SmartToyIcon,
  AutoAwesome as AutoAwesomeIcon,
  Lightbulb as LightbulbIcon
} from '@mui/icons-material';
import { nexusColors } from '../../theme/nexusTheme';
import { premiumFreeVoiceAPI } from '../../services/premiumFreeVoiceAPI';

interface VoiceCommand {
  id: string;
  phrase: string;
  action: string;
  module: string;
  confidence: number;
  timestamp: Date;
  executed: boolean;
}

interface VoiceSettings {
  language: string;
  voice: string;
  speed: number;
  pitch: number;
  volume: number;
  autoSpeak: boolean;
  continuousListening: boolean;
  wakeWord: string;
}

const AIVoiceInterface: React.FC = () => {
  const [isListening, setIsListening] = useState(false);
  const [isConnected, setIsConnected] = useState(false);
  const [currentCommand, setCurrentCommand] = useState('');
  const [confidence, setConfidence] = useState(0);
  const [settingsOpen, setSettingsOpen] = useState(false);
  const [voiceEnabled, setVoiceEnabled] = useState(true);
  const [recentCommands, setRecentCommands] = useState<VoiceCommand[]>([]);
  const [aiResponse, setAiResponse] = useState('');
  const [isProcessing, setIsProcessing] = useState(false);
  const [voiceCapabilities, setVoiceCapabilities] = useState<VoiceCapabilities | null>(null);
  const [currentProvider, setCurrentProvider] = useState<string>('auto');

  const recognitionRef = useRef<any>(null);
  const synthRef = useRef<any>(null);

  const [settings, setSettings] = useState<VoiceSettings>({
    language: 'uk-UA',
    voice: 'Lesya',
    speed: 1,
    pitch: 1,
    volume: 0.8,
    autoSpeak: true,
    continuousListening: false,
    wakeWord: '–ù–µ–∫—Å—É—Å'
  });

  // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è Premium FREE Voice API
  useEffect(() => {
    const initVoiceAPI = async () => {
      try {
        console.log('üé§ –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Premium FREE Voice API...');

        // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ API
        const isHealthy = await premiumFreeVoiceAPI.checkHealth();

        if (isHealthy) {
          const capabilities = await premiumFreeVoiceAPI.getCapabilities();
          setVoiceCapabilities(capabilities);
          setCurrentProvider(capabilities.recommended_tts);
          console.log('‚úÖ Premium FREE Voice API –≥–æ—Ç–æ–≤–∏–π:', capabilities);
          console.log(`   üîä TTS: ${capabilities.recommended_tts} (Coqui ‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê)`);
          console.log(`   üéß STT: ${capabilities.recommended_stt} (faster-whisper ‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê)`);
        } else {
          console.warn('‚ö†Ô∏è  API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è Browser fallback.');
        }
      } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ API:', error);
        console.log('üí° –ó–∞–ø—É—Å—Ç—ñ—Ç—å API: cd predator12-local && ./start-voice-premium-free.sh');
      }
    };

    initVoiceAPI();
  }, []);

  // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è Web Speech API - –í–ò–ö–û–ù–£–Ñ–¢–¨–°–Ø –û–î–ò–ù –†–ê–ó!
  useEffect(() => {
    console.log('üé§ –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è Web Speech API...');

    if ('webkitSpeechRecognition' in window || 'SpeechRecognition' in window) {
      const SpeechRecognition = (window as any).webkitSpeechRecognition || (window as any).SpeechRecognition;
      console.log('‚úÖ SpeechRecognition –¥–æ—Å—Ç—É–ø–Ω–∏–π:', SpeechRecognition);

      recognitionRef.current = new SpeechRecognition();
      console.log('‚úÖ Recognition —Å—Ç–≤–æ—Ä–µ–Ω–æ:', recognitionRef.current);

      recognitionRef.current.continuous = true;
      recognitionRef.current.interimResults = true;
      recognitionRef.current.lang = 'uk-UA'; // –Ø–≤–Ω–æ –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —É–∫—Ä–∞—ó–Ω—Å—å–∫—É –º–æ–≤—É
      recognitionRef.current.maxAlternatives = 1;

      console.log('‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è:', {
        continuous: true,
        interimResults: true,
        lang: 'uk-UA',
        maxAlternatives: 1
      });
      
      console.log('üá∫üá¶ –£–ö–†–ê–á–ù–°–¨–ö–ê –ú–û–í–ê –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –¥–ª—è —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è!');

      recognitionRef.current.onstart = () => {
        console.log('üé§ Recognition STARTED!');
        setIsConnected(true);
        setIsListening(true);
      };

      recognitionRef.current.onresult = (event: any) => {
        console.log('üìù Recognition RESULT:', event);
        let finalTranscript = '';
        let interimTranscript = '';

        for (let i = event.resultIndex; i < event.results.length; i++) {
          const transcript = event.results[i][0].transcript;
          const confidence = event.results[i][0].confidence;

          console.log(`Result ${i}:`, {
            transcript,
            confidence,
            isFinal: event.results[i].isFinal
          });

          if (event.results[i].isFinal) {
            finalTranscript += transcript;
            console.log('‚úÖ Final transcript:', finalTranscript);
            processVoiceCommand(transcript, confidence);
          } else {
            interimTranscript += transcript;
            console.log('‚è≥ Interim transcript:', interimTranscript);
          }
        }

        setCurrentCommand(interimTranscript || finalTranscript);
        setConfidence((event.results[0]?.[0]?.confidence || 0) * 100);
      };

      recognitionRef.current.onerror = (event: any) => {
        console.error('‚ùå Speech recognition ERROR:', event.error);
        console.error('Error details:', event);

        let errorMessage = '–ü–æ–º–∏–ª–∫–∞ —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è: ';
        switch (event.error) {
          case 'no-speech':
            errorMessage += '–ù–µ –≤–¥–∞–ª–æ—Å—è –ø–æ—á—É—Ç–∏ –º–æ–≤–ª–µ–Ω–Ω—è. –°–ø—Ä–æ–±—É–π—Ç–µ –≥–æ–≤–æ—Ä–∏—Ç–∏ –≥–æ–ª–æ—Å–Ω—ñ—à–µ.';
            break;
          case 'audio-capture':
            errorMessage += '–ú—ñ–∫—Ä–æ—Ñ–æ–Ω –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è.';
            break;
          case 'not-allowed':
            errorMessage += '–î–æ—Å—Ç—É–ø –¥–æ –º—ñ–∫—Ä–æ—Ñ–æ–Ω–∞ –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ. –î–æ–∑–≤–æ–ª—å—Ç–µ —É –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è—Ö –±—Ä–∞—É–∑–µ—Ä–∞.';
            break;
          case 'network':
            errorMessage += '–ü—Ä–æ–±–ª–µ–º–∞ –∑ –º–µ—Ä–µ–∂–µ—é. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –∑\'—î–¥–Ω–∞–Ω–Ω—è.';
            break;
          default:
            errorMessage += event.error;
        }

        alert(errorMessage);
        setIsListening(false);
        setIsConnected(false);
      };

      recognitionRef.current.onend = () => {
        console.log('üõë Recognition ENDED');
        console.log('Current state:', { isListening, isConnected });
        setIsListening(false);
        // –ù–ï –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—î–º–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ - –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –º–∞—î –∫–æ–Ω—Ç—Ä–æ–ª—å
      };    console.log('‚úÖ Web Speech API –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ!');
    
    // –û–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–∏–π –∞–≤—Ç–æ—Ç–µ—Å—Ç TTS (—Ä–æ–∑–∫–æ–º–µ–Ω—Ç—É–π—Ç–µ –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è)
    // setTimeout(() => {
    //   console.log('üß™ –ê–≤—Ç–æ—Ç–µ—Å—Ç TTS...');
    //   speakResponseBrowser('–ì–æ–ª–æ—Å–æ–≤–∏–π —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≥–æ—Ç–æ–≤–∏–π –¥–æ —Ä–æ–±–æ—Ç–∏');
    // }, 2000);
  } else {
      console.error('‚ùå Web Speech API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π —É —Ü—å–æ–º—É –±—Ä–∞—É–∑–µ—Ä—ñ!');
      alert('–ì–æ–ª–æ—Å–æ–≤–µ —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–µ. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ Chrome, Edge –∞–±–æ Safari.');
    }

    // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è Speech Synthesis
    if ('speechSynthesis' in window) {
      synthRef.current = window.speechSynthesis;
      console.log('‚úÖ Speech Synthesis –¥–æ—Å—Ç—É–ø–Ω–∏–π');
      
      // –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≥–æ–ª–æ—Å—ñ–≤
      const loadVoices = () => {
        const voices = synthRef.current.getVoices();
        console.log('üé§ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –≥–æ–ª–æ—Å—ñ–≤:', voices.length);
        if (voices.length > 0) {
          console.log('üìã –ü–µ—Ä—à—ñ 5 –≥–æ–ª–æ—Å—ñ–≤:', 
            voices.slice(0, 5).map(v => `${v.name} (${v.lang})`));
          const ukVoices = voices.filter(v => v.lang.includes('uk'));
          console.log('üá∫üá¶ –£–∫—Ä–∞—ó–Ω—Å—å–∫—ñ –≥–æ–ª–æ—Å–∏:', ukVoices.map(v => v.name));
        }
      };
      
      // –ì–æ–ª–æ—Å–∏ –º–æ–∂—É—Ç—å –∑–∞–≤–∞–Ω—Ç–∞–∂—É–≤–∞—Ç–∏—Å—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
      loadVoices();
      synthRef.current.addEventListener('voiceschanged', loadVoices);
    } else {
      console.error('‚ùå Speech Synthesis –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π —É —Ü—å–æ–º—É –±—Ä–∞—É–∑–µ—Ä—ñ!');
    }

    return () => {
      if (recognitionRef.current) {
        try {
          recognitionRef.current.stop();
        } catch (e) {
          console.log('Recognition –≤–∂–µ –∑—É–ø–∏–Ω–µ–Ω–æ');
        }
      }
    };
  }, []); // –í–ê–ñ–õ–ò–í–û: –∑–∞–ø—É—Å–∫–∞—î–º–æ –û–î–ò–ù –†–ê–ó!

  // –û–Ω–æ–≤–ª–µ–Ω–Ω—è –º–æ–≤–∏ –ø—Ä–∏ –∑–º—ñ–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å
  useEffect(() => {
    if (recognitionRef.current) {
      recognitionRef.current.lang = settings.language;
      console.log('üåê –ú–æ–≤–∞ –∑–º—ñ–Ω–µ–Ω–∞ –Ω–∞:', settings.language);
    }
  }, [settings.language]);

  const processVoiceCommand = async (transcript: string, confidence: number) => {
    const command: VoiceCommand = {
      id: Date.now().toString(),
      phrase: transcript,
      action: 'processing',
      module: 'voice',
      confidence: confidence * 100,
      timestamp: new Date(),
      executed: false
    };

    setRecentCommands(prev => [command, ...prev.slice(0, 9)]);
    setIsProcessing(true);

    console.log(`üé§ –û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥–∏: "${transcript}" (–≤–ø–µ–≤–Ω–µ–Ω—ñ—Å—Ç—å: ${confidence * 100}%)`);

    // –°–∏–º—É–ª—è—Ü—ñ—è –æ–±—Ä–æ–±–∫–∏ –∫–æ–º–∞–Ω–¥–∏
    await new Promise(resolve => setTimeout(resolve, 1000));

    // –ê–Ω–∞–ª—ñ–∑ –∫–æ–º–∞–Ω–¥–∏ —Ç–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
    const response = generateAIResponse(transcript);
    setAiResponse(response);
    
    console.log(`ü§ñ AI –≤—ñ–¥–ø–æ–≤—ñ–¥—å: "${response}"`);

    if (settings.autoSpeak && voiceEnabled) {
      console.log('üîä –ü–æ—á–∞—Ç–æ–∫ –æ–∑–≤—É—á—É–≤–∞–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ...');
      
      // –°–ø–æ—á–∞—Ç–∫—É –ø—Ä–æ–±—É—î–º–æ Browser API (–≤—ñ–Ω –∑–∞–≤–∂–¥–∏ –¥–æ—Å—Ç—É–ø–Ω–∏–π)
      console.log('üåê –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ Browser Speech API...');
      speakResponseBrowser(response);
      
      // –ü–æ—Ç—ñ–º –º–æ–∂–Ω–∞ —Å–ø—Ä–æ–±—É–≤–∞—Ç–∏ Premium FREE API —è–∫ –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è (—è–∫—â–æ –¥–æ—Å—Ç—É–ø–Ω–∏–π)
      // try {
      //   await speakResponsePremiumFree(response);
      // } catch (error) {
      //   console.warn('‚ö†Ô∏è Premium FREE TTS –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ Browser API');
      // }
    } else {
      console.log('üîá –ê–≤—Ç–æ–æ–∑–≤—É—á—É–≤–∞–Ω–Ω—è –≤–∏–º–∫–Ω–µ–Ω–æ –∞–±–æ –æ–∑–≤—É—á—É–≤–∞–Ω–Ω—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–µ');
    }

    // –í—ñ–¥–º—ñ—á–∞—î–º–æ –∫–æ–º–∞–Ω–¥—É —è–∫ –≤–∏–∫–æ–Ω–∞–Ω—É
    command.executed = true;
    setIsProcessing(false);
    
    console.log('‚úÖ –û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
  };

    // –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–æ–º–∞–Ω–¥–∏
    setRecentCommands(prev =>
      prev.map(cmd =>
        cmd.id === command.id
          ? { ...cmd, action: 'completed', executed: true }
          : cmd
      )
    );

    setIsProcessing(false);
    setCurrentCommand('');
  };

  const generateAIResponse = (command: string): string => {
    const lowerCommand = command.toLowerCase();

    if (lowerCommand.includes('–¥–∞—à–±–æ—Ä–¥') || lowerCommand.includes('–≥–æ–ª–æ–≤–Ω–∞')) {
      return '–í—ñ—Ç–∞—é! –í—ñ–¥–∫—Ä–∏–≤–∞—é –≥–æ–ª–æ–≤–Ω–∏–π –¥–∞—à–±–æ—Ä–¥. –¢—É—Ç –≤–∏ –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∑–∞–≥–∞–ª—å–Ω–∏–π —Å—Ç–∞–Ω –≤—Å—ñ—Ö —Å–∏—Å—Ç–µ–º. –í—Å–µ –ø—Ä–∞—Ü—é—î —Å—Ç–∞–±—ñ–ª—å–Ω–æ.';
    } else if (lowerCommand.includes('–∞–≥–µ–Ω—Ç') || lowerCommand.includes('–∞–≥–µ–Ω—Ç–∏')) {
      return '–ü–µ—Ä–µ—Ö–æ–¥–∂—É –¥–æ –º–æ–¥—É–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —à—Ç—É—á–Ω–∏–º —ñ–Ω—Ç–µ–ª–µ–∫—Ç–æ–º. –ó–∞—Ä–∞–∑ –∞–∫—Ç–∏–≤–Ω—ñ 12 –∞–≥–µ–Ω—Ç—ñ–≤. –í—Å—ñ –ø—Ä–∞—Ü—é—é—Ç—å –≤ —à—Ç–∞—Ç–Ω–æ–º—É —Ä–µ–∂–∏–º—ñ.';
    } else if (lowerCommand.includes('–±–µ–∑–ø–µ–∫–∞') || lowerCommand.includes('–∑–∞—Ö–∏—Å—Ç')) {
      return '–í—ñ–¥–∫—Ä–∏–≤–∞—é —Ü–µ–Ω—Ç—Ä –∫—ñ–±–µ—Ä–±–µ–∑–ø–µ–∫–∏. –ü–æ—Ç–æ—á–Ω–∏–π —Ä—ñ–≤–µ–Ω—å –∑–∞–≥—Ä–æ–∑–∏ –º—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π. –í—Å—ñ –∑–∞—Ö–∏—Å–Ω—ñ —Å–∏—Å—Ç–µ–º–∏ –∞–∫—Ç–∏–≤–Ω—ñ —Ç–∞ —Ñ—É–Ω–∫—Ü—ñ–æ–Ω—É—é—Ç—å –Ω–∞–ª–µ–∂–Ω–∏–º —á–∏–Ω–æ–º.';
    } else if (lowerCommand.includes('–¥–∞–Ω—ñ') || lowerCommand.includes('–±–∞–∑–∞')) {
      return '–ü–µ—Ä–µ—Ö–æ–¥–∂—É –¥–æ —Ü–µ–Ω—Ç—Ä—É —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –¥–∞–Ω–∏–º–∏. –í—Å—ñ –¥–∂–µ—Ä–µ–ª–∞ –¥–∞–Ω–∏—Ö —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–æ–≤–∞–Ω—ñ. –®–≤–∏–¥–∫—ñ—Å—Ç—å –æ–±—Ä–æ–±–∫–∏ –æ–ø—Ç–∏–º–∞–ª—å–Ω–∞.';
    } else if (lowerCommand.includes('–∞–Ω–∞–ª—ñ—Ç–∏–∫–∞') || lowerCommand.includes('–∑–≤—ñ—Ç')) {
      return '–í—ñ–¥–∫—Ä–∏–≤–∞—é —Ä–æ–∑—É–º–Ω–∏–π –º–æ–¥—É–ª—å –∞–Ω–∞–ª—ñ—Ç–∏–∫–∏. –ì–æ—Ç—É—é –∞–∫—Ç—É–∞–ª—å–Ω—ñ –º–µ—Ç—Ä–∏–∫–∏ —Ç–∞ –∫–ª—é—á–æ–≤—ñ –ø–æ–∫–∞–∑–Ω–∏–∫–∏ –µ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ –¥–ª—è –≤–∞—à–æ–≥–æ –æ–≥–ª—è–¥—É.';
    } else if (lowerCommand.includes('–¥–æ—Å–ª—ñ–¥–∂–µ–Ω–Ω—è') || lowerCommand.includes('–ø—Ä–æ–µ–∫—Ç')) {
      return '–ü–µ—Ä–µ—Ö–æ–¥–∂—É –¥–æ –¥–æ—Å–ª—ñ–¥–Ω–∏—Ü—å–∫–æ—ó –ª–∞–±–æ—Ä–∞—Ç–æ—Ä—ñ—ó. –ù–∞—Ä–∞–∑—ñ –∞–∫—Ç–∏–≤–Ω—ñ 3 –ø—Ä–æ–µ–∫—Ç–∏ —Ç–∞ 5 –µ–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç—ñ–≤. –ü—Ä–æ–≥—Ä–µ—Å –≤—ñ–¥–º—ñ–Ω–Ω–∏–π.';
    } else if (lowerCommand.includes('3d') || lowerCommand.includes('—Ç—Ä–∏–≤–∏–º—ñ—Ä–Ω–∏–π') || lowerCommand.includes('–≤—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—è')) {
      return '–ó–∞–ø—É—Å–∫–∞—é —Ç—Ä–∏–≤–∏–º—ñ—Ä–Ω–∏–π –≤—ñ–∑—É–∞–ª—ñ–∑–∞—Ç–æ—Ä. –ü—ñ–¥–≥–æ—Ç–æ–≤—É—é —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—É —Å—Ü–µ–Ω—É –∑ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—é –æ–±–µ—Ä—Ç–∞–Ω–Ω—è —Ç–∞ –º–∞—Å—à—Ç–∞–±—É–≤–∞–Ω–Ω—è.';
    } else if (lowerCommand.includes('–∫–æ–ª–∞–±–æ—Ä–∞—Ü—ñ—è') || lowerCommand.includes('–∫–æ–º–∞–Ω–¥–∞') || lowerCommand.includes('—á–∞—Ç')) {
      return '–í—ñ–¥–∫—Ä–∏–≤–∞—é —Ö–∞–± –∫–æ–ª–∞–±–æ—Ä–∞—Ü—ñ—ó –≤ —Ä–µ–∞–ª—å–Ω–æ–º—É —á–∞—Å—ñ. –¢—É—Ç –≤–∏ –º–æ–∂–µ—Ç–µ —Å–ø—ñ–ª–∫—É–≤–∞—Ç–∏—Å—è –∑ –∫–æ–º–∞–Ω–¥–æ—é —Ç–∞ –ø—Ä–æ–≤–æ–¥–∏—Ç–∏ –≤—ñ–¥–µ–æ–∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü—ñ—ó.';
    } else if (lowerCommand.includes('–ø—Ä–∏–≤—ñ—Ç') || lowerCommand.includes('–≤—ñ—Ç–∞—é') || lowerCommand.includes('hello')) {
      return '–ü—Ä–∏–≤—ñ—Ç! –Ø –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏–π AI –∞—Å–∏—Å—Ç–µ–Ω—Ç –ù–µ–∫—Å—É—Å. –†–∞–¥–∏–π –≤–∞—Å –±–∞—á–∏—Ç–∏! –ß–∏–º –º–æ–∂—É –¥–æ–ø–æ–º–æ–≥—Ç–∏ —Å—å–æ–≥–æ–¥–Ω—ñ?';
    } else if (lowerCommand.includes('–¥–æ–ø–æ–º–æ–≥–∞') || lowerCommand.includes('help') || lowerCommand.includes('–∫–æ–º–∞–Ω–¥–∏')) {
      return '–Ø –º–æ–∂—É –¥–æ–ø–æ–º–æ–≥—Ç–∏ –∑ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—î—é –ø–æ —Å–∏—Å—Ç–µ–º—ñ. –°–∫–∞–∂—ñ—Ç—å "–≤—ñ–¥–∫—Ä–∏–π –¥–∞—à–±–æ—Ä–¥", "–ø–æ–∫–∞–∂–∏ –∞–≥–µ–Ω—Ç—ñ–≤", "—Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º–∏" –∞–±–æ "–±–µ–∑–ø–µ–∫–∞". –¢–∞–∫–æ–∂ –¥–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏ –¥–ª—è –∞–Ω–∞–ª—ñ—Ç–∏–∫–∏ —Ç–∞ –¥–æ—Å–ª—ñ–¥–∂–µ–Ω–Ω—è.';
    } else if (lowerCommand.includes('—Å—Ç–∞—Ç—É—Å') || lowerCommand.includes('—Å—Ç–∞–Ω')) {
      return '–°–∏—Å—Ç–µ–º–Ω–∏–π —Å—Ç–∞—Ç—É—Å –≤—ñ–¥–º—ñ–Ω–Ω–∏–π! –ü—Ä–æ—Ü–µ—Å–æ—Ä –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∏–π –Ω–∞ 45 –≤—ñ–¥—Å–æ—Ç–∫—ñ–≤, –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–∞ –ø–∞–º\'—è—Ç—å –Ω–∞ 62 –≤—ñ–¥—Å–æ—Ç–∫–∏. –ú–µ—Ä–µ–∂–µ–≤–µ –∑\'—î–¥–Ω–∞–Ω–Ω—è —Å—Ç–∞–±—ñ–ª—å–Ω–µ. –í—Å—ñ —Å–µ—Ä–≤—ñ—Å–∏ —Ñ—É–Ω–∫—Ü—ñ–æ–Ω—É—é—Ç—å –Ω–æ—Ä–º–∞–ª—å–Ω–æ.';
    } else if (lowerCommand.includes('–¥—è–∫—É—é') || lowerCommand.includes('—Å–ø–∞—Å–∏–±–æ') || lowerCommand.includes('thank')) {
      return '–ë—É–¥—å –ª–∞—Å–∫–∞! –ó–∞–≤–∂–¥–∏ —Ä–∞–¥–∏–π –¥–æ–ø–æ–º–æ–≥—Ç–∏. –Ø–∫—â–æ —É –≤–∞—Å —î —â–µ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è, –ø—Ä–æ—Å—Ç–æ —Å–∫–∞–∂—ñ—Ç—å –º–µ–Ω—ñ.';
    } else if (lowerCommand.includes('—Ç–µ—Å—Ç') || lowerCommand.includes('–ø–µ—Ä–µ–≤—ñ—Ä–∫–∞') || lowerCommand.includes('—Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è')) {
      return '–ü—Ä–æ–≤–æ–¥–∂—É –ø–æ–≤–Ω–µ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –º–æ–¥—É–ª—è. –†–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è –ø—Ä–∞—Ü—é—î –≤—ñ–¥–º—ñ–Ω–Ω–æ! –°–∏–Ω—Ç–µ–∑ –º–æ–≤–ª–µ–Ω–Ω—è —Ñ—É–Ω–∫—Ü—ñ–æ–Ω—É—î –Ω–∞–ª–µ–∂–Ω–∏–º —á–∏–Ω–æ–º. –ú—ñ–∫—Ä–æ—Ñ–æ–Ω –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π –ø—Ä–∞–≤–∏–ª—å–Ω–æ. –í—Å–µ –≥–æ—Ç–æ–≤–æ –¥–æ —Ä–æ–±–æ—Ç–∏.';
    } else if (lowerCommand.includes('–º—ñ–∫—Ä–æ—Ñ–æ–Ω') || lowerCommand.includes('microphone')) {
      return '–¢–µ—Å—Ç—É—é –º—ñ–∫—Ä–æ—Ñ–æ–Ω. –°–∏–≥–Ω–∞–ª —á–∏—Å—Ç–∏–π, —Ä—ñ–≤–µ–Ω—å –∑–≤—É–∫—É –æ–ø—Ç–∏–º–∞–ª—å–Ω–∏–π. –Ø–∫—ñ—Å—Ç—å —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è –º–æ–≤–∏ –≤—ñ–¥–º—ñ–Ω–Ω–∞. –ú—ñ–∫—Ä–æ—Ñ–æ–Ω –ø—Ä–∞—Ü—é—î —ñ–¥–µ–∞–ª—å–Ω–æ!';
    } else if (lowerCommand.includes('–æ–∑–≤—É—á—É–≤–∞–Ω–Ω—è') || lowerCommand.includes('–∑–≤—É–∫') || lowerCommand.includes('voice')) {
      return '–ü–µ—Ä–µ–≤—ñ—Ä—è—é —Å–∏—Å—Ç–µ–º—É –æ–∑–≤—É—á—É–≤–∞–Ω–Ω—è. –ì–æ–ª–æ—Å–æ–≤–∏–π —Å–∏–Ω—Ç–µ–∑ –∞–∫—Ç–∏–≤–Ω–∏–π. –£–∫—Ä–∞—ó–Ω—Å—å–∫—ñ –≥–æ–ª–æ—Å–∏ –¥–æ—Å—Ç—É–ø–Ω—ñ. –®–≤–∏–¥–∫—ñ—Å—Ç—å —Ç–∞ —ñ–Ω—Ç–æ–Ω–∞—Ü—ñ—è –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω—ñ –ø—Ä–∞–≤–∏–ª—å–Ω–æ. –Ø–∫—ñ—Å—Ç—å –∑–≤—É–∫—É –≤—ñ–¥–º—ñ–Ω–Ω–∞!';
    } else if (lowerCommand.includes('—É–∫—Ä–∞—ó–Ω—Å—å–∫–∞') || lowerCommand.includes('ukrainian')) {
      return '–ü–µ—Ä–µ–∫–ª—é—á–∞—é—Å—è –Ω–∞ —É–∫—Ä–∞—ó–Ω—Å—å–∫—É –º–æ–≤—É. –í—ñ—Ç–∞—é! –ì–æ–ª–æ—Å–æ–≤–∏–π —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø–æ–≤–Ω—ñ—Å—Ç—é –ø—ñ–¥—Ç—Ä–∏–º—É—î —É–∫—Ä–∞—ó–Ω—Å—å–∫—É –º–æ–≤—É. –†–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è —Ç–∞ –æ–∑–≤—É—á—É–≤–∞–Ω–Ω—è –ø—Ä–∞—Ü—é—é—Ç—å –ø—Ä–µ–∫—Ä–∞—Å–Ω–æ!';
    } else if (lowerCommand.includes('english') || lowerCommand.includes('–∞–Ω–≥–ª—ñ–π—Å—å–∫–∞')) {
      return 'Switching to English language. Hello! Voice interface fully supports English language. Speech recognition and text-to-speech are working perfectly!';
    } else if (lowerCommand.includes('switch') && lowerCommand.includes('english')) {
      return 'Language switched to English successfully! Hello, I am your Nexus AI assistant. How can I help you today?';
    } else {
      return `–¶—ñ–∫–∞–≤–æ! –í–∏ —Å–∫–∞–∑–∞–ª–∏: "${command}". –Ø –∞–Ω–∞–ª—ñ–∑—É—é –≤–∞—à—É –∫–æ–º–∞–Ω–¥—É —Ç–∞ —à—É–∫–∞—é –Ω–∞–π–∫—Ä–∞—â–∏–π —Å–ø–æ—Å—ñ–± –¥–æ–ø–æ–º–æ–≥—Ç–∏ –≤–∞–º. –°–ø—Ä–æ–±—É–π—Ç–µ —Å–∫–∞–∑–∞—Ç–∏ –±—ñ–ª—å—à –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É –∫–æ–º–∞–Ω–¥—É –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É "–¢–µ—Å—Ç –≥–æ–ª–æ—Å—É" –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º–∏.`;
    }
  };

  // üé§ Premium FREE TTS Test –∑ –Ω–∞–π–∫—Ä–∞—â–∏–º–∏ –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∏–º–∏ –º–æ–¥–µ–ª—è–º–∏
  const testTTS = async () => {
    console.log('üé§ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è Premium FREE Voice System...');

    // –ó—É–ø–∏–Ω—è—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—î –æ–∑–≤—É—á—É–≤–∞–Ω–Ω—è
    premiumFreeVoiceAPI.stopSpeaking();

    const testMessages = {
      uk: [
        "–ü—Ä–∏–≤—ñ—Ç! –Ø –≤–∞—à AI –∞—Å–∏—Å—Ç–µ–Ω—Ç –ù–µ–∫—Å—É—Å.",
        "–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é –Ω–∞–π–∫—Ä–∞—â—ñ –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω—ñ –º–æ–¥–µ–ª—ñ: Coqui TTS —Ç–∞ faster-whisper.",
        "–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ. –í—Å—ñ —Å–∏—Å—Ç–µ–º–∏ –≥–æ—Ç–æ–≤—ñ –¥–æ —Ä–æ–±–æ—Ç–∏."
      ],
      en: [
        "Hello! I am your Nexus AI assistant.",
        "Using the best free models: Coqui TTS and faster-whisper.",
        "Testing completed successfully. All systems are ready."
      ]
    };

    // –ü–æ–∫–∞–∑—É—î–º–æ capabilities
    if (voiceCapabilities) {
      console.log('üìä Voice Capabilities:', voiceCapabilities);
      console.log('üîä TTS –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∏:', voiceCapabilities.tts_providers);
      console.log('ÔøΩ STT –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∏:', voiceCapabilities.stt_providers);
      console.log(`üéØ –†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–∏–π TTS: ${voiceCapabilities.recommended_tts} ‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê`);
      console.log(`üéØ –†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–∏–π STT: ${voiceCapabilities.recommended_stt} ‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê`);
    }

    // –í–∏–∑–Ω–∞—á–∞—î–º–æ –º–æ–≤—É
    const lang = settings.language.startsWith('uk') ? 'uk' : 'en';
    const messages = testMessages[lang];

    // –ü–æ—Å–ª—ñ–¥–æ–≤–Ω–µ –æ–∑–≤—É—á—É–≤–∞–Ω–Ω—è
    for (let i = 0; i < messages.length; i++) {
      const message = messages[i];
      console.log(`üîä –û–∑–≤—É—á—É–≤–∞–Ω–Ω—è ${i + 1}/${messages.length}: "${message}"`);

      try {
        await speakResponsePremiumFree(message);
        await new Promise(resolve => setTimeout(resolve, 1500)); // –ü–∞—É–∑–∞ –º—ñ–∂ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º–∏
      } catch (error) {
        console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–∑–≤—É—á—É–≤–∞–Ω–Ω—è: ${error}`);
      }
    }

    console.log('‚úÖ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
  };

  // üé§ Premium FREE TTS –∑ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–º fallback
  const speakResponsePremiumFree = async (text: string) => {
    if (!voiceEnabled) {
      console.log('üîá –û–∑–≤—É—á—É–≤–∞–Ω–Ω—è –≤–∏–º–∫–Ω–µ–Ω–æ');
      return;
    }

    try {
      const lang = settings.language.startsWith('uk') ? 'uk' : 'en';

      console.log(`üîä TTS –∑–∞–ø–∏—Ç: "${text.substring(0, 50)}...", lang=${lang}`);

      // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ Premium FREE API –∑ await
      await premiumFreeVoiceAPI.textToSpeech({
        text,
        language: lang,
        speed: settings.speed,
        provider: 'auto'  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≤–∏–±–µ—Ä–µ Coqui –∞–±–æ gTTS
      });

      console.log(`‚úÖ TTS —É—Å–ø—ñ—à–Ω–æ (Premium FREE)`);
    } catch (error) {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ Premium FREE TTS:', error);
      console.log('üí° Fallback –¥–æ Browser API...');

      // Fallback –¥–æ –±–∞–∑–æ–≤–æ–≥–æ –±—Ä–∞—É–∑–µ—Ä–Ω–æ–≥–æ API
      speakResponseBrowser(text);
    }
  };

  // –ü–æ–∫—Ä–∞—â–µ–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –æ–∑–≤—É—á—É–≤–∞–Ω–Ω—è –∑ –¥–æ–¥–∞—Ç–∫–æ–≤–∏–º–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è–º–∏ (Browser fallback)
  const speakResponseBrowser = (text: string) => {
    console.log('üåê Fallback –¥–æ Browser Speech API...');
    
    if (!synthRef.current) {
      console.error('‚ùå speechSynthesis –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π');
      return;
    }
    
    if (!voiceEnabled) {
      console.log('üîá –û–∑–≤—É—á—É–≤–∞–Ω–Ω—è –≤–∏–º–∫–Ω–µ–Ω–æ');
      return;
    }

    console.log(`üîä Browser TTS: "${text.substring(0, 50)}..."`);

    // –ó—É–ø–∏–Ω—è—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—î –≤—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è
    synthRef.current.cancel();

    const utterance = new SpeechSynthesisUtterance(text);
    utterance.lang = settings.language;
    utterance.rate = settings.speed;
    utterance.pitch = settings.pitch;
    utterance.volume = settings.volume;

    console.log('‚öôÔ∏è Browser TTS –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è:', {
      lang: utterance.lang,
      rate: utterance.rate,
      pitch: utterance.pitch,
      volume: utterance.volume
    });

    // –û—Ç—Ä–∏–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –≥–æ–ª–æ—Å—ñ–≤
    const voices = synthRef.current.getVoices();
    console.log('üé§ –î–æ—Å—Ç—É–ø–Ω–æ –≥–æ–ª–æ—Å—ñ–≤:', voices.length);

    // –†–æ–∑—à–∏—Ä–µ–Ω–∏–π –ø–æ—à—É–∫ –ø—ñ–¥—Ö–æ–¥—è—â–æ–≥–æ –≥–æ–ª–æ—Å—É
    let selectedVoice = null;

    if (settings.language === 'uk-UA') {
      // –ü—Ä—ñ–æ—Ä–∏—Ç–µ—Ç —É–∫—Ä–∞—ó–Ω—Å—å–∫–∏—Ö –≥–æ–ª–æ—Å—ñ–≤
      selectedVoice = voices.find((voice: any) =>
        voice.lang === 'uk-UA' || voice.lang === 'uk'
      ) || voices.find((voice: any) =>
        voice.name.toLowerCase().includes('ukrainian') ||
        voice.name.toLowerCase().includes('lesya') ||
        voice.name.toLowerCase().includes('maxim') ||
        voice.name.toLowerCase().includes('oleksandr')
      );
    } else if (settings.language === 'en-US') {
      // –ü–æ—à—É–∫ —è–∫—ñ—Å–Ω–∏—Ö –∞–Ω–≥–ª—ñ–π—Å—å–∫–∏—Ö –≥–æ–ª–æ—Å—ñ–≤
      selectedVoice = voices.find((voice: any) =>
        voice.lang === 'en-US' && (
          voice.name.includes('Google') ||
          voice.name.includes('Microsoft') ||
          voice.name.includes('Neural')
        )
      ) || voices.find((voice: any) => voice.lang === 'en-US');
    }

    // –ó–∞–≥–∞–ª—å–Ω–∏–π fallback
    if (!selectedVoice) {
      selectedVoice = voices.find((voice: any) =>
        voice.name.includes(settings.voice)
      ) || voices[0];
    }

    if (selectedVoice) {
      utterance.voice = selectedVoice;
      console.log('üéµ –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –≥–æ–ª–æ—Å:', selectedVoice.name, selectedVoice.lang);
    } else {
      console.log('‚ö†Ô∏è –ì–æ–ª–æ—Å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è —Å–∏—Å—Ç–µ–º–Ω–∏–π –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º');
    }

    // –†–æ–∑—à–∏—Ä–µ–Ω—ñ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–¥—ñ–π
    utterance.onstart = () => {
      console.log('üîä Browser TTS –ü–û–ß–ê–¢–û–ö:', text.substring(0, 50) + '...');
    };

    utterance.onend = () => {
      console.log('‚úÖ Browser TTS –ó–ê–í–ï–†–®–ï–ù–û');
    };

    utterance.onerror = (event) => {
      console.error('‚ùå Browser TTS –ü–û–ú–ò–õ–ö–ê:', event.error);
    };

    utterance.onpause = () => {
      console.log('‚è∏Ô∏è Browser TTS –ø—Ä–∏–∑—É–ø–∏–Ω–µ–Ω–æ');
    };

    utterance.onresume = () => {
      console.log('‚ñ∂Ô∏è Browser TTS –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–æ');
    };

    // –î–æ–¥–∞—î–º–æ –∑–∞—Ç—Ä–∏–º–∫—É –¥–ª—è –∑–∞–±–µ–∑–ø–µ—á–µ–Ω–Ω—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≥–æ–ª–æ—Å—ñ–≤
    const speakWithDelay = () => {
      if (synthRef.current && synthRef.current.getVoices().length > 0) {
        console.log('üöÄ –ó–∞–ø—É—Å–∫ Browser TTS...');
        synthRef.current.speak(utterance);
      } else {
        console.log('‚è≥ –û—á—ñ–∫—É–≤–∞–Ω–Ω—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≥–æ–ª–æ—Å—ñ–≤...');
        setTimeout(speakWithDelay, 100);
      }
    };

    speakWithDelay();
  };

  const startListening = async () => {
    console.log('üé§ –°–ø—Ä–æ–±–∞ –∑–∞–ø—É—Å–∫—É —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è...');
    console.log('Recognition ref:', recognitionRef.current);
    console.log('Is listening:', isListening);
    console.log('Voice enabled:', voiceEnabled);

    if (!recognitionRef.current) {
      console.error('‚ùå Speech Recognition –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π!');
      alert('–ì–æ–ª–æ—Å–æ–≤–µ —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–µ —É –≤–∞—à–æ–º—É –±—Ä–∞—É–∑–µ—Ä—ñ. –°–ø—Ä–æ–±—É–π—Ç–µ Chrome –∞–±–æ Edge.');
      return;
    }

    if (isListening) {
      console.warn('‚ö†Ô∏è –í–∂–µ —Å–ª—É—Ö–∞—î–º–æ!');
      return;
    }

    // –°–ø–æ—á–∞—Ç–∫—É –∑–∞–ø–∏—Ç—É—î–º–æ –¥–æ–∑–≤—ñ–ª –Ω–∞ –º—ñ–∫—Ä–æ—Ñ–æ–Ω —è–≤–Ω–æ
    try {
      console.log('üé§ –ó–∞–ø–∏—Ç –¥–æ—Å—Ç—É–ø—É –¥–æ –º—ñ–∫—Ä–æ—Ñ–æ–Ω–∞...');
      const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
      console.log('‚úÖ –î–æ—Å—Ç—É–ø –¥–æ –º—ñ–∫—Ä–æ—Ñ–æ–Ω–∞ –Ω–∞–¥–∞–Ω–æ:', stream);

      // –ó—É–ø–∏–Ω—è—î–º–æ stream (recognition —Å–∞–º —Å—Ç–≤–æ—Ä–∏—Ç—å —Å–≤—ñ–π)
      stream.getTracks().forEach(track => track.stop());

      // –¢–µ–ø–µ—Ä –∑–∞–ø—É—Å–∫–∞—î–º–æ recognition
      console.log('‚úÖ –ó–∞–ø—É—Å–∫–∞—î–º–æ recognition.start()...');
      recognitionRef.current.start();
      console.log('‚úÖ Recognition.start() –≤–∏–∫–ª–∏–∫–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ');

    } catch (error) {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É recognition:', error);
      alert(`–ü–æ–º–∏–ª–∫–∞ –¥–æ—Å—Ç—É–ø—É –¥–æ –º—ñ–∫—Ä–æ—Ñ–æ–Ω–∞: ${error.message}\n\n–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ:\n1. –î–æ–∑–≤—ñ–ª —É –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è—Ö –±—Ä–∞—É–∑–µ—Ä–∞\n2. HTTPS –∑'—î–¥–Ω–∞–Ω–Ω—è (–∞–±–æ localhost)\n3. –ú—ñ–∫—Ä–æ—Ñ–æ–Ω –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ`);
    }
  };

  const stopListening = () => {
    console.log('üõë –ó—É–ø–∏–Ω–∫–∞ —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è...');
    if (recognitionRef.current) {
      try {
        recognitionRef.current.stop();
        setIsListening(false);
        setIsConnected(false);
        console.log('‚úÖ –†–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è –∑—É–ø–∏–Ω–µ–Ω–æ');
      } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑—É–ø–∏–Ω—Ü—ñ:', error);
      }
    }
  };

  const toggleListening = () => {
    console.log('üîÑ Toggle listening:', { isListening });
    if (isListening) {
      stopListening();
    } else {
      startListening();
    }
  };

  const quickCommands = [
    { label: '–ü—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è', command: '–ø—Ä–∏–≤—ñ—Ç, —è–∫ —Å–ø—Ä–∞–≤–∏?', icon: AssistantIcon },
    { label: '–í—ñ–¥–∫—Ä–∏—Ç–∏ –¥–∞—à–±–æ—Ä–¥', command: '–≤—ñ–¥–∫—Ä–∏–π –≥–æ–ª–æ–≤–Ω–∏–π –¥–∞—à–±–æ—Ä–¥', icon: SmartToyIcon },
    { label: '–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º–∏', command: '–ø–æ–∫–∞–∂–∏ —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º–∏', icon: ChatIcon },
    { label: '–¢–µ—Å—Ç –≥–æ–ª–æ—Å—É', command: '–ø—Ä–æ–≤–µ–¥–∏ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –º–æ–¥—É–ª—è', icon: AutoAwesomeIcon },
    { label: '–ê–Ω–∞–ª—ñ—Ç–∏–∫–∞', command: '–≤—ñ–¥–∫—Ä–∏–π –º–æ–¥—É–ª—å –∞–Ω–∞–ª—ñ—Ç–∏–∫–∏', icon: LightbulbIcon },
    { label: '–î–æ–ø–æ–º–æ–≥–∞', command: '–ø–æ–∫–∞–∂–∏ –¥–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏', icon: AssistantIcon },
    { label: 'üé§ –ì–æ–ª–æ—Å–æ–≤–∏–π —Ç–µ—Å—Ç', command: '—Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –º—ñ–∫—Ä–æ—Ñ–æ–Ω—É —Ç–∞ –æ–∑–≤—É—á—É–≤–∞–Ω–Ω—è', icon: VoiceIcon },
    { label: 'üîä –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–≤—É–∫—É', command: '–ø–µ—Ä–µ–≤—ñ—Ä —è–∫—ñ—Å—Ç—å –∑–≤—É–∫—É —Ç–∞ –æ–∑–≤—É—á—É–≤–∞–Ω–Ω—è', icon: VolumeUpIcon },
    { label: 'üá∫üá¶ –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞ –º–æ–≤–∞', command: '–ø–µ—Ä–µ–∫–ª—é—á–∏—Å—å –Ω–∞ —É–∫—Ä–∞—ó–Ω—Å—å–∫—É –º–æ–≤—É —Ç–∞ —Å–∫–∞–∂–∏ —â–æ—Å—å', icon: LanguageIcon },
    { label: 'üåê English test', command: 'switch to english and say hello', icon: TranslateIcon }
  ];

  const executeQuickCommand = (command: string) => {
    processVoiceCommand(command, 1.0);
  };

  // –§—É–Ω–∫—Ü—ñ—è –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ
  const welcomeMessage = () => {
    if (settings.autoSpeak && voiceEnabled) {
      setTimeout(() => {
        speakResponse("–í—ñ—Ç–∞—é –≤ –ù–µ–∫—Å—É—Å —Å–∏—Å—Ç–µ–º—ñ! –ì–æ–ª–æ—Å–æ–≤–∏–π —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≥–æ—Ç–æ–≤–∏–π –¥–æ —Ä–æ–±–æ—Ç–∏. –°–∫–∞–∂—ñ—Ç—å '–¥–æ–ø–æ–º–æ–≥–∞' –¥–ª—è –ø–µ—Ä–µ–ª—ñ–∫—É –∫–æ–º–∞–Ω–¥.");
      }, 1000);
    }
  };

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è –ø—Ä–∏ –ø–µ—Ä—à–æ–º—É –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ
  useEffect(() => {
    welcomeMessage();
  }, []);

  return (
    <Box sx={{ p: 3 }}>
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –º–æ–¥—É–ª—è */}
      <motion.div
        initial={{ opacity: 0, y: -20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.5 }}
      >
        <Box sx={{ display: 'flex', alignItems: 'center', gap: 2, mb: 4 }}>
          <Avatar
            sx={{
              background: `linear-gradient(45deg, ${nexusColors.accent.main}, ${nexusColors.primary.main})`,
              width: 60,
              height: 60
            }}
          >
            <VoiceIcon sx={{ fontSize: '2rem' }} />
          </Avatar>
          <Box>
            <Typography
              variant="h3"
              sx={{
                color: nexusColors.text.primary,
                fontWeight: 'bold',
                background: `linear-gradient(45deg, ${nexusColors.accent.main}, ${nexusColors.primary.main})`,
                WebkitBackgroundClip: 'text',
                WebkitTextFillColor: 'transparent'
              }}
            >
              üé§ AI –ì–æ–ª–æ—Å–æ–≤–∏–π –Ü–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            </Typography>
            <Typography
              variant="h6"
              sx={{ color: nexusColors.text.secondary }}
            >
              –ì–æ–ª–æ—Å–æ–≤–µ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —Ç–∞ AI –∞—Å–∏—Å—Ç–µ–Ω—Ç
            </Typography>
          </Box>
        </Box>
      </motion.div>

      {/* –û—Å–Ω–æ–≤–Ω–∏–π —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å */}
      <motion.div
        initial={{ opacity: 0, scale: 0.9 }}
        animate={{ opacity: 1, scale: 1 }}
        transition={{ duration: 0.6 }}
      >
        <Card
          sx={{
            background: `linear-gradient(135deg, ${nexusColors.primary.dark}80, ${nexusColors.secondary.dark}60)`,
            backdropFilter: 'blur(10px)',
            border: `1px solid ${nexusColors.accent.main}30`,
            borderRadius: 3,
            mb: 3,
            position: 'relative',
            overflow: 'visible'
          }}
        >
          <CardContent sx={{ p: 4, textAlign: 'center' }}>
            {/* –í—ñ–∑—É–∞–ª—å–Ω–∏–π —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø—Ä–æ—Å–ª—É—Ö–æ–≤—É–≤–∞–Ω–Ω—è */}
            <motion.div
              animate={isListening ? {
                scale: [1, 1.2, 1],
                opacity: [0.7, 1, 0.7]
              } : {}}
              transition={{
                duration: 2,
                repeat: isListening ? Infinity : 0,
                ease: "easeInOut"
              }}
              style={{ marginBottom: '2rem' }}
            >
              <Avatar
                sx={{
                  width: 120,
                  height: 120,
                  margin: '0 auto',
                  background: isListening
                    ? `linear-gradient(45deg, ${nexusColors.success.main}, ${nexusColors.accent.main})`
                    : `linear-gradient(45deg, ${nexusColors.text.secondary}40, ${nexusColors.primary.dark})`,
                  border: isListening ? `3px solid ${nexusColors.success.main}40` : 'none',
                  boxShadow: isListening ? `0 0 30px ${nexusColors.success.main}40` : 'none',
                  cursor: 'pointer',
                  transition: 'all 0.3s ease'
                }}
                onClick={toggleListening}
              >
                {isListening ? (
                  <MicIcon sx={{ fontSize: '3rem', color: 'white' }} />
                ) : (
                  <MicOffIcon sx={{ fontSize: '3rem', color: nexusColors.text.secondary }} />
                )}
              </Avatar>
            </motion.div>

            {/* –°—Ç–∞—Ç—É—Å —Ç–∞ –ø–æ—Ç–æ—á–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ */}
            <Typography
              variant="h5"
              sx={{
                color: isListening ? nexusColors.success.main : nexusColors.text.secondary,
                mb: 2,
                fontWeight: 'bold'
              }}
            >
              {isListening ? 'üéß –°–ª—É—Ö–∞—é...' : 'üîá –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü—ñ—ó'}
            </Typography>

            {currentCommand && (
              <motion.div
                initial={{ opacity: 0, y: 10 }}
                animate={{ opacity: 1, y: 0 }}
                exit={{ opacity: 0, y: -10 }}
              >
                <Paper
                  sx={{
                    p: 2,
                    mb: 2,
                    background: `${nexusColors.accent.main}20`,
                    border: `1px solid ${nexusColors.accent.main}40`,
                    borderRadius: 2
                  }}
                >
                  <Typography variant="body1" sx={{ color: nexusColors.text.primary }}>
                    "{currentCommand}"
                  </Typography>
                  {confidence > 0 && (
                    <LinearProgress
                      variant="determinate"
                      value={confidence}
                      sx={{
                        mt: 1,
                        height: 4,
                        borderRadius: 2,
                        background: `${nexusColors.primary.dark}30`,
                        '& .MuiLinearProgress-bar': {
                          background: `linear-gradient(90deg, ${nexusColors.accent.main}, ${nexusColors.success.main})`
                        }
                      }}
                    />
                  )}
                </Paper>
              </motion.div>
            )}

            {/* AI –≤—ñ–¥–ø–æ–≤—ñ–¥—å */}
            {aiResponse && (
              <motion.div
                initial={{ opacity: 0, y: 10 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ duration: 0.5 }}
              >
                <Paper
                  sx={{
                    p: 3,
                    mb: 3,
                    background: `${nexusColors.primary.main}20`,
                    border: `1px solid ${nexusColors.primary.main}40`,
                    borderRadius: 2
                  }}
                >
                  <Box sx={{ display: 'flex', alignItems: 'flex-start', gap: 2 }}>
                    <Avatar
                      sx={{
                        width: 40,
                        height: 40,
                        background: `linear-gradient(45deg, ${nexusColors.primary.main}, ${nexusColors.accent.main})`
                      }}
                    >
                      <PsychologyIcon />
                    </Avatar>
                    <Box sx={{ flex: 1 }}>
                      <Typography variant="body2" sx={{ color: nexusColors.text.secondary, mb: 1 }}>
                        AI –ê—Å–∏—Å—Ç–µ–Ω—Ç Nexus:
                      </Typography>
                      <Typography variant="body1" sx={{ color: nexusColors.text.primary }}>
                        {aiResponse}
                      </Typography>
                    </Box>
                    <IconButton
                      onClick={() => speakResponse(aiResponse)}
                      sx={{ color: nexusColors.primary.main }}
                    >
                      <VolumeUpIcon />
                    </IconButton>
                  </Box>
                </Paper>
              </motion.div>
            )}

            {/* –Ü–Ω–¥–∏–∫–∞—Ç–æ—Ä –æ–±—Ä–æ–±–∫–∏ */}
            {isProcessing && (
              <motion.div
                initial={{ opacity: 0 }}
                animate={{ opacity: 1 }}
                exit={{ opacity: 0 }}
              >
                <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'center', gap: 2, mb: 2 }}>
                  <motion.div
                    animate={{ rotate: 360 }}
                    transition={{ duration: 2, repeat: Infinity, ease: "linear" }}
                  >
                    <PsychologyIcon sx={{ color: nexusColors.accent.main }} />
                  </motion.div>
                  <Typography variant="body1" sx={{ color: nexusColors.text.primary }}>
                    –û–±—Ä–æ–±–ª—è—é –∫–æ–º–∞–Ω–¥—É...
                  </Typography>
                </Box>
              </motion.div>
            )}

            {/* –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è */}
            <Box sx={{ display: 'flex', justifyContent: 'center', gap: 2, mt: 3, flexWrap: 'wrap' }}>
              <Button
                variant={isListening ? "contained" : "outlined"}
                onClick={toggleListening}
                startIcon={isListening ? <StopIcon /> : <PlayIcon />}
                sx={{
                  borderColor: nexusColors.accent.main,
                  color: isListening ? 'white' : nexusColors.accent.main,
                  background: isListening ? nexusColors.accent.main : 'transparent',
                  '&:hover': {
                    borderColor: nexusColors.accent.light,
                    background: isListening ? nexusColors.accent.dark : `${nexusColors.accent.main}20`
                  }
                }}
              >
                {isListening ? '–ó—É–ø–∏–Ω–∏—Ç–∏' : '–ü–æ—á–∞—Ç–∏ —Å–ª—É—Ö–∞—Ç–∏'}
              </Button>

              <Button
                variant="outlined"
                onClick={() => setVoiceEnabled(!voiceEnabled)}
                startIcon={voiceEnabled ? <VolumeUpIcon /> : <VolumeOffIcon />}
                sx={{
                  borderColor: nexusColors.info.main,
                  color: nexusColors.info.main,
                  '&:hover': {
                    borderColor: nexusColors.info.light,
                    background: `${nexusColors.info.main}20`
                  }
                }}
              >
                {voiceEnabled ? '–ó–≤—É–∫ –≤–∫–ª' : '–ó–≤—É–∫ –≤–∏–º–∫'}
              </Button>

              <Button
                variant="outlined"
                onClick={testTTS}
                startIcon={<HearingIcon />}
                sx={{
                  borderColor: nexusColors.success.main,
                  color: nexusColors.success.main,
                  '&:hover': {
                    borderColor: nexusColors.success.light,
                    background: `${nexusColors.success.main}20`
                  }
                }}
              >
                –¢–µ—Å—Ç –≥–æ–ª–æ—Å—É
              </Button>

              <Button
                variant="outlined"
                onClick={() => speakResponseBrowser('–¢–µ—Å—Ç –±—Ä–∞—É–∑–µ—Ä–Ω–æ–≥–æ –æ–∑–≤—É—á—É–≤–∞–Ω–Ω—è. –Ø–∫—â–æ –≤–∏ —á—É—î—Ç–µ —Ü–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, —Ç–æ Browser Speech API –ø—Ä–∞—Ü—é—î –ø—Ä–∞–≤–∏–ª—å–Ω–æ.')}
                startIcon={<VolumeUpIcon />}
                sx={{
                  borderColor: nexusColors.info.main,
                  color: nexusColors.info.main,
                  '&:hover': {
                    borderColor: nexusColors.info.light,
                    background: `${nexusColors.info.main}20`
                  }
                }}
              >
                –¢–µ—Å—Ç Browser
              </Button>

              <Button
                variant="outlined"
                onClick={() => setSettingsOpen(true)}
                startIcon={<SettingsIcon />}
                sx={{
                  borderColor: nexusColors.warning.main,
                  color: nexusColors.warning.main,
                  '&:hover': {
                    borderColor: nexusColors.warning.light,
                    background: `${nexusColors.warning.main}20`
                  }
                }}
              >
                –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
              </Button>
            </Box>
          </CardContent>
        </Card>
      </motion.div>

      {/* –®–≤–∏–¥–∫—ñ –∫–æ–º–∞–Ω–¥–∏ */}
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.6, delay: 0.2 }}
      >
        <Card
          sx={{
            background: `linear-gradient(135deg, ${nexusColors.primary.dark}80, ${nexusColors.secondary.dark}60)`,
            backdropFilter: 'blur(10px)',
            border: `1px solid ${nexusColors.accent.main}30`,
            borderRadius: 3,
            mb: 3
          }}
        >
          <CardContent sx={{ p: 3 }}>
            <Typography
              variant="h6"
              sx={{ color: nexusColors.text.primary, mb: 3, fontWeight: 'bold' }}
            >
              ‚ö° –®–≤–∏–¥–∫—ñ –ö–æ–º–∞–Ω–¥–∏
            </Typography>

            <Box sx={{ display: 'flex', gap: 2, flexWrap: 'wrap' }}>
              {quickCommands.map((cmd, index) => (
                <motion.div
                  key={cmd.label}
                  initial={{ opacity: 0, x: -20 }}
                  animate={{ opacity: 1, x: 0 }}
                  transition={{ duration: 0.5, delay: index * 0.1 }}
                >
                  <Button
                    variant="outlined"
                    startIcon={<cmd.icon />}
                    onClick={() => executeQuickCommand(cmd.command)}
                    sx={{
                      borderColor: `${nexusColors.accent.main}50`,
                      color: nexusColors.text.primary,
                      '&:hover': {
                        borderColor: nexusColors.accent.main,
                        background: `${nexusColors.accent.main}20`
                      }
                    }}
                  >
                    {cmd.label}
                  </Button>
                </motion.div>
              ))}
            </Box>
          </CardContent>
        </Card>
      </motion.div>

      {/* –û—Å—Ç–∞–Ω–Ω—ñ –∫–æ–º–∞–Ω–¥–∏ */}
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.6, delay: 0.3 }}
      >
        <Card
          sx={{
            background: `linear-gradient(135deg, ${nexusColors.primary.dark}80, ${nexusColors.secondary.dark}60)`,
            backdropFilter: 'blur(10px)',
            border: `1px solid ${nexusColors.accent.main}30`,
            borderRadius: 3
          }}
        >
          <CardContent sx={{ p: 3 }}>
            <Typography
              variant="h6"
              sx={{ color: nexusColors.text.primary, mb: 3, fontWeight: 'bold' }}
            >
              üìù –Ü—Å—Ç–æ—Ä—ñ—è –ö–æ–º–∞–Ω–¥
            </Typography>

            <List>
              {recentCommands.length === 0 ? (
                <ListItem>
                  <ListItemText
                    primary="–©–µ –Ω–µ–º–∞—î –≤–∏–∫–æ–Ω–∞–Ω–∏—Ö –∫–æ–º–∞–Ω–¥"
                    primaryTypographyProps={{ color: nexusColors.text.secondary }}
                  />
                </ListItem>
              ) : (
                recentCommands.map((command, index) => (
                  <motion.div
                    key={command.id}
                    initial={{ opacity: 0, x: -20 }}
                    animate={{ opacity: 1, x: 0 }}
                    transition={{ duration: 0.5, delay: index * 0.05 }}
                  >
                    <ListItem
                      sx={{
                        background: `${nexusColors.secondary.dark}20`,
                        borderRadius: 2,
                        mb: 1,
                        border: `1px solid ${command.executed ? nexusColors.success.main : nexusColors.warning.main}30`
                      }}
                    >
                      <ListItemIcon>
                        <Avatar
                          sx={{
                            width: 32,
                            height: 32,
                            background: command.executed
                              ? nexusColors.success.main
                              : nexusColors.warning.main,
                            fontSize: '0.8rem'
                          }}
                        >
                          {command.executed ? '‚úì' : '‚è≥'}
                        </Avatar>
                      </ListItemIcon>
                      <ListItemText
                        primary={command.phrase}
                        secondary={`${command.timestamp.toLocaleTimeString()} ‚Ä¢ –í–ø–µ–≤–Ω–µ–Ω—ñ—Å—Ç—å: ${command.confidence.toFixed(1)}%`}
                        primaryTypographyProps={{ color: nexusColors.text.primary }}
                        secondaryTypographyProps={{ color: nexusColors.text.secondary }}
                      />
                    </ListItem>
                  </motion.div>
                ))
              )}
            </List>
          </CardContent>
        </Card>
      </motion.div>

      {/* –î—ñ–∞–ª–æ–≥ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å */}
      <Dialog
        open={settingsOpen}
        onClose={() => setSettingsOpen(false)}
        maxWidth="sm"
        fullWidth
        PaperProps={{
          sx: {
            background: `linear-gradient(135deg, ${nexusColors.primary.dark}95, ${nexusColors.secondary.dark}90)`,
            backdropFilter: 'blur(15px)',
            border: `1px solid ${nexusColors.accent.main}30`,
            borderRadius: 3
          }
        }}
      >
        <DialogTitle sx={{ color: nexusColors.text.primary, borderBottom: `1px solid ${nexusColors.accent.main}30` }}>
          üéõÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ì–æ–ª–æ—Å–æ–≤–æ–≥–æ –Ü–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É
        </DialogTitle>
        <DialogContent sx={{ pt: 3 }}>
          <Box sx={{ display: 'flex', flexDirection: 'column', gap: 3 }}>
            <FormControl fullWidth>
              <InputLabel sx={{ color: nexusColors.text.secondary }}>–ú–æ–≤–∞</InputLabel>
              <Select
                value={settings.language}
                onChange={(e) => setSettings(prev => ({ ...prev, language: e.target.value }))}
                sx={{
                  color: nexusColors.text.primary,
                  '& .MuiOutlinedInput-notchedOutline': { borderColor: `${nexusColors.accent.main}50` }
                }}
              >
                <MenuItem value="uk-UA">üá∫üá¶ –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞</MenuItem>
                <MenuItem value="en-US">üá∫üá∏ English</MenuItem>
                <MenuItem value="ru-RU">üá∑üá∫ –†—É—Å—Å–∫–∏–π</MenuItem>
              </Select>
            </FormControl>

            <Box>
              <Typography sx={{ color: nexusColors.text.primary, mb: 2 }}>
                –®–≤–∏–¥–∫—ñ—Å—Ç—å –º–æ–≤–∏: {settings.speed}x
              </Typography>
              <Slider
                value={settings.speed}
                onChange={(_, value) => setSettings(prev => ({ ...prev, speed: value as number }))}
                min={0.5}
                max={2}
                step={0.1}
                sx={{
                  color: nexusColors.accent.main,
                  '& .MuiSlider-thumb': { color: nexusColors.accent.main },
                  '& .MuiSlider-track': { color: nexusColors.accent.main }
                }}
              />
            </Box>

            <Box>
              <Typography sx={{ color: nexusColors.text.primary, mb: 2 }}>
                –í–∏—Å–æ—Ç–∞ –≥–æ–ª–æ—Å—É: {settings.pitch}
              </Typography>
              <Slider
                value={settings.pitch}
                onChange={(_, value) => setSettings(prev => ({ ...prev, pitch: value as number }))}
                min={0.5}
                max={2}
                step={0.1}
                sx={{
                  color: nexusColors.accent.main,
                  '& .MuiSlider-thumb': { color: nexusColors.accent.main },
                  '& .MuiSlider-track': { color: nexusColors.accent.main }
                }}
              />
            </Box>

            <Box>
              <Typography sx={{ color: nexusColors.text.primary, mb: 2 }}>
                –ì—É—á–Ω—ñ—Å—Ç—å: {Math.round(settings.volume * 100)}%
              </Typography>
              <Slider
                value={settings.volume}
                onChange={(_, value) => setSettings(prev => ({ ...prev, volume: value as number }))}
                min={0}
                max={1}
                step={0.1}
                sx={{
                  color: nexusColors.accent.main,
                  '& .MuiSlider-thumb': { color: nexusColors.accent.main },
                  '& .MuiSlider-track': { color: nexusColors.accent.main }
                }}
              />
            </Box>

            <FormControlLabel
              control={
                <Switch
                  checked={settings.autoSpeak}
                  onChange={(e) => setSettings(prev => ({ ...prev, autoSpeak: e.target.checked }))}
                  sx={{
                    '& .MuiSwitch-switchBase.Mui-checked': {
                      color: nexusColors.accent.main,
                    },
                    '& .MuiSwitch-switchBase.Mui-checked + .MuiSwitch-track': {
                      backgroundColor: nexusColors.accent.main,
                    },
                  }}
                />
              }
              label={
                <Typography sx={{ color: nexusColors.text.primary }}>
                  –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –æ–∑–≤—É—á—É–≤–∞—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
                </Typography>
              }
            />

            <FormControlLabel
              control={
                <Switch
                  checked={settings.continuousListening}
                  onChange={(e) => setSettings(prev => ({ ...prev, continuousListening: e.target.checked }))}
                  sx={{
                    '& .MuiSwitch-switchBase.Mui-checked': {
                      color: nexusColors.success.main,
                    },
                    '& .MuiSwitch-switchBase.Mui-checked + .MuiSwitch-track': {
                      backgroundColor: nexusColors.success.main,
                    },
                  }}
                />
              }
              label={
                <Typography sx={{ color: nexusColors.text.primary }}>
                  –ë–µ–∑–ø–µ—Ä–µ—Ä–≤–Ω–µ –ø—Ä–æ—Å–ª—É—Ö–æ–≤—É–≤–∞–Ω–Ω—è
                </Typography>
              }
            />
          </Box>
        </DialogContent>
        <DialogActions sx={{ p: 3, borderTop: `1px solid ${nexusColors.accent.main}30` }}>
          <Button
            onClick={() => setSettingsOpen(false)}
            sx={{ color: nexusColors.text.secondary }}
          >
            –ó–∞–∫—Ä–∏—Ç–∏
          </Button>
          <Button
            variant="contained"
            sx={{
              background: `linear-gradient(45deg, ${nexusColors.accent.main}, ${nexusColors.primary.main})`,
              color: 'white'
            }}
          >
            –ó–±–µ—Ä–µ–≥—Ç–∏
          </Button>
        </DialogActions>
      </Dialog>
    </Box>
  );
};

export default AIVoiceInterface;
