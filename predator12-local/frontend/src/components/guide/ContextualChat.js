import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { useState, useEffect, useCallback, useRef } from 'react';
import { Box, TextField, IconButton, Typography, Paper, Chip, Fade, Switch, FormControlLabel } from '@mui/material';
import { Send as SendIcon, AutoAwesome as AIIcon, Psychology as BrainIcon, Mic, MicOff, VolumeUp, VolumeOff, Close as CloseIcon } from '@mui/icons-material';
import { motion, AnimatePresence } from 'framer-motion';
import { nexusColors } from '../../theme/nexusTheme';
const ContextualChat = ({ systemHealth = 'optimal', agentsData = [], realTimeData, onAction, visible = false, module = 'dashboard', onClose, closable = true }) => {
    const [messages, setMessages] = useState([]);
    const [input, setInput] = useState('');
    const [isThinking, setIsThinking] = useState(false);
    const [proactiveMode, setProactiveMode] = useState(true);
    const [voiceSettings, setVoiceSettings] = useState({
        enabled: true,
        recognition: true,
        synthesis: true,
        language: 'uk-UA',
        voice: 'uk-UA-Standard-A',
        rate: 1.0,
        pitch: 1.0,
        volume: 0.8
    });
    const [isListening, setIsListening] = useState(false);
    const [isSpeaking, setIsSpeaking] = useState(false);
    const [currentEmotion, setCurrentEmotion] = useState('neutral');
    const [show3DAvatar, setShow3DAvatar] = useState(true);
    const [avatarQuality, setAvatarQuality] = useState('medium');
    const [autoCloseTimer, setAutoCloseTimer] = useState(null);
    const messagesRef = useRef(null);
    const chatContainerRef = useRef(null);
    const recognitionRef = useRef(null);
    const synthesizerRef = useRef(null);
    const currentSpeechRef = useRef('');
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ API
    useEffect(() => {
        if ('webkitSpeechRecognition' in window || 'SpeechRecognition' in window) {
            const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
            const recognition = new SpeechRecognition();
            recognition.continuous = false;
            recognition.interimResults = false;
            recognition.lang = voiceSettings.language;
            recognition.onstart = () => setIsListening(true);
            recognition.onend = () => setIsListening(false);
            recognition.onerror = (event) => {
                console.error('Speech recognition error:', event.error);
                setIsListening(false);
            };
            recognition.onresult = (event) => {
                const transcript = event.results[0][0].transcript;
                setInput(transcript);
                handleSendMessage(transcript);
            };
            recognitionRef.current = recognition;
        }
        if ('speechSynthesis' in window) {
            synthesizerRef.current = window.speechSynthesis;
        }
    }, [voiceSettings.language]);
    // –ê–≤—Ç–æ–∑–∞–∫—Ä–∏—Ç—Ç—è —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥ –±–µ–∑–¥—ñ—è–ª—å–Ω–æ—Å—Ç—ñ
    useEffect(() => {
        if (!visible || !closable || !onClose)
            return;
        const resetTimer = () => {
            if (autoCloseTimer) {
                clearTimeout(autoCloseTimer);
            }
            const newTimer = setTimeout(() => {
                onClose();
            }, 60000); // 60 —Å–µ–∫—É–Ω–¥ –¥–ª—è –±—ñ–ª—å—à–æ–≥–æ –∫–æ–º—Ñ–æ—Ä—Ç—É
            setAutoCloseTimer(newTimer);
        };
        resetTimer();
        // –°–∫–∏–¥–∞—î–º–æ —Ç–∞–π–º–µ—Ä –ø—Ä–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
        const activityEvents = ['mouseenter', 'click', 'keydown', 'scroll'];
        const resetOnActivity = () => resetTimer();
        activityEvents.forEach(event => {
            chatContainerRef.current?.addEventListener(event, resetOnActivity);
        });
        return () => {
            if (autoCloseTimer) {
                clearTimeout(autoCloseTimer);
            }
            activityEvents.forEach(event => {
                chatContainerRef.current?.removeEventListener(event, resetOnActivity);
            });
        };
    }, [visible, closable, onClose, autoCloseTimer]);
    // –ó–∞–∫—Ä–∏—Ç—Ç—è –ø—Ä–∏ –∫–ª—ñ–∫—É –ø–æ–∑–∞ —á–∞—Ç–æ–º
    useEffect(() => {
        if (!visible || !closable || !onClose)
            return;
        const handleClickOutside = (event) => {
            if (chatContainerRef.current && !chatContainerRef.current.contains(event.target)) {
                onClose();
            }
        };
        document.addEventListener('mousedown', handleClickOutside);
        return () => {
            document.removeEventListener('mousedown', handleClickOutside);
        };
    }, [visible, closable, onClose]);
    // –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –º–æ–¥—É–ª–µ–π
    const getModuleContext = useCallback(() => {
        const contexts = {
            dashboard: {
                hints: ['—Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º–∏', '–∑–∞–≥–∞–ª—å–Ω–∏–π –æ–≥–ª—è–¥', '–∫–ª—é—á–æ–≤—ñ –º–µ—Ç—Ä–∏–∫–∏', '–æ—Å—Ç–∞–Ω–Ω—ñ –ø–æ–¥—ñ—ó'],
                greeting: '–í—ñ—Ç–∞—é –Ω–∞ –≥–æ–ª–æ–≤–Ω—ñ–π –ø–∞–Ω–µ–ª—ñ! –ú–æ–∂—É –ø–æ–∫–∞–∑–∞—Ç–∏ –∑–∞–≥–∞–ª—å–Ω–∏–π —Å—Ç–∞–Ω —Å–∏—Å—Ç–µ–º–∏ –∞–±–æ –¥–æ–ø–æ–º–æ–≥—Ç–∏ –∑ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—î—é.',
                emotion: 'neutral'
            },
            etl: {
                hints: ['–ø—Ä–æ—Ü–µ—Å–∏ ETL', '—Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü—ñ—è –¥–∞–Ω–∏—Ö', '–¥–∂–µ—Ä–µ–ª–∞ –¥–∞–Ω–∏—Ö', '–ø–æ–º–∏–ª–∫–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è'],
                greeting: '–£ –º–æ–¥—É–ª—ñ ETL –º–æ–∂—É –¥–æ–ø–æ–º–æ–≥—Ç–∏ –∑ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è–º –∫–æ–Ω–≤–µ—î—Ä—ñ–≤ –¥–∞–Ω–∏—Ö —Ç–∞ –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–æ—é –ø—Ä–æ—Ü–µ—Å—ñ–≤.',
                emotion: 'focused'
            },
            agents: {
                hints: ['—Å—Ç–∞—Ç—É—Å –∞–≥–µ–Ω—Ç—ñ–≤', 'MAS —Å–∏—Å—Ç–µ–º–∞', '–ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å', '–ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∞–≥–µ–Ω—Ç—ñ–≤'],
                greeting: '–ú–æ–Ω—ñ—Ç–æ—Ä—é —Å—Ç–∞–Ω —É—Å—ñ—Ö –∞–≥–µ–Ω—Ç—ñ–≤ MAS. –ú–æ–∂—É –Ω–∞–¥–∞—Ç–∏ –¥–µ—Ç–∞–ª—å–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —ó—Ö —Ä–æ–±–æ—Ç—É.',
                emotion: 'alert'
            },
            security: {
                hints: ['–∑–∞–≥—Ä–æ–∑–∏ –±–µ–∑–ø–µ–∫–∏', '–∂—É—Ä–Ω–∞–ª–∏ –¥–æ—Å—Ç—É–ø—É', '—Å–µ—Ä—Ç–∏—Ñ—ñ–∫–∞—Ç–∏', '–∞—É–¥–∏—Ç —Å–∏—Å—Ç–µ–º–∏'],
                greeting: '–ú–æ–¥—É–ª—å –±–µ–∑–ø–µ–∫–∏ –ø—ñ–¥ –º–æ—ó–º –∫–æ–Ω—Ç—Ä–æ–ª–µ–º. –ü–æ–≤—ñ–¥–æ–º–ª—é –ø—Ä–æ –±—É–¥—å-—è–∫—ñ –ø—ñ–¥–æ–∑—Ä—ñ–ª—ñ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ.',
                emotion: 'concerned'
            },
            analytics: {
                hints: ['–∞–Ω–∞–ª—ñ–∑ –¥–∞–Ω–∏—Ö', '–∑–≤—ñ—Ç–∏', '—Ç—Ä–µ–Ω–¥–∏', '–ø—Ä–æ–≥–Ω–æ–∑–∏'],
                greeting: '–í –∞–Ω–∞–ª—ñ—Ç–∏—á–Ω–æ–º—É –º–æ–¥—É–ª—ñ –º–æ–∂—É –ø–æ—è—Å–Ω–∏—Ç–∏ –¥–∞–Ω—ñ —Ç–∞ –¥–æ–ø–æ–º–æ–≥—Ç–∏ –∑ —ñ–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü—ñ—î—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤.',
                emotion: 'focused'
            },
            settings: {
                hints: ['–∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è', '–ø–∞—Ä–∞–º–µ—Ç—Ä–∏ —Å–∏—Å—Ç–µ–º–∏', '–∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ü—å–∫—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è', '—ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—ó'],
                greeting: '–î–æ–ø–æ–º–æ–∂—É –∑ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è–º–∏ —Å–∏—Å—Ç–µ–º–∏. –ü–∏—Ç–∞–π—Ç–µ –ø—Ä–æ –±—É–¥—å-—è–∫—ñ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó.',
                emotion: 'neutral'
            }
        };
        return contexts[module] || contexts.dashboard;
    }, [module]);
    // –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –ø—Ä–æ–∞–∫—Ç–∏–≤–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º –∫–æ–Ω—Ç–µ–∫—Å—Ç—É –º–æ–¥—É–ª—è
    const generateContextualInsight = useCallback(() => {
        const moduleContext = getModuleContext();
        const insights = [];
        // –ó–∞–≥–∞–ª—å–Ω—ñ —ñ–Ω—Å–∞–π—Ç–∏ —Å–∏—Å—Ç–µ–º–∏
        if (systemHealth === 'critical') {
            insights.push('üö® –ö–†–ò–¢–ò–ß–ù–û! –°–∏—Å—Ç–µ–º–∞ –ø–æ—Ç—Ä–µ–±—É—î –Ω–µ–≥–∞–π–Ω–æ–≥–æ –≤—Ç—Ä—É—á–∞–Ω–Ω—è. –†–µ–∫–æ–º–µ–Ω–¥—É—é –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –ª–æ–≥–∏ —Ç–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–∏ –ø—Ä–æ–±–ª–µ–º–Ω—ñ —Å–µ—Ä–≤—ñ—Å–∏.');
            setCurrentEmotion('alert');
        }
        else if (systemHealth === 'warning') {
            insights.push('‚ö†Ô∏è –°–∏—Å—Ç–µ–º–∞ –ø—Ä–∞—Ü—é—î –∑ –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è–º–∏. –í–∞—Ä—Ç–æ –ø—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–≤–∞—Ç–∏ –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ —Ç–∞ –≤–∏–ø—Ä–∞–≤–∏—Ç–∏ –ø–æ–º–∏–ª–∫–∏.');
            setCurrentEmotion('concerned');
        }
        // –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ñ —ñ–Ω—Å–∞–π—Ç–∏ –≤ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –≤—ñ–¥ –º–æ–¥—É–ª—è
        switch (module) {
            case 'etl':
                const etlIssues = agentsData.filter(a => a.type === 'etl' && a.status !== 'active');
                if (etlIssues.length > 0) {
                    insights.push(`üìä –í–∏—è–≤–ª–µ–Ω–æ ${etlIssues.length} –ø—Ä–æ–±–ª–µ–º —É ETL-–ø—Ä–æ—Ü–µ—Å–∞—Ö. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ –¥–∂–µ—Ä–µ–ª–∞–º–∏ –¥–∞–Ω–∏—Ö.`);
                }
                break;
            case 'agents':
                const inactiveAgents = agentsData.filter(a => a.status !== 'active');
                if (inactiveAgents.length > 0) {
                    insights.push(`ü§ñ ${inactiveAgents.length} –∞–≥–µ–Ω—Ç${inactiveAgents.length > 1 ? '–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ñ' : ' –Ω–µ–∞–∫—Ç–∏–≤–Ω–∏–π'}. –ú–æ–∂–ª–∏–≤–æ, –ø–æ—Ç—Ä—ñ–±–µ–Ω –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫.`);
                }
                const highCpuAgents = agentsData.filter(a => parseInt(a.cpu?.replace('%', '') || '0') > 80);
                if (highCpuAgents.length >= 2) {
                    insights.push(`üíª –í–∏—Å–æ–∫–µ –Ω–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è CPU —É ${highCpuAgents.length} –∞–≥–µ–Ω—Ç—ñ–≤. –†–æ–∑–≥–ª—è–Ω—å—Ç–µ –º–∞—Å—à—Ç–∞–±—É–≤–∞–Ω–Ω—è.`);
                }
                break;
            case 'security':
                insights.push('üîí –°–∫–∞–Ω—É—é —Å–∏—Å—Ç–µ–º—É –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –∑–∞–≥—Ä–æ–∑... –†—ñ–≤–µ–Ω—å –±–µ–∑–ø–µ–∫–∏: –í–ò–°–û–ö–ò–ô. –û—Å—Ç–∞–Ω–Ω—ñ 24 –≥–æ–¥–∏–Ω–∏ –±–µ–∑ —ñ–Ω—Ü–∏–¥–µ–Ω—Ç—ñ–≤.');
                break;
            case 'analytics':
                insights.push('üìà –ê–Ω–∞–ª—ñ–∑—É—é —Ç—Ä–µ–Ω–¥–∏ –¥–∞–Ω–∏—Ö... –í–∏—è–≤–ª–µ–Ω–æ —Ü—ñ–∫–∞–≤—ñ –∑–∞–∫–æ–Ω–æ–º—ñ—Ä–Ω–æ—Å—Ç—ñ –≤ –æ—Å—Ç–∞–Ω–Ω—ñ—Ö –º–µ—Ç—Ä–∏–∫–∞—Ö.');
                setCurrentEmotion('focused');
                break;
        }
        // –ü–æ–∑–∏—Ç–∏–≤–Ω—ñ —ñ–Ω—Å–∞–π—Ç–∏
        if (systemHealth === 'optimal' && agentsData.every(a => a.status === 'active')) {
            const positiveMessages = [
                '‚ú® –í—Å—ñ —Å–∏—Å—Ç–µ–º–∏ –ø—Ä–∞—Ü—é—é—Ç—å —ñ–¥–µ–∞–ª—å–Ω–æ! –¶–µ —á—É–¥–æ–≤–∏–π —á–∞—Å –¥–ª—è –∑–∞–ø—É—Å–∫—É –Ω–æ–≤–∏—Ö –µ–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç—ñ–≤.',
                'üéØ –°—Ç–∞–±—ñ–ª—å–Ω–∞ —Ä–æ–±–æ—Ç–∞ –≤—Å—ñ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ–≤. –ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –Ω–∞ –º–∞–∫—Å–∏–º—É–º—ñ!',
                'üåü –û–ø—Ç–∏–º–∞–ª—å–Ω—ñ –ø–æ–∫–∞–∑–Ω–∏–∫–∏! –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –¥–æ –æ–±—Ä–æ–±–∫–∏ —Å–∫–ª–∞–¥–Ω–∏—Ö –∑–∞–≤–¥–∞–Ω—å.',
                'üöÄ –ü–µ—Ä—Ñ–µ–∫—Ç–Ω—ñ –º–µ—Ç—Ä–∏–∫–∏! –ú–æ–∂–Ω–∞ –≤–ø—Ä–æ–≤–∞–¥–∂—É–≤–∞—Ç–∏ –Ω–æ–≤—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –±–µ–∑ —Ä–∏–∑–∏–∫—ñ–≤.'
            ];
            insights.push(positiveMessages[Math.floor(Math.random() * positiveMessages.length)]);
            setCurrentEmotion('happy');
        }
        return insights[Math.floor(Math.random() * insights.length)] ||
            `${moduleContext.greeting} –°–∏—Å—Ç–µ–º–∞ –ø—Ä–∞—Ü—é—î —à—Ç–∞—Ç–Ω–æ. –ß–∏–º –º–æ–∂—É –¥–æ–ø–æ–º–æ–≥—Ç–∏?`;
    }, [systemHealth, agentsData, module, getModuleContext]);
    // –†–æ–∑—à–∏—Ä–µ–Ω–∞ AI-–≤—ñ–¥–ø–æ–≤—ñ–¥—å –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º –∫–æ–Ω—Ç–µ–∫—Å—Ç—É –º–æ–¥—É–ª—è
    const generateAIResponse = async (userInput) => {
        setIsThinking(true);
        setCurrentEmotion('focused');
        await new Promise(resolve => setTimeout(resolve, 800 + Math.random() * 1200));
        const lowercaseInput = userInput.toLowerCase();
        let response = '';
        let messageType = 'response';
        let actions = [];
        let emotion = 'neutral';
        // –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º –ø–æ—Ç–æ—á–Ω–æ–≥–æ –º–æ–¥—É–ª—è
        const moduleContext = getModuleContext();
        if (lowercaseInput.includes('—Å—Ç–∞—Ç—É—Å') || lowercaseInput.includes('—Å—Ç–∞–Ω')) {
            response = `üìä –ü–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞–Ω –º–æ–¥—É–ª—è ${module.toUpperCase()}: ${systemHealth}. –ê–∫—Ç–∏–≤–Ω–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ–≤: ${agentsData.length}. ${systemHealth !== 'optimal' ? '–í–∏—è–≤–ª–µ–Ω–æ –ø—Ä–æ–±–ª–µ–º–∏, —Ä–µ–∫–æ–º–µ–Ω–¥—É—é –¥–µ—Ç–∞–ª—å–Ω—ñ—à—É –ø–µ—Ä–µ–≤—ñ—Ä–∫—É.' : '–í—Å–µ –ø—Ä–∞—Ü—é—î –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ!'}`;
            emotion = systemHealth === 'optimal' ? 'happy' : 'concerned';
            actions = [
                { label: '–î–µ—Ç–∞–ª—å–Ω–∞ –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞', action: 'run-diagnostics' },
                { label: '–ü–æ–∫–∞–∑–∞—Ç–∏ –ª–æ–≥–∏', action: 'show-logs' },
                { label: '–ï–∫—Å–ø–æ—Ä—Ç –∑–≤—ñ—Ç—É', action: 'export-report' }
            ];
        }
        else if (lowercaseInput.includes('–∞–≥–µ–Ω—Ç') || lowercaseInput.includes('mas')) {
            const activeAgents = agentsData.filter(a => a.status === 'active').length;
            const avgCpu = Math.round(agentsData.reduce((acc, a) => acc + parseInt(a.cpu?.replace('%', '') || '0'), 0) / agentsData.length);
            response = `ü§ñ MAS —Å–∏—Å—Ç–µ–º–∞: ${activeAgents}/${agentsData.length} –∞–∫—Ç–∏–≤–Ω–∏—Ö –∞–≥–µ–Ω—Ç—ñ–≤. –°–µ—Ä–µ–¥–Ω—î –Ω–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è CPU: ${avgCpu}%. ${avgCpu > 70 ? '–†–µ–∫–æ–º–µ–Ω–¥—É—é –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—é.' : '–ù–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≤ –Ω–æ—Ä–º—ñ.'}`;
            emotion = avgCpu > 70 ? 'concerned' : 'happy';
            actions = [
                { label: '–û–ø—Ç–∏–º—ñ–∑—É–≤–∞—Ç–∏ –Ω–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è', action: 'optimize-agents' },
                { label: '–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ø—Ä–æ–±–ª–µ–º–Ω–∏—Ö', action: 'restart-unhealthy' },
                { label: '–ú–∞—Å—à—Ç–∞–±—É–≤–∞–Ω–Ω—è', action: 'scale-agents' }
            ];
        }
        else if (lowercaseInput.includes('–±–µ–∑–ø–µ–∫') || lowercaseInput.includes('—Ä–∏–∑–∏–∫')) {
            response = 'üîí –ê–Ω–∞–ª—ñ–∑ –±–µ–∑–ø–µ–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: —Ä—ñ–≤–µ–Ω—å –∑–∞–≥—Ä–æ–∑–∏ –ú–Ü–ù–Ü–ú–ê–õ–¨–ù–ò–ô. –û—Å—Ç–∞–Ω–Ω—ñ 24 –≥–æ–¥–∏–Ω–∏ –±–µ–∑ –∫—Ä–∏—Ç–∏—á–Ω–∏—Ö —ñ–Ω—Ü–∏–¥–µ–Ω—Ç—ñ–≤. –í–∏—è–≤–ª–µ–Ω–æ: —Å–µ—Ä—Ç–∏—Ñ—ñ–∫–∞—Ç–∏, —â–æ –∑–∞–∫—ñ–Ω—á—É—é—Ç—å—Å—è —á–µ—Ä–µ–∑ 30 –¥–Ω—ñ–≤ - —Ä–µ–∫–æ–º–µ–Ω–¥—É—é –æ–Ω–æ–≤–ª–µ–Ω–Ω—è.';
            emotion = 'focused';
            actions = [
                { label: '–û–Ω–æ–≤–∏—Ç–∏ —Å–µ—Ä—Ç–∏—Ñ—ñ–∫–∞—Ç–∏', action: 'renew-certificates' },
                { label: '–ü–æ–≤–Ω–∏–π –∞—É–¥–∏—Ç –±–µ–∑–ø–µ–∫–∏', action: 'security-audit' },
                { label: '–ñ—É—Ä–Ω–∞–ª –ø–æ–¥—ñ–π', action: 'security-logs' }
            ];
        }
        else if (lowercaseInput.includes('–æ–ø—Ç–∏–º—ñ–∑–∞—Ü') || lowercaseInput.includes('–ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω')) {
            response = '‚ö° –ù–∞ –æ—Å–Ω–æ–≤—ñ –∞–Ω–∞–ª—ñ–∑—É –º–µ—Ç—Ä–∏–∫ —Ä–µ–∫–æ–º–µ–Ω–¥—É—é: 1) –ó–±—ñ–ª—å—à–∏—Ç–∏ –ø—É–ª –∑\'—î–¥–Ω–∞–Ω—å –¥–æ –ë–î –Ω–∞ 25%, 2) –£–≤—ñ–º–∫–Ω—É—Ç–∏ –∫–µ—à—É–≤–∞–Ω–Ω—è –∑–∞–ø–∏—Ç—ñ–≤, 3) –†–æ–∑–≥–ª—è–Ω—É—Ç–∏ –ø–∞—Ä—Ç–∏—Ü—ñ–æ–Ω—É–≤–∞–Ω–Ω—è –≤–µ–ª–∏–∫–∏—Ö —Ç–∞–±–ª–∏—Ü—å, 4) –û–ø—Ç–∏–º—ñ–∑—É–≤–∞—Ç–∏ —ñ–Ω–¥–µ–∫—Å–∏. –û—á—ñ–∫—É–≤–∞–Ω–µ –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è: 30-40%.';
            messageType = 'insight';
            emotion = 'focused';
            actions = [
                { label: '–ó–∞—Å—Ç–æ—Å—É–≤–∞—Ç–∏ –≤—Å—ñ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó', action: 'apply-all-optimizations' },
                { label: '–ü–æ–µ—Ç–∞–ø–Ω–µ –≤–ø—Ä–æ–≤–∞–¥–∂–µ–Ω–Ω—è', action: 'step-by-step-optimization' },
                { label: '–¢–µ—Å—Ç—É–≤–∞—Ç–∏ –Ω–∞ dev', action: 'test-optimizations' }
            ];
        }
        else if (lowercaseInput.includes('–ø–æ–º–∏–ª–∫') || lowercaseInput.includes('–∞–Ω–æ–º–∞–ª')) {
            response = 'üîç –ì–ª–∏–±–æ–∫–∏–π –∞–Ω–∞–ª—ñ–∑ –≤–∏—è–≤–∏–≤: 3 –Ω–µ–∑–Ω–∞—á–Ω—ñ –∞–Ω–æ–º–∞–ª—ñ—ó –≤ —ñ–Ω–¥–µ–∫—Å–∞—Ü—ñ—ó, 1 —Ç–∏–º—á–∞—Å–æ–≤–µ —É–ø–æ–≤—ñ–ª—å–Ω–µ–Ω–Ω—è ETL, 2 –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è –±–µ–∑–ø–µ–∫–∏ (–Ω–µ –∫—Ä–∏—Ç–∏—á–Ω—ñ). –†–µ–∫–æ–º–µ–Ω–¥—É—é: –æ—á–∏—Å—Ç–∏—Ç–∏ –∫–µ—à —ñ–Ω–¥–µ–∫—Å–∞—Ü—ñ—ó, –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —á–µ—Ä–≥–∏ ETL, –æ–Ω–æ–≤–∏—Ç–∏ –ø—Ä–∞–≤–∏–ª–∞ –±–µ–∑–ø–µ–∫–∏.';
            messageType = 'insight';
            emotion = 'concerned';
            actions = [
                { label: '–í–∏–ø—Ä–∞–≤–∏—Ç–∏ –∞–Ω–æ–º–∞–ª—ñ—ó', action: 'fix-anomalies' },
                { label: '–î–µ—Ç–∞–ª—å–Ω–∏–π –∑–≤—ñ—Ç', action: 'anomaly-report' },
                { label: '–ù–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ –∞–ª–µ—Ä—Ç–∏', action: 'setup-alerts' }
            ];
        }
        else {
            // –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ –º–æ–¥—É–ª—è
            const contextualResponses = {
                dashboard: `–†–æ–∑—É–º—ñ—é –≤–∞—à –∑–∞–ø–∏—Ç –ø—Ä–æ "${userInput}". –ù–∞ –¥–∞—à–±–æ—Ä–¥—ñ –±–∞—á—É –∑–∞–≥–∞–ª—å–Ω–∏–π —Å—Ç–∞–Ω: ${systemHealth}. –ú–æ–∂—É –¥–µ—Ç–∞–ª—å–Ω—ñ—à–µ —Ä–æ–∑–ø–æ–≤—ñ—Å—Ç–∏ –ø—Ä–æ –±—É–¥—å-—è–∫–∏–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —Å–∏—Å—Ç–µ–º–∏.`,
                etl: `–©–æ–¥–æ "${userInput}" –≤ ETL-–º–æ–¥—É–ª—ñ: –≤—Å—ñ –∫–æ–Ω–≤–µ—î—Ä–∏ –¥–∞–Ω–∏—Ö –ø—Ä–∞—Ü—é—é—Ç—å, –æ—Å—Ç–∞–Ω–Ω—î –æ–Ω–æ–≤–ª–µ–Ω–Ω—è 15 —Ö–≤–∏–ª–∏–Ω —Ç–æ–º—É. –ß–∏ –ø–æ—Ç—Ä—ñ–±–Ω–∞ –¥–æ–ø–æ–º–æ–≥–∞ –∑ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è–º?`,
                agents: `–ü—Ä–æ "${userInput}" –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç—ñ –∞–≥–µ–Ω—Ç—ñ–≤: –∑–∞—Ä–∞–∑ –∞–∫—Ç–∏–≤–Ω–æ ${agentsData.filter(a => a.status === 'active').length} –∞–≥–µ–Ω—Ç—ñ–≤ –∑ ${agentsData.length}. –ß–∏ —Ü—ñ–∫–∞–≤–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏–π –∞–≥–µ–Ω—Ç?`,
                security: `–°—Ç–æ—Å–æ–≤–Ω–æ "${userInput}" —Ç–∞ –±–µ–∑–ø–µ–∫–∏: –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–Ω–∏–π, –∑–∞–≥—Ä–æ–∑ –Ω–µ –≤–∏—è–≤–ª–µ–Ω–æ. –ü–æ—Ç—Ä—ñ–±–Ω–∞ –¥–æ–ø–æ–º–æ–≥–∞ –∑ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è–º–∏ –∑–∞—Ö–∏—Å—Ç—É?`,
                analytics: `–©–æ–¥–æ "${userInput}" –≤ –∞–Ω–∞–ª—ñ—Ç–∏—Ü—ñ: –¥–∞–Ω—ñ –æ–±—Ä–æ–±–ª—é—é—Ç—å—Å—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º—É —á–∞—Å—ñ. –ú–æ–∂—É —Å—Ç–≤–æ—Ä–∏—Ç–∏ –∫–∞—Å—Ç–æ–º–Ω–∏–π –∑–≤—ñ—Ç –∞–±–æ –ø–æ—è—Å–Ω–∏—Ç–∏ —ñ—Å–Ω—É—é—á—ñ –º–µ—Ç—Ä–∏–∫–∏.`,
                settings: `–ü—Ä–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è "${userInput}": –º–æ–∂—É –¥–æ–ø–æ–º–æ–≥—Ç–∏ –∑ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—î—é –±—É–¥—å-—è–∫–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ —Å–∏—Å—Ç–µ–º–∏. –©–æ —Å–∞–º–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–º—ñ–Ω–∏—Ç–∏?`
            };
            response = contextualResponses[module];
            emotion = 'neutral';
            actions = [
                { label: '–î–æ–∫–ª–∞–¥–Ω—ñ—à–µ –ø—Ä–æ –º–æ–¥—É–ª—å', action: `explain-${module}` },
                { label: '–ü–æ–∫–∞–∑–∞—Ç–∏ –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ', action: 'show-capabilities' },
                { label: '–®–≤–∏–¥–∫–∏–π —Ç—É—Ä', action: 'quick-tour' }
            ];
        }
        setIsThinking(false);
        setCurrentEmotion(emotion);
        return {
            id: Date.now().toString(),
            text: response,
            type: messageType,
            context: { systemHealth, agentsCount: agentsData.length, userQuery: userInput, module },
            actions,
            emotion,
            timestamp: new Date()
        };
    };
    // –ì–æ–ª–æ—Å–æ–≤–æ–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ
    const startListening = () => {
        if (recognitionRef.current && voiceSettings.recognition) {
            recognitionRef.current.start();
        }
    };
    const stopListening = () => {
        if (recognitionRef.current) {
            recognitionRef.current.stop();
        }
    };
    // –°–∏–Ω—Ç–µ–∑ —Ä–µ—á–∏
    const speakText = (text) => {
        if (!synthesizerRef.current || !voiceSettings.synthesis)
            return;
        // –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç HTML –∏ —ç–º–æ–¥–∑–∏ –¥–ª—è –ª—É—á—à–µ–≥–æ –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏—è
        const cleanText = text.replace(/[üö®‚ö†Ô∏èüìäü§ñüíªüîíüìà‚ú®üéØüåüüöÄ‚ö°üîç]/g, '').trim();
        const utterance = new SpeechSynthesisUtterance(cleanText);
        utterance.lang = voiceSettings.language;
        utterance.rate = voiceSettings.rate;
        utterance.pitch = voiceSettings.pitch;
        utterance.volume = voiceSettings.volume;
        utterance.onstart = () => {
            setIsSpeaking(true);
            currentSpeechRef.current = cleanText;
        };
        utterance.onend = () => {
            setIsSpeaking(false);
            currentSpeechRef.current = '';
        };
        utterance.onerror = () => {
            setIsSpeaking(false);
            currentSpeechRef.current = '';
        };
        synthesizerRef.current.speak(utterance);
    };
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
    const handleSendMessage = async (messageText) => {
        const text = messageText || input.trim();
        if (!text)
            return;
        const userMessage = {
            id: `user-${Date.now()}`,
            text,
            type: 'user',
            timestamp: new Date()
        };
        setMessages(prev => [...prev, userMessage]);
        setInput('');
        try {
            const aiResponse = await generateAIResponse(text);
            setMessages(prev => [...prev, aiResponse]);
            // –û–∑–≤—É—á–∏–≤–∞–µ–º –æ—Ç–≤–µ—Ç
            if (voiceSettings.synthesis && voiceSettings.enabled) {
                speakText(aiResponse.text);
            }
        }
        catch (error) {
            console.error('–û—à–∏–±–∫–∞ AI –æ—Ç–≤–µ—Ç–∞:', error);
            const errorMessage = {
                id: `error-${Date.now()}`,
                text: '–í–∏–±–∞—á—Ç–µ, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –∑–∞–ø–∏—Ç—É. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –ø–µ—Ä–µ—Ñ—Ä–∞–∑—É–π—Ç–µ –ø–∏—Ç–∞–Ω–Ω—è.',
                type: 'warning',
                emotion: 'concerned',
                timestamp: new Date()
            };
            setMessages(prev => [...prev, errorMessage]);
        }
    };
    // –ü—Ä–æ–∞–∫—Ç–∏–≤–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —É—á–µ—Ç–æ–º –º–æ–¥—É–ª—è
    useEffect(() => {
        if (!proactiveMode || !visible)
            return;
        const proactiveTimer = setTimeout(() => {
            const insight = generateContextualInsight();
            const proactiveMessage = {
                id: `proactive-${Date.now()}`,
                text: insight,
                type: 'proactive',
                emotion: currentEmotion,
                timestamp: new Date()
            };
            setMessages(prev => [...prev.slice(-4), proactiveMessage]);
            // –û–∑–≤—É—á–∏–≤–∞–µ–º –ø—Ä–æ–∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            if (voiceSettings.synthesis && voiceSettings.enabled && proactiveMode) {
                speakText(insight);
            }
        }, 15000 + Math.random() * 25000); // 15-40 —Å–µ–∫—É–Ω–¥
        return () => clearTimeout(proactiveTimer);
    }, [generateContextualInsight, proactiveMode, visible, systemHealth, agentsData, currentEmotion, voiceSettings]);
    // –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –ø—Ä–∏ —Å–º–µ–Ω–µ –º–æ–¥—É–ª—è
    useEffect(() => {
        const moduleContext = getModuleContext();
        setCurrentEmotion(moduleContext.emotion);
        if (visible && messages.length === 0) {
            const welcomeMessage = {
                id: `welcome-${Date.now()}`,
                text: moduleContext.greeting,
                type: 'proactive',
                emotion: moduleContext.emotion,
                timestamp: new Date()
            };
            setMessages([welcomeMessage]);
            if (voiceSettings.synthesis && voiceSettings.enabled) {
                setTimeout(() => speakText(moduleContext.greeting), 1000);
            }
        }
    }, [module, visible, getModuleContext]);
    const getMessageColor = (type) => {
        switch (type) {
            case 'proactive': return nexusColors.emerald;
            case 'insight': return nexusColors.amethyst;
            case 'warning': return nexusColors.warning;
            case 'user': return nexusColors.sapphire;
            default: return nexusColors.frost;
        }
    };
    // –ê–≤—Ç–æ—Å–∫—Ä–æ–ª
    useEffect(() => {
        if (messagesRef.current) {
            messagesRef.current.scrollTop = messagesRef.current.scrollHeight;
        }
    }, [messages]);
    if (!visible)
        return null;
    const moduleContext = getModuleContext();
    return (_jsx(Fade, { in: visible, children: _jsxs(Box, { ref: chatContainerRef, sx: {
                position: 'absolute',
                left: 20,
                top: 20,
                width: show3DAvatar ? 500 : 420,
                height: show3DAvatar ? 720 : 500,
                zIndex: 20,
                background: `linear-gradient(135deg, ${nexusColors.obsidian}E8, ${nexusColors.darkMatter}D0)`,
                border: `2px solid ${nexusColors.quantum}`,
                borderRadius: 3,
                backdropFilter: 'blur(20px)',
                display: 'flex',
                flexDirection: 'column',
                overflow: 'hidden'
            }, children: [show3DAvatar && (_jsx(Box, { sx: { height: 300, borderBottom: `1px solid ${nexusColors.quantum}` }, children: _jsx(Avatar3D, { isVisible: show3DAvatar, isSpeaking: isSpeaking, emotion: currentEmotion, speech: currentSpeechRef.current, quality: avatarQuality, enableLipSync: true, enableGestures: true }) })), _jsxs(Box, { sx: {
                        p: 2,
                        borderBottom: `1px solid ${nexusColors.quantum}`,
                        background: `linear-gradient(90deg, ${nexusColors.obsidian}, ${nexusColors.darkMatter})`
                    }, children: [_jsxs(Box, { sx: { display: 'flex', alignItems: 'center', mb: 1 }, children: [_jsx(BrainIcon, { sx: { color: nexusColors.amethyst, mr: 1 } }), _jsxs(Typography, { variant: "h6", sx: { color: nexusColors.frost, fontFamily: 'Orbitron' }, children: ["AI \u0413\u0456\u0434 \u2022 ", module.toUpperCase()] }), _jsx(Chip, { label: proactiveMode ? '–ê–∫—Ç–∏–≤–Ω–∏–π' : '–ü–∞—Å–∏–≤–Ω–∏–π', size: "small", onClick: () => setProactiveMode(!proactiveMode), sx: {
                                        ml: 'auto',
                                        backgroundColor: proactiveMode ? `${nexusColors.success}20` : `${nexusColors.shadow}20`,
                                        color: proactiveMode ? nexusColors.success : nexusColors.shadow,
                                        cursor: 'pointer'
                                    } }), closable && (_jsx(IconButton, { "aria-label": "\u0417\u0430\u043A\u0440\u0438\u0442\u0438 \u0447\u0430\u0442", onClick: () => onClose?.(), size: "small", sx: { ml: 1, color: nexusColors.nebula, '&:hover': { color: nexusColors.frost } }, children: _jsx(CloseIcon, { fontSize: "small" }) }))] }), _jsxs(Box, { sx: { display: 'flex', gap: 1, alignItems: 'center' }, children: [_jsx(FormControlLabel, { control: _jsx(Switch, { checked: show3DAvatar, onChange: (e) => setShow3DAvatar(e.target.checked), size: "small" }), label: "3D", sx: { color: nexusColors.nebula, fontSize: '0.7rem' } }), _jsx(IconButton, { size: "small", onClick: () => setVoiceSettings(prev => ({ ...prev, enabled: !prev.enabled })), sx: { color: voiceSettings.enabled ? nexusColors.success : nexusColors.shadow }, children: voiceSettings.enabled ? _jsx(VolumeUp, { fontSize: "small" }) : _jsx(VolumeOff, { fontSize: "small" }) }), _jsx(IconButton, { size: "small", onClick: isListening ? stopListening : startListening, disabled: !voiceSettings.recognition, sx: {
                                        color: isListening ? nexusColors.warning : nexusColors.sapphire,
                                        backgroundColor: isListening ? `${nexusColors.warning}20` : 'transparent'
                                    }, children: isListening ? _jsx(MicOff, { fontSize: "small" }) : _jsx(Mic, { fontSize: "small" }) })] })] }), _jsxs(Box, { ref: messagesRef, sx: {
                        flex: 1,
                        p: 1.5,
                        overflowY: 'auto',
                        '&::-webkit-scrollbar': { width: '4px' },
                        '&::-webkit-scrollbar-thumb': { background: nexusColors.emerald, borderRadius: '2px' }
                    }, children: [_jsx(AnimatePresence, { children: messages.map((msg) => (_jsx(motion.div, { initial: { opacity: 0, y: 15, scale: 0.95 }, animate: { opacity: 1, y: 0, scale: 1 }, exit: { opacity: 0, y: -15, scale: 0.95 }, transition: { duration: 0.3 }, style: { marginBottom: '12px' }, children: _jsxs(Paper, { sx: {
                                        p: 1.5,
                                        background: `linear-gradient(135deg, ${getMessageColor(msg.type)}15, ${getMessageColor(msg.type)}08)`,
                                        border: `1px solid ${getMessageColor(msg.type)}40`,
                                        borderRadius: 2,
                                        position: 'relative',
                                        ml: msg.type === 'user' ? 'auto' : 0,
                                        mr: msg.type === 'user' ? 0 : 'auto',
                                        maxWidth: '85%'
                                    }, children: [_jsx(Box, { sx: {
                                                position: 'absolute',
                                                top: -1,
                                                right: -1,
                                                width: 8,
                                                height: 8,
                                                borderRadius: '50%',
                                                backgroundColor: getMessageColor(msg.type),
                                                boxShadow: `0 0 8px ${getMessageColor(msg.type)}`
                                            } }), _jsxs(Box, { sx: { display: 'flex', alignItems: 'center', mb: 1 }, children: [_jsx(AIIcon, { sx: { color: getMessageColor(msg.type), fontSize: 16, mr: 0.5 } }), _jsx(Typography, { variant: "caption", sx: { color: nexusColors.shadow, fontSize: '0.7rem' }, children: msg.timestamp.toLocaleTimeString() }), _jsx(Chip, { label: msg.type === 'user' ? '–í–∏' : msg.type, size: "small", sx: {
                                                        ml: 'auto',
                                                        backgroundColor: `${getMessageColor(msg.type)}20`,
                                                        color: getMessageColor(msg.type),
                                                        fontSize: '0.65rem',
                                                        height: 18
                                                    } })] }), _jsx(Typography, { sx: {
                                                color: nexusColors.frost,
                                                fontSize: '0.9rem',
                                                lineHeight: 1.4,
                                                fontFamily: msg.type === 'insight' ? 'Inter' : 'Fira Code'
                                            }, children: msg.text }), msg.actions && msg.actions.length > 0 && (_jsx(Box, { sx: { mt: 1.5, display: 'flex', gap: 1, flexWrap: 'wrap' }, children: msg.actions.map((action, idx) => (_jsx(Chip, { label: action.label, size: "small", onClick: () => onAction?.(action.action), sx: {
                                                    backgroundColor: `${nexusColors.sapphire}15`,
                                                    color: nexusColors.sapphire,
                                                    border: `1px solid ${nexusColors.sapphire}40`,
                                                    cursor: 'pointer',
                                                    fontSize: '0.7rem',
                                                    '&:hover': {
                                                        backgroundColor: `${nexusColors.sapphire}25`
                                                    }
                                                } }, idx))) }))] }) }, msg.id))) }), isThinking && (_jsx(motion.div, { initial: { opacity: 0 }, animate: { opacity: 1 }, exit: { opacity: 0 }, children: _jsx(Paper, { sx: {
                                    p: 1.5,
                                    background: `linear-gradient(135deg, ${nexusColors.amethyst}15, ${nexusColors.amethyst}08)`,
                                    border: `1px solid ${nexusColors.amethyst}40`,
                                    borderRadius: 2
                                }, children: _jsxs(Box, { sx: { display: 'flex', alignItems: 'center', gap: 1 }, children: [_jsx("div", { className: "loading-spinner", style: { width: '12px', height: '12px' } }), _jsx(Typography, { sx: { color: nexusColors.amethyst, fontSize: '0.85rem' }, children: "\u0410\u043D\u0430\u043B\u0456\u0437\u0443\u044E \u0442\u0430 \u0433\u0435\u043D\u0435\u0440\u0443\u044E \u0432\u0456\u0434\u043F\u043E\u0432\u0456\u0434\u044C..." })] }) }) }))] }), _jsxs(Box, { sx: {
                        p: 1.5,
                        borderTop: `1px solid ${nexusColors.quantum}`,
                        background: `linear-gradient(90deg, ${nexusColors.obsidian}, ${nexusColors.darkMatter})`
                    }, children: [_jsxs(Box, { sx: { display: 'flex', gap: 1, alignItems: 'center' }, children: [_jsx(TextField, { fullWidth: true, variant: "outlined", placeholder: isListening ? "–°–ª—É—Ö–∞—é..." : "–ó–∞–ø–∏—Ç–∞–π—Ç–µ –ø—Ä–æ —Å–∏—Å—Ç–µ–º—É...", value: input, onChange: (e) => setInput(e.target.value), onKeyPress: (e) => e.key === 'Enter' && handleSendMessage(), size: "small", disabled: isListening, sx: {
                                        '& .MuiOutlinedInput-root': {
                                            backgroundColor: isListening ? `${nexusColors.warning}10` : `${nexusColors.obsidian}60`,
                                            color: nexusColors.frost,
                                            fontSize: '0.9rem',
                                            '& fieldset': {
                                                borderColor: isListening ? nexusColors.warning : nexusColors.quantum
                                            },
                                            '&:hover fieldset': {
                                                borderColor: isListening ? nexusColors.warning : nexusColors.emerald
                                            },
                                            '&.Mui-focused fieldset': {
                                                borderColor: isListening ? nexusColors.warning : nexusColors.emerald
                                            }
                                        }
                                    } }), _jsx(IconButton, { onClick: () => handleSendMessage(), disabled: !input.trim() || isThinking, sx: {
                                        color: nexusColors.sapphire,
                                        backgroundColor: `${nexusColors.sapphire}15`,
                                        border: `1px solid ${nexusColors.sapphire}40`,
                                        '&:hover': { backgroundColor: `${nexusColors.sapphire}25` },
                                        '&:disabled': { opacity: 0.5 }
                                    }, children: _jsx(SendIcon, { fontSize: "small" }) })] }), _jsx(Box, { sx: { mt: 1, display: 'flex', gap: 0.5, flexWrap: 'wrap' }, children: moduleContext.hints.map((hint) => (_jsx(Chip, { label: hint, size: "small", onClick: () => setInput(hint), sx: {
                                    backgroundColor: `${nexusColors.quantum}20`,
                                    color: nexusColors.nebula,
                                    fontSize: '0.65rem',
                                    height: 20,
                                    cursor: 'pointer',
                                    '&:hover': {
                                        backgroundColor: `${nexusColors.emerald}20`,
                                        color: nexusColors.emerald
                                    }
                                } }, hint))) })] })] }) }));
};
export default ContextualChat;
