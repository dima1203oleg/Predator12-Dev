/**
 * üé§ PREDATOR12 Premium FREE Voice API - TypeScript SDK
 * –ö–ª—ñ—î–Ω—Ç –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∏–º–∏ TTS/STT –º–æ–¥–µ–ª—è–º–∏
 */

const API_BASE_URL = 'http://localhost:5094';

export interface TTSRequest {
  text: string;
  language?: 'uk' | 'en';
  speed?: number;
  provider?: 'auto' | 'coqui' | 'gtts' | 'pyttsx3';
}

export interface STTRequest {
  audio: Blob;
  language?: 'uk' | 'en';
  provider?: 'auto' | 'faster-whisper' | 'whisper' | 'vosk';
}

export interface STTResponse {
  text: string;
  language: string;
  confidence: number;
  provider: string;
  timestamp: string;
}

export interface VoiceCapabilities {
  tts_providers: {
    coqui: boolean;
    gtts: boolean;
    pyttsx3: boolean;
  };
  stt_providers: {
    'faster-whisper': boolean;
    whisper: boolean;
    vosk: boolean;
  };
  supported_languages: string[];
  recommended_tts: string;
  recommended_stt: string;
}

class PremiumFreeVoiceAPI {
  private baseUrl: string;
  private audioContext: AudioContext | null = null;
  private currentAudio: HTMLAudioElement | null = null;

  constructor(baseUrl: string = API_BASE_URL) {
    this.baseUrl = baseUrl;
  }

  /**
   * –û—Ç—Ä–∏–º–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –¥–æ—Å—Ç—É–ø–Ω—ñ –º–æ–¥–µ–ª—ñ
   */
  async getCapabilities(): Promise<VoiceCapabilities> {
    try {
      const response = await fetch(`${this.baseUrl}/api/capabilities`);
      if (!response.ok) {
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }
      return await response.json();
    } catch (error) {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è capabilities:', error);
      throw error;
    }
  }

  /**
   * Text-to-Speech –∑ –Ω–∞–π–∫—Ä–∞—â–∏–º–∏ –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∏–º–∏ –º–æ–¥–µ–ª—è–º–∏
   *
   * –ü—Ä—ñ–æ—Ä–∏—Ç–µ—Ç (—É–∫—Ä–∞—ó–Ω—Å—å–∫–∞):
   * 1. Coqui TTS uk/mai/vits ‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê
   * 2. gTTS uk ‚≠ê‚≠ê‚≠ê‚≠ê
   * 3. pyttsx3 ‚≠ê‚≠ê‚≠ê
   *
   * –ü—Ä—ñ–æ—Ä–∏—Ç–µ—Ç (–∞–Ω–≥–ª—ñ–π—Å—å–∫–∞):
   * 1. Coqui TTS en/ljspeech/vits ‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê
   * 2. gTTS en ‚≠ê‚≠ê‚≠ê‚≠ê
   * 3. pyttsx3 ‚≠ê‚≠ê‚≠ê
   */
  async textToSpeech(request: TTSRequest): Promise<void> {
    const {
      text,
      language = 'uk',
      speed = 1.0,
      provider = 'auto'
    } = request;

    console.log(`üîä TTS –∑–∞–ø–∏—Ç: "${text.substring(0, 50)}...", lang=${language}, provider=${provider}`);

    try {
      // –ó—É–ø–∏–Ω—è—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—î –≤—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è
      this.stopSpeaking();

      const response = await fetch(`${this.baseUrl}/api/tts`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          text,
          language,
          speed,
          provider
        }),
      });

      if (!response.ok) {
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }

      // –û—Ç—Ä–∏–º—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–∏–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä
      const usedProvider = response.headers.get('X-Provider');
      console.log(`‚úÖ TTS –ø—Ä–æ–≤–∞–π–¥–µ—Ä: ${usedProvider}`);

      // –û—Ç—Ä–∏–º—É—î–º–æ –∞—É–¥—ñ–æ –¥–∞–Ω—ñ
      const audioBlob = await response.blob();
      const audioUrl = URL.createObjectURL(audioBlob);

      // –í—ñ–¥—Ç–≤–æ—Ä—é—î–º–æ –∞—É–¥—ñ–æ
      return new Promise((resolve, reject) => {
        this.currentAudio = new Audio(audioUrl);

        this.currentAudio.onended = () => {
          console.log('‚úÖ TTS –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
          URL.revokeObjectURL(audioUrl);
          resolve();
        };

        this.currentAudio.onerror = (error) => {
          console.error('‚ùå TTS –ø–æ–º–∏–ª–∫–∞ –≤—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è:', error);
          URL.revokeObjectURL(audioUrl);
          reject(error);
        };

        this.currentAudio.play().catch(reject);
      });

    } catch (error) {
      console.error('‚ùå TTS –ø–æ–º–∏–ª–∫–∞:', error);
      throw error;
    }
  }

  /**
   * Speech-to-Text –∑ –Ω–∞–π–∫—Ä–∞—â–∏–º–∏ –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∏–º–∏ –º–æ–¥–µ–ª—è–º–∏
   *
   * –ü—Ä—ñ–æ—Ä–∏—Ç–µ—Ç:
   * 1. faster-whisper ‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê (–Ω–∞–π—à–≤–∏–¥—à–∏–π)
   * 2. whisper ‚≠ê‚≠ê‚≠ê‚≠ê
   * 3. vosk ‚≠ê‚≠ê‚≠ê (real-time)
   */
  async speechToText(request: STTRequest): Promise<STTResponse> {
    const {
      audio,
      language = 'uk',
      provider = 'auto'
    } = request;

    console.log(`üéß STT –∑–∞–ø–∏—Ç: lang=${language}, provider=${provider}, size=${audio.size} bytes`);

    try {
      const formData = new FormData();
      formData.append('audio', audio, 'audio.wav');
      formData.append('language', language);
      formData.append('provider', provider);

      const response = await fetch(`${this.baseUrl}/api/stt`, {
        method: 'POST',
        body: formData,
      });

      if (!response.ok) {
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }

      const result: STTResponse = await response.json();
      console.log(`‚úÖ STT —Ä–µ–∑—É–ª—å—Ç–∞—Ç: "${result.text}" (–ø—Ä–æ–≤–∞–π–¥–µ—Ä: ${result.provider}, –≤–ø–µ–≤–Ω–µ–Ω—ñ—Å—Ç—å: ${result.confidence})`);

      return result;

    } catch (error) {
      console.error('‚ùå STT –ø–æ–º–∏–ª–∫–∞:', error);
      throw error;
    }
  }

  /**
   * –ó—É–ø–∏–Ω–∏—Ç–∏ –≤—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è TTS
   */
  stopSpeaking(): void {
    if (this.currentAudio) {
      this.currentAudio.pause();
      this.currentAudio.currentTime = 0;
      this.currentAudio = null;
      console.log('üõë TTS –∑—É–ø–∏–Ω–µ–Ω–æ');
    }
  }

  /**
   * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ API
   */
  async checkHealth(): Promise<boolean> {
    try {
      const response = await fetch(`${this.baseUrl}/`);
      return response.ok;
    } catch (error) {
      console.error('‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π:', error);
      return false;
    }
  }

  /**
   * –®–≤–∏–¥–∫–∏–π —Ç–µ—Å—Ç TTS
   */
  async testTTS(language: 'uk' | 'en' = 'uk'): Promise<void> {
    const testMessages = {
      uk: "–ü—Ä–∏–≤—ñ—Ç! –Ø —Ç–µ—Å—Ç—É—é —Å–∏—Å—Ç–µ–º—É –æ–∑–≤—É—á—É–≤–∞–Ω–Ω—è. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é –Ω–∞–π–∫—Ä–∞—â—ñ –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω—ñ –º–æ–¥–µ–ª—ñ.",
      en: "Hello! I am testing the text to speech system. Using the best free models."
    };

    console.log(`üß™ –¢–µ—Å—Ç TTS (${language})...`);
    await this.textToSpeech({
      text: testMessages[language],
      language
    });
  }
}

// –ï–∫—Å–ø–æ—Ä—Ç—É—î–º–æ –µ–∫–∑–µ–º–ø–ª—è—Ä API
export const premiumFreeVoiceAPI = new PremiumFreeVoiceAPI();

// –ï–∫—Å–ø–æ—Ä—Ç—É—î–º–æ –∫–ª–∞—Å –¥–ª—è –∫–∞—Å—Ç–æ–º—ñ–∑–∞—Ü—ñ—ó
export default PremiumFreeVoiceAPI;
