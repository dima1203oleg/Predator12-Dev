# ==========================================
# PRE-COMMIT HOOKS CONFIGURATION
# Production-Grade Quality Gates
# ==========================================

repos:
  # General File Checks
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.5.0
    hooks:
      - id: trailing-whitespace
        args: [--markdown-linebreak-ext=md]
      - id: end-of-file-fixer
      - id: check-yaml
        args: [--allow-multiple-documents]
      - id: check-json
      - id: check-toml
      - id: check-added-large-files
        args: [--maxkb=5000]
      - id: check-case-conflict
      - id: check-merge-conflict
      - id: detect-private-key
      - id: mixed-line-ending
      - id: no-commit-to-branch
        args: [--branch, main, --branch, master, --branch, production]

  # Python Code Quality
  - repo: https://github.com/psf/black
    rev: 24.1.1
    hooks:
      - id: black
        language_version: python3.11
        args: [--line-length=100]

  - repo: https://github.com/pycqa/isort
    rev: 5.13.2
    hooks:
      - id: isort
        args: [--profile, black, --line-length=100]

  - repo: https://github.com/pycqa/flake8
    rev: 7.0.0
    hooks:
      - id: flake8
        args: [--max-line-length=100, --extend-ignore=E203,W503]
        additional_dependencies: [flake8-docstrings, flake8-bugbear]

  - repo: https://github.com/pycqa/pylint
    rev: v3.0.3
    hooks:
      - id: pylint
        args: [--max-line-length=100, --disable=C0111,R0903]

  # Security Scanning
  - repo: https://github.com/gitleaks/gitleaks
    rev: v8.18.2
    hooks:
      - id: gitleaks

  - repo: https://github.com/PyCQA/bandit
    rev: 1.7.6
    hooks:
      - id: bandit
        args: [-ll, -r, backend/, agents/, scripts/]
        exclude: ^tests/

  # Python Security & Dependencies
  - repo: https://github.com/Lucas-C/pre-commit-hooks-safety
    rev: v1.3.3
    hooks:
      - id: python-safety-dependencies-check
        files: requirements.*\.txt$

  # Dockerfile Linting
  - repo: https://github.com/hadolint/hadolint
    rev: v2.12.0
    hooks:
      - id: hadolint-docker
        args: [--ignore, DL3008, --ignore, DL3013]

  # Shell Script Linting
  - repo: https://github.com/shellcheck-py/shellcheck-py
    rev: v0.9.0.6
    hooks:
      - id: shellcheck
        args: [-e, SC2086, -e, SC2046]

  # YAML/JSON Formatting
  - repo: https://github.com/pre-commit/mirrors-prettier
    rev: v4.0.0-alpha.8
    hooks:
      - id: prettier
        types_or: [yaml, json, markdown]
        exclude: ^(helm/|\.vscode/)

  # Helm Chart Validation
  - repo: https://github.com/gruntwork-io/pre-commit
    rev: v0.1.23
    hooks:
      - id: helmlint
        files: ^helm/

  # Kubernetes Manifests Validation
  - repo: https://github.com/Lucas-C/pre-commit-hooks-nodejs
    rev: v1.1.2
    hooks:
      - id: dockerfile_lint
      - id: markdown-toc

  # Git Commit Message Validation
  - repo: https://github.com/commitizen-tools/commitizen
    rev: v3.13.0
    hooks:
      - id: commitizen
        stages: [commit-msg]

  # Custom Hooks
  - repo: local
    hooks:
      # Helm Values Sanity Check
      - id: helm-values-sanity
        name: Helm Values Sanity Check
        entry: python3 scripts/ci/values_sanity.py
        language: python
        files: ^helm/.*values.*\.yaml$
        pass_filenames: true

      # ArgoCD Manifest Validation
      - id: argocd-validate
        name: ArgoCD Manifest Validation
        entry: bash -c 'find infra/argocd -name "*.yaml" -exec kubectl --dry-run=client apply -f {} \; 2>&1 | grep -v "created (dry run)" || true'
        language: system
        files: ^infra/argocd/.*\.yaml$
        pass_filenames: false

      # Python Type Checking (mypy)
      - id: mypy
        name: MyPy Type Checking
        entry: mypy
        language: python
        types: [python]
        args: [--ignore-missing-imports, --strict-optional]
        require_serial: true
        additional_dependencies: [mypy==1.8.0]

      # Frontend Linting (ESLint)
      - id: eslint
        name: ESLint Frontend
        entry: bash -c 'cd frontend && npx eslint --ext .ts,.tsx,.js,.jsx --max-warnings=0'
        language: system
        files: ^frontend/.*\.(ts|tsx|js|jsx)$
        pass_filenames: false

      # Agent Registry Validation
      - id: agent-registry-check
        name: Agent Registry Validation
        entry: python3 scripts/ci/validate_agent_registry.py
        language: python
        files: ^agents/registry\.yaml$
        pass_filenames: false

      # Environment Variables Check
      - id: env-vars-check
        name: Environment Variables Consistency
        entry: bash -c 'diff -u <(grep -v "^#" .env.example | cut -d= -f1 | sort) <(grep -v "^#" .env | cut -d= -f1 | sort) || (echo "⚠️ .env and .env.example are out of sync"; exit 1)'
        language: system
        files: ^\.env(\.example)?$
        pass_filenames: false

# Global Configuration
default_stages: [commit, push]
fail_fast: false
minimum_pre_commit_version: '3.0.0'

# CI Configuration
ci:
  autofix_commit_msg: |
    [pre-commit.ci] auto fixes from pre-commit hooks

    for more information, see https://pre-commit.ci
  autofix_prs: true
  autoupdate_branch: ''
  autoupdate_commit_msg: '[pre-commit.ci] pre-commit autoupdate'
  autoupdate_schedule: weekly
  skip: [no-commit-to-branch, helmlint, argocd-validate]
  submodules: false
