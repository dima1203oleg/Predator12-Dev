#!/usr/bin/env python3
"""
üîÑ –ü–û–°–¢–Ü–ô–ù–ò–ô AI –ê–ì–ï–ù–¢ PREDATOR11
–ü—Ä–∞—Ü—é—î –Ω–µ–∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Å—Ç–∞–Ω—É Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ–≤
"""
import asyncio
import httpx
import json
import logging
from datetime import datetime
import time

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

class PersistentAIAgent:
    def __init__(self, name: str):
        self.name = name
        self.model_sdk_url = "http://localhost:3010"
        self.client = httpx.AsyncClient(timeout=30.0)
        self.tasks_processed = 0
        self.running = True

        # –°–ø–µ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω—ñ –º–æ–¥–µ–ª—ñ –¥–ª—è –∞–≥–µ–Ω—Ç–∞
        self.models = {
            "AnomalyAgent": "deepseek/deepseek-r1",
            "ForecastAgent": "meta/meta-llama-3.1-405b-instruct",
            "SecurityAgent": "deepseek/deepseek-v3-0324",
            "DataAgent": "cohere/cohere-command-r-plus-08-2024",
            "SelfHealingAgent": "microsoft/phi-4-reasoning"
        }

    async def call_ai_model(self, prompt: str) -> dict:
        """–í–∏–∫–ª–∏–∫–∞—î AI –º–æ–¥–µ–ª—å –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –∑–∞–≤–¥–∞–Ω–Ω—è"""
        try:
            model = self.models.get(self.name, "gpt-4")

            request_data = {
                "model": model,
                "messages": [
                    {"role": "system", "content": f"–¢–∏ {self.name} –≤ —Å–∏—Å—Ç–µ–º—ñ Predator11. –î–∞–≤–∞–π —Ç–æ—á–Ω—ñ —Ç–µ—Ö–Ω—ñ—á–Ω—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ."},
                    {"role": "user", "content": prompt}
                ],
                "max_tokens": 800
            }

            response = await self.client.post(f"{self.model_sdk_url}/v1/chat/completions", json=request_data)

            if response.status_code == 200:
                data = response.json()
                ai_response = data["choices"][0]["message"]["content"]

                logger.info(f"[{self.name}] ‚úÖ AI –≤—ñ–¥–ø–æ–≤—ñ–¥—å –æ—Ç—Ä–∏–º–∞–Ω–∞ –≤—ñ–¥ {model}: {len(ai_response)} —Å–∏–º–≤–æ–ª—ñ–≤")

                return {
                    "success": True,
                    "model": model,
                    "response": ai_response,
                    "tokens_used": data.get("usage", {}).get("total_tokens", 0)
                }
            else:
                logger.error(f"[{self.name}] ‚ùå HTTP –ø–æ–º–∏–ª–∫–∞: {response.status_code}")
                return {"success": False, "error": f"HTTP {response.status_code}"}

        except Exception as e:
            logger.error(f"[{self.name}] ‚ùå –ü–æ–º–∏–ª–∫–∞ AI –≤–∏–∫–ª–∏–∫—É: {e}")
            return {"success": False, "error": str(e)}

    async def process_continuous_tasks(self):
        """–ë–µ–∑–ø–µ—Ä–µ—Ä–≤–Ω–æ –æ–±—Ä–æ–±–ª—è—î –∑–∞–≤–¥–∞–Ω–Ω—è"""

        # –ì–µ–Ω–µ—Ä—É—î–º–æ —Ä—ñ–∑–Ω—ñ –∑–∞–≤–¥–∞–Ω–Ω—è –¥–ª—è –∞–≥–µ–Ω—Ç—ñ–≤
        task_templates = {
            "AnomalyAgent": [
                "–ü—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–π –º–µ—Ç—Ä–∏–∫–∏ —Å–∏—Å—Ç–µ–º–∏ –Ω–∞ –∞–Ω–æ–º–∞–ª—ñ—ó: CPU 45%, RAM 78%, Disk 23%",
                "–ó–Ω–∞–π–¥–∏ –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è –≤ –ª–æ–≥–∞—Ö: 15000 –∑–∞–ø–∏—Ç—ñ–≤ –∑–∞ —Ö–≤–∏–ª–∏–Ω—É –ø—Ä–∏ –Ω–æ—Ä–º—ñ 500",
                "–ü–µ—Ä–µ–≤—ñ—Ä –¥–∞–Ω—ñ —Å–µ–Ω—Å–æ—Ä—ñ–≤: temperature=[20,21,19,45,22,20,21] –Ω–∞ –∞–Ω–æ–º–∞–ª—å–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è"
            ],
            "ForecastAgent": [
                "–°–ø—Ä–æ–≥–Ω–æ–∑—É–π –Ω–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –Ω–∞ —Å–∏—Å—Ç–µ–º—É –Ω–∞ –Ω–∞—Å—Ç—É–ø–Ω—É –≥–æ–¥–∏–Ω—É –Ω–∞ –æ—Å–Ω–æ–≤—ñ –ø–æ—Ç–æ—á–Ω–∏—Ö —Ç—Ä–µ–Ω–¥—ñ–≤",
                "–ü–µ—Ä–µ–¥–±–∞—á –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑–∞–≤—Ç—Ä–∞ –Ω–∞ –æ—Å–Ω–æ–≤—ñ —ñ—Å—Ç–æ—Ä—ñ—ó: [100,120,110,130,140]",
                "–û—Ü—ñ–Ω–∏ –π–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—å –∑–±–æ—é —Å–∏—Å—Ç–µ–º–∏ –≤ –Ω–∞—Å—Ç—É–ø–Ω—ñ 24 –≥–æ–¥–∏–Ω–∏"
            ],
            "SecurityAgent": [
                "–ü—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–π –ø—ñ–¥–æ–∑—Ä—ñ–ª—É –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å: 500 –Ω–µ—É—Å–ø—ñ—à–Ω–∏—Ö –ª–æ–≥—ñ–Ω—ñ–≤ –∑–∞ 10 —Ö–≤–∏–ª–∏–Ω",
                "–û—Ü—ñ–Ω–∏ –±–µ–∑–ø–µ–∫—É —Å–∏—Å—Ç–µ–º–∏ –Ω–∞ –æ—Å–Ω–æ–≤—ñ –ø–æ—Ç–æ—á–Ω–∏—Ö –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å",
                "–ü–µ—Ä–µ–≤—ñ—Ä –ª–æ–≥–∏ –Ω–∞ –æ–∑–Ω–∞–∫–∏ –≤—Ç–æ—Ä–≥–Ω–µ–Ω–Ω—è –∞–±–æ –∑–ª–æ–≤–º–∏—Å–Ω–æ—ó –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ"
            ],
            "DataAgent": [
                "–û—á–∏—Å—Ç–∏ –¥–∞—Ç–∞—Å–µ—Ç –∑ 5000 –∑–∞–ø–∏—Å—ñ–≤: 10% –¥—É–±–ª—ñ–∫–∞—Ç—ñ–≤, 15% –ø—Ä–æ–ø—É—â–µ–Ω–∏—Ö –∑–Ω–∞—á–µ–Ω—å",
                "–ü—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–π —è–∫—ñ—Å—Ç—å –≤—Ö—ñ–¥–Ω–∏—Ö –¥–∞–Ω–∏—Ö —Ç–∞ –∑–∞–ø—Ä–æ–ø–æ–Ω—É–π –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è",
                "–ü—ñ–¥–≥–æ—Ç—É–π –¥–∞–Ω—ñ –¥–ª—è –º–∞—à–∏–Ω–Ω–æ–≥–æ –Ω–∞–≤—á–∞–Ω–Ω—è: –Ω–æ—Ä–º–∞–ª—ñ–∑–∞—Ü—ñ—è —Ç–∞ feature engineering"
            ],
            "SelfHealingAgent": [
                "–î—ñ–∞–≥–Ω–æ—Å—Ç—É–π –ø—Ä–æ–±–ª–µ–º–∏ —Å–∏—Å—Ç–µ–º–∏ —Ç–∞ –∑–∞–ø—Ä–æ–ø–æ–Ω—É–π –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω—ñ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è",
                "–ü–µ—Ä–µ–≤—ñ—Ä —Å—Ç–∞–Ω –≤—Å—ñ—Ö —Å–µ—Ä–≤—ñ—Å—ñ–≤ —Ç–∞ –≤–∏–ø—Ä–∞–≤ –∑–Ω–∞–π–¥–µ–Ω—ñ –ø—Ä–æ–±–ª–µ–º–∏",
                "–û–ø—Ç–∏–º—ñ–∑—É–π –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å —Å–∏—Å—Ç–µ–º–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ"
            ]
        }

        tasks = task_templates.get(self.name, ["–í–∏–∫–æ–Ω–∞–π –∑–∞–≥–∞–ª—å–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ —Å–∏—Å—Ç–µ–º–∏"])
        task_index = 0

        logger.info(f"üöÄ [{self.name}] –†–æ–∑–ø–æ—á–∏–Ω–∞—é –±–µ–∑–ø–µ—Ä–µ—Ä–≤–Ω—É —Ä–æ–±–æ—Ç—É –∑ AI –º–æ–¥–µ–ª—è–º–∏")

        while self.running:
            try:
                # –í–∏–±–∏—Ä–∞—î–º–æ –∑–∞–≤–¥–∞–Ω–Ω—è —Ü–∏–∫–ª—ñ—á–Ω–æ
                current_task = tasks[task_index % len(tasks)]
                task_index += 1

                logger.info(f"[{self.name}] üìã –ó–∞–≤–¥–∞–Ω–Ω—è #{self.tasks_processed + 1}: {current_task[:50]}...")

                # –û–±—Ä–æ–±–ª—è—î–º–æ –∑–∞–≤–¥–∞–Ω–Ω—è –∑ AI
                result = await self.call_ai_model(current_task)

                if result["success"]:
                    self.tasks_processed += 1

                    # –õ–æ–≥—É—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                    logger.info(f"[{self.name}] ‚úÖ –ó–∞–≤–¥–∞–Ω–Ω—è #{self.tasks_processed} –≤–∏–∫–æ–Ω–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ")
                    logger.info(f"[{self.name}] ü§ñ –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–∞ –º–æ–¥–µ–ª—å: {result['model']}")
                    logger.info(f"[{self.name}] üìù –†–µ–∑—É–ª—å—Ç–∞—Ç: {result['response'][:100]}...")

                    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                    await self.save_result(current_task, result)

                else:
                    logger.error(f"[{self.name}] ‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∫–æ–Ω–∞—Ç–∏ –∑–∞–≤–¥–∞–Ω–Ω—è: {result.get('error')}")

                # –ß–µ–∫–∞—î–º–æ –ø–µ—Ä–µ–¥ –Ω–∞—Å—Ç—É–ø–Ω–∏–º –∑–∞–≤–¥–∞–Ω–Ω—è–º
                await asyncio.sleep(10)  # 10 —Å–µ–∫—É–Ω–¥ –º—ñ–∂ –∑–∞–≤–¥–∞–Ω–Ω—è–º–∏

            except KeyboardInterrupt:
                logger.info(f"[{self.name}] üõë –ó—É–ø–∏–Ω–∫–∞ –∞–≥–µ–Ω—Ç–∞...")
                self.running = False
                break
            except Exception as e:
                logger.error(f"[{self.name}] ‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
                await asyncio.sleep(30)  # –ß–µ–∫–∞—î–º–æ –ø—Ä–∏ –∫—Ä–∏—Ç–∏—á–Ω–∏—Ö –ø–æ–º–∏–ª–∫–∞—Ö

    async def save_result(self, task: str, result: dict):
        """–ó–±–µ—Ä—ñ–≥–∞—î —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ä–æ–±–æ—Ç–∏ –∞–≥–µ–Ω—Ç–∞"""
        try:
            log_entry = {
                "agent": self.name,
                "task": task,
                "model_used": result["model"],
                "response": result["response"],
                "tokens_used": result.get("tokens_used", 0),
                "timestamp": datetime.now().isoformat(),
                "task_number": self.tasks_processed
            }

            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ –ª–æ–≥ —Ñ–∞–π–ª
            log_file = f"/Users/dima/Documents/Predator11/logs/agents/{self.name.lower()}_ai_activity.log"

            with open(log_file, "a", encoding="utf-8") as f:
                f.write(json.dumps(log_entry, ensure_ascii=False) + "\n")

        except Exception as e:
            logger.error(f"[{self.name}] –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É: {e}")

class AgentManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –∑–∞–ø—É—Å–∫—É –∫—ñ–ª—å–∫–æ—Ö –∞–≥–µ–Ω—Ç—ñ–≤"""

    def __init__(self):
        self.agents = []
        self.running = True

    async def start_all_agents(self):
        """–ó–∞–ø—É—Å–∫–∞—î –≤—Å—ñ—Ö –∞–≥–µ–Ω—Ç—ñ–≤ –æ–¥–Ω–æ—á–∞—Å–Ω–æ"""

        agent_types = ["AnomalyAgent", "ForecastAgent", "SecurityAgent", "DataAgent", "SelfHealingAgent"]

        logger.info("üöÄ –ó–∞–ø—É—Å–∫–∞—é –≤—Å—ñ—Ö –ø–æ—Å—Ç—ñ–π–Ω–∏—Ö AI –∞–≥–µ–Ω—Ç—ñ–≤...")

        # –°—Ç–≤–æ—Ä—é—î–º–æ –∑–∞–≤–¥–∞–Ω–Ω—è –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞
        tasks = []
        for agent_type in agent_types:
            agent = PersistentAIAgent(agent_type)
            self.agents.append(agent)
            task = asyncio.create_task(agent.process_continuous_tasks())
            tasks.append(task)
            logger.info(f"‚úÖ {agent_type} –∑–∞–ø—É—â–µ–Ω–∏–π")

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–∂–Ω—ñ 60 —Å–µ–∫—É–Ω–¥
        stats_task = asyncio.create_task(self.print_statistics())
        tasks.append(stats_task)

        logger.info(f"üéâ {len(agent_types)} AI –∞–≥–µ–Ω—Ç—ñ–≤ –ø—Ä–∞—Ü—é—é—Ç—å –±–µ–∑–ø–µ—Ä–µ—Ä–≤–Ω–æ!")

        # –ß–µ–∫–∞—î–º–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –≤—Å—ñ—Ö –∑–∞–≤–¥–∞–Ω—å
        try:
            await asyncio.gather(*tasks)
        except KeyboardInterrupt:
            logger.info("üõë –ó—É–ø–∏–Ω–∫–∞ –≤—Å—ñ—Ö –∞–≥–µ–Ω—Ç—ñ–≤...")
            for agent in self.agents:
                agent.running = False

    async def print_statistics(self):
        """–í–∏–≤–æ–¥–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–æ–±–æ—Ç–∏ –∞–≥–µ–Ω—Ç—ñ–≤"""
        start_time = time.time()

        while self.running:
            try:
                await asyncio.sleep(60)  # –ö–æ–∂–Ω—É —Ö–≤–∏–ª–∏–Ω—É

                uptime = int(time.time() - start_time)
                total_tasks = sum(agent.tasks_processed for agent in self.agents)

                logger.info("üìä " + "="*50)
                logger.info(f"üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –†–û–ë–û–¢–ò –ê–ì–ï–ù–¢–Ü–í (Uptime: {uptime}s)")
                logger.info("üìä " + "="*50)

                for agent in self.agents:
                    rate = agent.tasks_processed / (uptime / 60) if uptime > 0 else 0
                    logger.info(f"ü§ñ {agent.name}: {agent.tasks_processed} –∑–∞–≤–¥–∞–Ω—å ({rate:.1f}/—Ö–≤)")

                logger.info(f"üéØ –ó–∞–≥–∞–ª–æ–º: {total_tasks} –∑–∞–≤–¥–∞–Ω—å –æ–±—Ä–æ–±–ª–µ–Ω–æ")
                logger.info(f"‚ö° –°–µ—Ä–µ–¥–Ω—è —à–≤–∏–¥–∫—ñ—Å—Ç—å: {total_tasks / (uptime / 60) if uptime > 0 else 0:.1f} –∑–∞–≤–¥–∞–Ω—å/—Ö–≤")

            except Exception as e:
                logger.error(f"–ü–æ–º–∏–ª–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
                await asyncio.sleep(60)

async def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è"""

    print("ü§ñ –ó–ê–ü–£–°–ö –ü–û–°–¢–Ü–ô–ù–ò–• AI –ê–ì–ï–ù–¢–Ü–í PREDATOR11")
    print("="*60)
    print("–ê–≥–µ–Ω—Ç–∏ –±—É–¥—É—Ç—å –ø—Ä–∞—Ü—é–≤–∞—Ç–∏ –±–µ–∑–ø–µ—Ä–µ—Ä–≤–Ω–æ –∑ —Ä–µ–∞–ª—å–Ω–∏–º–∏ AI –º–æ–¥–µ–ª—è–º–∏")
    print("–î–ª—è –∑—É–ø–∏–Ω–∫–∏ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å Ctrl+C")
    print("="*60)

    manager = AgentManager()
    await manager.start_all_agents()

if __name__ == "__main__":
    asyncio.run(main())
