#!/usr/bin/env python3
"""
–î–µ—Ç–∞–ª—å–Ω–∞ –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å—Ç–∞–Ω—É –≤—Å—ñ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ–≤ Predator11 stack
"""

import subprocess
import sys
from pathlib import Path
import requests
import docker
import psutil
from datetime import datetime

class Predator11Diagnostics:
    def __init__(self):
        self.issues = []
        self.warnings = []
        self.ok_services = []
        self.project_root = Path("/Users/dima/Documents/Predator11")
        
    def log_issue(self, service, message, level="ERROR"):
        if level == "ERROR":
            self.issues.append(f"‚ùå {service}: {message}")
        elif level == "WARNING":  
            self.warnings.append(f"‚ö†Ô∏è {service}: {message}")
        else:
            self.ok_services.append(f"‚úÖ {service}: {message}")
    
    def check_docker_daemon(self):
        """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ Docker daemon"""
        try:
            client = docker.from_env()
            client.ping()
            self.log_issue("Docker Daemon", "–ü—Ä–∞—Ü—é—î", "OK")
            return True
        except Exception as e:
            self.log_issue("Docker Daemon", f"–ù–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π: {e}")
            return False
    
    def check_system_resources(self):
        """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω–∏—Ö —Ä–µ—Å—É—Ä—Å—ñ–≤"""
        # CPU
        cpu_percent = psutil.cpu_percent(interval=1)
        if cpu_percent > 80:
            self.log_issue("CPU", f"–í–∏—Å–æ–∫–µ –Ω–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è: {cpu_percent}%", "WARNING")
        else:
            self.log_issue("CPU", f"–ù–æ—Ä–º–∞–ª—å–Ω–µ –Ω–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è: {cpu_percent}%", "OK")
        
        # Memory
        memory = psutil.virtual_memory()
        memory_percent = memory.percent
        if memory_percent > 85:
            self.log_issue("Memory", f"–í–∏—Å–æ–∫–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: {memory_percent}%", "WARNING")
        else:
            self.log_issue("Memory", f"–ù–æ—Ä–º–∞–ª—å–Ω–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: {memory_percent}%", "OK")
            
        # Disk
        disk = psutil.disk_usage('/')
        disk_percent = disk.percent
        if disk_percent > 90:
            self.log_issue("Disk", f"–ú–∞–ª–æ –º—ñ—Å—Ü—è: {disk_percent}%", "WARNING")
        else:
            self.log_issue("Disk", f"–î–æ—Å—Ç–∞—Ç–Ω—å–æ –º—ñ—Å—Ü—è: {disk_percent}%", "OK")
    
    def check_docker_compose_config(self):
        """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó docker-compose"""
        compose_file = self.project_root / "docker-compose.yml"
        override_file = self.project_root / "docker-compose.override.yml"
        
        if not compose_file.exists():
            self.log_issue("Docker Compose", "docker-compose.yml –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
            return False
            
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤–∞–ª—ñ–¥–Ω–æ—Å—Ç—ñ YAML
        try:
            result = subprocess.run(
                ["docker-compose", "config"], 
                cwd=self.project_root,
                capture_output=True, 
                text=True
            )
            if result.returncode == 0:
                self.log_issue("Docker Compose Config", "–í–∞–ª—ñ–¥–Ω–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è", "OK")
            else:
                self.log_issue("Docker Compose Config", f"–ü–æ–º–∏–ª–∫–∏: {result.stderr}")
        except Exception as e:
            self.log_issue("Docker Compose", f"–ù–µ –≤–¥–∞—î—Ç—å—Å—è –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏: {e}")
    
    def check_container_status(self):
        """–î–µ—Ç–∞–ª—å–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å—É –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ–≤"""
        if not self.check_docker_daemon():
            return
            
        try:
            client = docker.from_env()
            
            # –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏ –ø—Ä–æ–µ–∫—Ç—É
            containers = client.containers.list(all=True, filters={
                "label": "com.docker.compose.project=predator11"
            })
            
            if not containers:
                self.log_issue("Containers", "–ñ–æ–¥–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
                return
            
            for container in containers:
                name = container.name
                status = container.status
                
                if status == "running":
                    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ health check
                    health = container.attrs.get('State', {}).get('Health', {})
                    if health:
                        health_status = health.get('Status', 'none')
                        if health_status == 'healthy':
                            self.log_issue(name, "–ó–¥–æ—Ä–æ–≤–∏–π", "OK")
                        elif health_status == 'unhealthy':
                            self.log_issue(name, "–ù–µ–∑–¥–æ—Ä–æ–≤–∏–π", "ERROR")
                        elif health_status == 'starting':
                            self.log_issue(name, "–ó–∞–ø—É—Å–∫–∞—î—Ç—å—Å—è", "WARNING")
                        else:
                            self.log_issue(name, f"Health: {health_status}", "WARNING")
                    else:
                        self.log_issue(name, "–ü—Ä–∞—Ü—é—î (–Ω–µ–º–∞—î health check)", "OK")
                elif status == "exited":
                    exit_code = container.attrs.get('State', {}).get('ExitCode', -1)
                    self.log_issue(name, f"–ó—É–ø–∏–Ω–µ–Ω–∏–π (–∫–æ–¥: {exit_code})")
                else:
                    self.log_issue(name, f"–°—Ç–∞—Ç—É—Å: {status}", "WARNING")
                    
        except Exception as e:
            self.log_issue("Container Check", f"–ü–æ–º–∏–ª–∫–∞: {e}")
    
    def check_ports_availability(self):
        """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ –ø–æ—Ä—Ç—ñ–≤"""
        required_ports = {
            3000: "Frontend",
            8000: "Backend API", 
            5432: "PostgreSQL",
            6379: "Redis",
            9200: "OpenSearch",
            5601: "OpenSearch Dashboards",
            9090: "Prometheus",
            3001: "Grafana",
            3100: "Loki",
            8080: "Keycloak"
        }
        
        for port, service in required_ports.items():
            try:
                response = requests.get(f"http://localhost:{port}", timeout=5)
                self.log_issue(f"{service} ({port})", "–î–æ—Å—Ç—É–ø–Ω–∏–π", "OK")
            except requests.exceptions.ConnectionError:
                self.log_issue(f"{service} ({port})", "–ù–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π")
            except requests.exceptions.Timeout:
                self.log_issue(f"{service} ({port})", "–¢–∞–π–º–∞—É—Ç –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ", "WARNING")
            except Exception as e:
                self.log_issue(f"{service} ({port})", f"–ü–æ–º–∏–ª–∫–∞: {e}", "WARNING")
    
    def check_env_variables(self):
        """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–º—ñ–Ω–Ω–∏—Ö –æ—Ç–æ—á–µ–Ω–Ω—è"""
        env_file = self.project_root / ".env"
        if not env_file.exists():
            self.log_issue("Environment", ".env —Ñ–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
            return
            
        try:
            with open(env_file, 'r') as f:
                lines = f.readlines()
            
            required_vars = [
                'DATABASE_URL', 'REDIS_URL', 'OPENSEARCH_URL', 
                'SECRET_KEY', 'POSTGRES_PASSWORD', 'REDIS_PASSWORD'
            ]
            
            defined_vars = []
            for line in lines:
                if '=' in line and not line.startswith('#'):
                    var_name = line.split('=')[0].strip()
                    defined_vars.append(var_name)
            
            missing = set(required_vars) - set(defined_vars)
            if missing:
                self.log_issue("Environment", f"–í—ñ–¥—Å—É—Ç–Ω—ñ –∑–º—ñ–Ω–Ω—ñ: {', '.join(missing)}")
            else:
                self.log_issue("Environment", "–í—Å—ñ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –∑–º—ñ–Ω–Ω—ñ –≤–∏–∑–Ω–∞—á–µ–Ω—ñ", "OK")
                
        except Exception as e:
            self.log_issue("Environment", f"–ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è .env: {e}")
    
    def check_volume_mounts(self):
        """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ volume –º–æ–Ω—Ç—É–≤–∞–Ω—å"""
        important_volumes = [
            self.project_root / "logs",
            self.project_root / "backend",
            self.project_root / "frontend", 
            self.project_root / "agents"
        ]
        
        for volume_path in important_volumes:
            if volume_path.exists():
                self.log_issue(f"Volume {volume_path.name}", "–Ü—Å–Ω—É—î", "OK")
            else:
                self.log_issue(f"Volume {volume_path.name}", "–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
    
    def analyze_common_issues(self):
        """–ê–Ω–∞–ª—ñ–∑ —Ç–∏–ø–æ–≤–∏—Ö –ø—Ä–æ–±–ª–µ–º"""
        print("\nüîç –ê–ù–ê–õ–Ü–ó –¢–ò–ü–û–í–ò–• –ü–†–û–ë–õ–ï–ú:")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –∫–æ–Ω—Ñ–ª—ñ–∫—Ç–∏ –ø–æ—Ä—Ç—ñ–≤
        if any("–ù–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π" in issue for issue in self.issues):
            print("üí° –ú–æ–∂–ª–∏–≤—ñ –ø—Ä–∏—á–∏–Ω–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ —Å–µ—Ä–≤—ñ—Å—ñ–≤:")
            print("   - –ü–æ—Ä—Ç–∏ –∑–∞–π–Ω—è—Ç—ñ —ñ–Ω—à–∏–º–∏ –ø—Ä–æ—Ü–µ—Å–∞–º–∏")
            print("   - –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏ –Ω–µ –∑–∞–ø—É—â–µ–Ω—ñ")
            print("   - Health checks –Ω–µ –ø—Ä–æ—Ö–æ–¥—è—Ç—å")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –ø—Ä–æ–±–ª–µ–º–∏ –∑ —Ä–µ—Å—É—Ä—Å–∞–º–∏
        if any("–í–∏—Å–æ–∫–µ" in warning for warning in self.warnings):
            print("üí° –ü—Ä–æ–±–ª–µ–º–∏ –∑ —Ä–µ—Å—É—Ä—Å–∞–º–∏:")
            print("   - –ó–º–µ–Ω—à—Ç–µ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –æ–¥–Ω–æ—á–∞—Å–Ω–∏—Ö —Å–µ—Ä–≤—ñ—Å—ñ–≤")
            print("   - –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ Docker Desktop –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è")
            print("   - –ó–∞–∫—Ä–∏–π—Ç–µ –Ω–µ–ø–æ—Ç—Ä—ñ–±–Ω—ñ –ø—Ä–æ–≥—Ä–∞–º–∏")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –¥–ª—è orange/warning —Å—Ç–∞—Ç—É—Å—ñ–≤
        print("üí° –©–æ–¥–æ –æ—Ä–∞–Ω–∂–µ–≤–∏—Ö (WARNING) —Å—Ç–∞—Ç—É—Å—ñ–≤:")
        print("   - starting: –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —â–µ –∑–∞–ø—É—Å–∫–∞—î—Ç—å—Å—è, –∑–∞—á–µ–∫–∞–π—Ç–µ")
        print("   - unhealthy: –ø–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ª–æ–≥–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞")
        print("   - –¢–∞–π–º–∞—É—Ç: –∑–±—ñ–ª—å—à—Ç–µ timeout –≤ health check")
    
    def run_full_diagnostic(self):
        """–ü–æ–≤–Ω–∞ –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞"""
        print("üöÄ PREDATOR11 STACK DIAGNOSTICS")
        print("=" * 60)
        print(f"–ß–∞—Å: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        print(f"–ü—Ä–æ–µ–∫—Ç: {self.project_root}")
        print()
        
        print("üìã –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ–≤...")
        self.check_system_resources()
        self.check_docker_daemon()
        self.check_docker_compose_config()
        self.check_env_variables()
        self.check_volume_mounts()
        self.check_container_status()
        self.check_ports_availability()
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç–∏
        print("\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–ò –î–Ü–ê–ì–ù–û–°–¢–ò–ö–ò:")
        print("=" * 60)
        
        if self.ok_services:
            print("‚úÖ –ü–†–ê–¶–Æ–Æ–ß–Ü –°–ï–†–í–Ü–°–ò:")
            for service in self.ok_services:
                print(f"   {service}")
        
        if self.warnings:
            print("\n‚ö†Ô∏è –ü–û–ü–ï–†–ï–î–ñ–ï–ù–ù–Ø (ORANGE STATUS):")
            for warning in self.warnings:
                print(f"   {warning}")
        
        if self.issues:
            print("\n‚ùå –ö–†–ò–¢–ò–ß–ù–Ü –ü–†–û–ë–õ–ï–ú–ò:")
            for issue in self.issues:
                print(f"   {issue}")
        
        # –ê–Ω–∞–ª—ñ–∑
        self.analyze_common_issues()
        
        # –ó–∞–≥–∞–ª—å–Ω–∏–π –≤–∏—Å–Ω–æ–≤–æ–∫
        print(f"\nüìà –ó–ê–ì–ê–õ–¨–ù–ò–ô –°–¢–ê–ù:")
        total = len(self.ok_services) + len(self.warnings) + len(self.issues)
        if len(self.issues) == 0 and len(self.warnings) <= 2:
            print("üü¢ –°–ò–°–¢–ï–ú–ê –í –ù–û–†–ú–Ü")
        elif len(self.issues) == 0:
            print("üü° –°–ò–°–¢–ï–ú–ê –ü–†–ê–¶–Æ–Ñ –ó –ü–û–ü–ï–†–ï–î–ñ–ï–ù–ù–Ø–ú–ò")
        else:
            print("üî¥ –°–ò–°–¢–ï–ú–ê –ú–ê–Ñ –ö–†–ò–¢–ò–ß–ù–Ü –ü–†–û–ë–õ–ï–ú–ò")
        
        print(f"–í—Å—å–æ–≥–æ –ø–µ—Ä–µ–≤—ñ—Ä–µ–Ω–æ: {total} –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ–≤")
        return len(self.issues) == 0

if __name__ == "__main__":
    diagnostics = Predator11Diagnostics()
    success = diagnostics.run_full_diagnostic()
    sys.exit(0 if success else 1)
