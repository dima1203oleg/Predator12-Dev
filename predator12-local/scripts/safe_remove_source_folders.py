#!/usr/bin/env python3
"""
–ë–µ–∑–ø–µ—á–Ω–µ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –≤–∏—Ö—ñ–¥–Ω–∏—Ö –ø–∞–ø–æ–∫ AAPredator8.0 —Ç–∞ codespaces-models –ø—ñ—Å–ª—è –∫–æ–Ω—Å–æ–ª—ñ–¥–∞—Ü—ñ—ó
"""
import os
import shutil
import sys
from pathlib import Path
from datetime import datetime

def create_backup_summary(source_path: Path, backup_path: Path):
    """–°—Ç–≤–æ—Ä—é—î –ø—ñ–¥—Å—É–º–æ–∫ —Ç–æ–≥–æ, —â–æ –±—É–ª–æ —É –≤–∏—Ö—ñ–¥–Ω—ñ–π –ø–∞–ø—Ü—ñ –ø–µ—Ä–µ–¥ –≤–∏–¥–∞–ª–µ–Ω–Ω—è–º"""
    summary = []
    summary.append(f"# Backup Summary for {source_path.name}")
    summary.append(f"Created: {datetime.now()}")
    summary.append(f"Original path: {source_path}")
    summary.append("")
    
    # –ü—ñ–¥—Ä–∞—Ö—É–Ω–æ–∫ —Ñ–∞–π–ª—ñ–≤
    total_files = 0
    total_dirs = 0
    
    for root, dirs, files in os.walk(source_path):
        total_dirs += len(dirs)
        total_files += len(files)
        
        rel_root = Path(root).relative_to(source_path)
        if rel_root != Path('.'):
            summary.append(f"## {rel_root}/")
        else:
            summary.append("## Root files:")
            
        for file in files:
            file_path = Path(root) / file
            size = file_path.stat().st_size
            summary.append(f"  - {file} ({size:,} bytes)")
    
    summary.append("")
    summary.append(f"**Total**: {total_files} files, {total_dirs} directories")
    
    # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è summary
    summary_file = backup_path / f"{source_path.name}_summary.md"
    with open(summary_file, 'w', encoding='utf-8') as f:
        f.write('\n'.join(summary))
    
    return summary_file

def safe_remove_source_folders():
    """–ë–µ–∑–ø–µ—á–Ω–æ –≤–∏–¥–∞–ª—è—î –≤–∏—Ö—ñ–¥–Ω—ñ –ø–∞–ø–∫–∏ –∑ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—é —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è backup"""
    base_path = Path(__file__).parent.parent
    
    source_folders = {
        'AAPredator8.0': base_path / 'AAPredator8.0',
        'codespaces-models': base_path / 'codespaces-models'
    }
    
    print("üóëÔ∏è  –ë–µ–∑–ø–µ—á–Ω–µ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –≤–∏—Ö—ñ–¥–Ω–∏—Ö –ø–∞–ø–æ–∫")
    print("=" * 50)
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ —ñ—Å–Ω—É—é—Ç—å –ø–∞–ø–∫–∏
    existing_folders = {name: path for name, path in source_folders.items() if path.exists()}
    
    if not existing_folders:
        print("‚ÑπÔ∏è  –í–∏—Ö—ñ–¥–Ω—ñ –ø–∞–ø–∫–∏ –≤–∂–µ –±—É–ª–∏ –≤–∏–¥–∞–ª–µ–Ω—ñ –∞–±–æ –Ω–µ —ñ—Å–Ω—É—é—Ç—å")
        return
    
    print(f"üìã –ó–Ω–∞–π–¥–µ–Ω–æ –ø–∞–ø–∫–∏ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è:")
    for name, path in existing_folders.items():
        size = sum(f.stat().st_size for f in path.rglob('*') if f.is_file())
        size_mb = size / (1024 * 1024)
        print(f"  ‚Ä¢ {name}: {size_mb:.1f} MB")
    
    # –ü–∏—Ç–∞–Ω–Ω—è –ø—Ä–æ backup
    create_backup = input("\n‚ùì –°—Ç–≤–æ—Ä–∏—Ç–∏ backup –ø–µ—Ä–µ–¥ –≤–∏–¥–∞–ª–µ–Ω–Ω—è–º? (y/N): ").lower().startswith('y')
    
    if create_backup:
        backup_base = base_path / "backup_before_deletion"
        backup_base.mkdir(exist_ok=True)
        
        print(f"\nüì¶ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è backup –≤ {backup_base}...")
        
        for name, source_path in existing_folders.items():
            backup_path = backup_base / name
            
            try:
                # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è summary
                print(f"  üìÑ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è summary –¥–ª—è {name}...")
                summary_file = create_backup_summary(source_path, backup_base)
                
                # –ö–æ–ø—ñ—é—î–º–æ –ª–∏—à–µ –≤–∞–∂–ª–∏–≤—ñ —Ñ–∞–π–ª–∏ (–Ω–µ node_modules, .venv —Ç–æ—â–æ)
                print(f"  üìÇ Backup –≤–∞–∂–ª–∏–≤–∏—Ö —Ñ–∞–π–ª—ñ–≤ –∑ {name}...")
                
                important_extensions = {'.py', '.js', '.mjs', '.json', '.yml', '.yaml', 
                                      '.md', '.txt', '.sh', '.env', '.example'}
                important_dirs = {'docs', 'scripts', 'config', 'templates'}
                
                backup_path.mkdir(exist_ok=True)
                
                for item in source_path.rglob('*'):
                    if item.is_file():
                        # –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –≤–µ–ª–∏–∫—ñ –ø–∞–ø–∫–∏ —Ç–∞ —Ñ–∞–π–ª–∏
                        if any(skip in str(item) for skip in ['.venv', 'node_modules', '.git', '__pycache__', '.pytest_cache']):
                            continue
                            
                        # –ë–µ—Ä—î–º–æ —Ñ–∞–π–ª–∏ –∑ –≤–∞–∂–ª–∏–≤–∏–º–∏ —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è–º–∏ –∞–±–æ –≤ –≤–∞–∂–ª–∏–≤–∏—Ö –ø–∞–ø–∫–∞—Ö
                        if (item.suffix in important_extensions or 
                            any(important_dir in item.parts for important_dir in important_dirs)):
                            
                            rel_path = item.relative_to(source_path)
                            backup_item = backup_path / rel_path
                            backup_item.parent.mkdir(parents=True, exist_ok=True)
                            shutil.copy2(item, backup_item)
                
                print(f"  ‚úÖ Backup {name} –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
                
            except Exception as e:
                print(f"  ‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ backup –¥–ª—è {name}: {e}")
    
    # –§—ñ–Ω–∞–ª—å–Ω–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
    print(f"\n‚ö†Ô∏è  –£–í–ê–ì–ê: –¶–µ –Ω–∞–∑–∞–≤–∂–¥–∏ –≤–∏–¥–∞–ª–∏—Ç—å –Ω–∞—Å—Ç—É–ø–Ω—ñ –ø–∞–ø–∫–∏:")
    for name, path in existing_folders.items():
        print(f"  ‚Ä¢ {path}")
    
    if create_backup:
        print(f"\nüíæ Backup –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤: {backup_base}")
    
    confirmation = input(f"\n‚ùì –í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ —Ü—ñ –ø–∞–ø–∫–∏? –í–≤–µ–¥—ñ—Ç—å 'DELETE' –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è: ")
    
    if confirmation != 'DELETE':
        print("‚ùå –û–ø–µ—Ä–∞—Ü—ñ—è —Å–∫–∞—Å–æ–≤–∞–Ω–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º")
        return
    
    # –í–∏–¥–∞–ª–µ–Ω–Ω—è –ø–∞–ø–æ–∫
    print(f"\nüóëÔ∏è  –í–∏–¥–∞–ª–µ–Ω–Ω—è –ø–∞–ø–æ–∫...")
    deleted_count = 0
    
    for name, path in existing_folders.items():
        try:
            print(f"  üóÇÔ∏è  –í–∏–¥–∞–ª—è—é {name}...")
            shutil.rmtree(path)
            print(f"  ‚úÖ {name} —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ")
            deleted_count += 1
        except Exception as e:
            print(f"  ‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ {name}: {e}")
    
    print(f"\nüéâ –û–ø–µ—Ä–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    print(f"  ‚Ä¢ –í–∏–¥–∞–ª–µ–Ω–æ –ø–∞–ø–æ–∫: {deleted_count}/{len(existing_folders)}")
    
    if create_backup:
        print(f"  ‚Ä¢ Backup –∑–±–µ—Ä—ñ–≥–∞—î—Ç—å—Å—è –≤: {backup_base}")
        print(f"  ‚Ä¢ –í–∏ –º–æ–∂–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ backup –ø—ñ–∑–Ω—ñ—à–µ, –∫–æ–ª–∏ –ø–µ—Ä–µ–∫–æ–Ω–∞—î—Ç–µ—Å—å —â–æ –≤—Å–µ –ø—Ä–∞—Ü—é—î")
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó
    print(f"\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó:")
    print(f"  ‚Ä¢ –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —Ä–æ–±–æ—Ç—É —Å–∏—Å—Ç–µ–º–∏: make test-system")
    print(f"  ‚Ä¢ –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è —â–æ –≤—Å—ñ —Å–µ—Ä–≤—ñ—Å–∏ –ø—Ä–∞—Ü—é—é—Ç—å: make health-check")
    print(f"  ‚Ä¢ –ü—Ä–∏ –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ—Å—Ç—ñ backup –º–æ–∂–Ω–∞ –≤—ñ–¥–Ω–æ–≤–∏—Ç–∏ –∑ {backup_base if create_backup else '–Ω–µ —Å—Ç–≤–æ—Ä–µ–Ω–æ'}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è"""
    try:
        safe_remove_source_folders()
    except KeyboardInterrupt:
        print("\n‚ùå –û–ø–µ—Ä–∞—Ü—ñ—è –ø–µ—Ä–µ—Ä–≤–∞–Ω–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º")
        sys.exit(1)
    except Exception as e:
        print(f"\nüí• –ù–µ–ø–µ—Ä–µ–¥–±–∞—á–µ–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
        sys.exit(1)

if __name__ == '__main__':
    main()
