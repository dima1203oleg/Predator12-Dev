#!/usr/bin/env python3
"""
üîç –¢–ï–°–¢ –í–°–Ü–• 26 –ê–ì–ï–ù–¢–Ü–í –ù–ê –í–ò–ö–û–†–ò–°–¢–ê–ù–ù–Ø –ù–û–í–û–á –õ–û–ì–Ü–ö–ò
"""

import asyncio
import sys
import os
sys.path.append('/Users/dima/Documents/Predator11/agents')

from supervisor import ProductionSupervisor, TaskType

async def test_all_26_agents():
    """–¢–µ—Å—Ç—É—î –í–°–Ü 26 –∞–≥–µ–Ω—Ç—ñ–≤ –Ω–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –Ω–æ–≤–æ—ó –∫–æ–Ω–∫—É—Ä—Å–Ω–æ—ó –ª–æ–≥—ñ–∫–∏"""
    
    supervisor = ProductionSupervisor()
    
    # –í–°–Ü–• 26 –∞–≥–µ–Ω—Ç—ñ–≤ –∑ —ó—Ö–Ω—ñ–º–∏ —Å–ø–µ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è–º–∏
    all_agents = [
        ("Anomaly", TaskType.REAL_TIME_DETECTION, "–í–∏—è–≤–ª–µ–Ω–Ω—è –∞–Ω–æ–º–∞–ª—ñ–π"),
        ("Arbiter", TaskType.DECISION_ARBITRATION, "–ê—Ä–±—ñ—Ç—Ä–∞–∂ —Ä—ñ—à–µ–Ω—å"),
        ("AutoHeal", TaskType.CODE_GENERATION, "–°–∞–º–æ–≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –∫–æ–¥—É"),
        ("BillingGate", TaskType.FINANCIAL_ANALYSIS, "–§—ñ–Ω–∞–Ω—Å–æ–≤–∏–π –∞–Ω–∞–ª—ñ–∑"),
        ("ChiefOrchestrator", TaskType.CRITICAL_ORCHESTRATION, "–ì–æ–ª–æ–≤–Ω–∏–π –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä"),
        ("ComplianceMonitor", TaskType.COMPLIANCE_MONITORING, "–ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ—Å—Ç—ñ"),
        ("DataQuality", TaskType.HIGH_LOAD_ANALYSIS, "–ê–Ω–∞–ª—ñ–∑ —è–∫–æ—Å—Ç—ñ –¥–∞–Ω–∏—Ö"),
        ("DatasetIngest", TaskType.FAST_PROCESSING, "–ü–æ–≥–ª–∏–Ω–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö"),
        ("ETLOrchestrator", TaskType.DATA_TRANSFORMATION, "ETL –ø—Ä–æ—Ü–µ—Å–∏"),
        ("Embedding", TaskType.EMBEDDINGS, "–í–µ–∫—Ç–æ—Ä–Ω—ñ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—è"),
        ("Forecast", TaskType.PREDICTIVE_ANALYTICS, "–ü—Ä–æ–≥–Ω–æ–∑—É–≤–∞–Ω–Ω—è"),
        ("GraphBuilder", TaskType.GRAPH_ANALYSIS, "–ü–æ–±—É–¥–æ–≤–∞ –≥—Ä–∞—Ñ—ñ–≤"),
        ("Indexer", TaskType.INDEXING_SEARCH, "–Ü–Ω–¥–µ–∫—Å–∞—Ü—ñ—è —Ç–∞ –ø–æ—à—É–∫"),
        ("ModelRouter", TaskType.CRITICAL_ROUTING, "–ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü—ñ—è –º–æ–¥–µ–ª–µ–π"),
        ("NexusGuide", TaskType.USER_ASSISTANCE, "–î–æ–ø–æ–º–æ–≥–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º"),
        ("OSINTCrawler", TaskType.WEB_INTELLIGENCE, "–í–µ–±-—Ä–æ–∑–≤—ñ–¥–∫–∞"),
        ("PIIGuardian", TaskType.PRIVACY_PROTECTION, "–ó–∞—Ö–∏—Å—Ç –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—ñ"),
        ("PerformanceOptimizer", TaskType.PERFORMANCE_OPTIMIZATION, "–û–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ"),
        ("QueryPlanner", TaskType.CRITICAL_PLANNING, "–ü–ª–∞–Ω—É–≤–∞–Ω–Ω—è –∑–∞–ø–∏—Ç—ñ–≤"),
        ("RedTeam", TaskType.SECURITY_TESTING, "–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –±–µ–∑–ø–µ–∫–∏"),
        ("ReportExport", TaskType.DOCUMENT_GENERATION, "–ï–∫—Å–ø–æ—Ä—Ç –∑–≤—ñ—Ç—ñ–≤"),
        ("SchemaMapper", TaskType.SCHEMA_ANALYSIS, "–ê–Ω–∞–ª—ñ–∑ —Å—Ö–µ–º"),
        ("SelfDiagnosis", TaskType.SYSTEM_DIAGNOSTICS, "–°–∞–º–æ–¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞"),
        ("SelfImprovement", TaskType.SELF_OPTIMIZATION, "–°–∞–º–æ–≤–¥–æ—Å–∫–æ–Ω–∞–ª–µ–Ω–Ω—è"),
        ("Simulator", TaskType.SIMULATION, "–°–∏–º—É–ª—è—Ü—ñ—è —Å—Ü–µ–Ω–∞—Ä—ñ—ó–≤"),
        ("SyntheticData", TaskType.DATA_GENERATION, "–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Å–∏–Ω—Ç–µ—Ç–∏—á–Ω–∏—Ö –¥–∞–Ω–∏—Ö")
    ]
    
    print("üîç –¢–ï–°–¢–£–í–ê–ù–ù–Ø –í–°–Ü–• 26 –ê–ì–ï–ù–¢–Ü–í –ù–ê –í–ò–ö–û–†–ò–°–¢–ê–ù–ù–Ø –ù–û–í–û–á –õ–û–ì–Ü–ö–ò")
    print("=" * 70)
    
    results = []
    competition_count = 0
    arbitration_count = 0
    
    for i, (agent_id, task_type, description) in enumerate(all_agents, 1):
        print(f"\nü§ñ [{i}/26] –¢–µ—Å—Ç—É—é –∞–≥–µ–Ω—Ç–∞: {agent_id}")
        print(f"   üìù –°–ø–µ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è: {description}")
        
        try:
            # –¢–µ—Å—Ç—É—î–º–æ –∞–≥–µ–Ω—Ç–∞
            result = await supervisor.handle_agent_request(
                agent_id, 
                f"–¢–µ—Å—Ç–æ–≤–µ –∑–∞–≤–¥–∞–Ω–Ω—è –¥–ª—è {description.lower()}", 
                task_type
            )
            
            if result["success"]:
                print(f"   ‚úÖ –ê–≥–µ–Ω—Ç –ø—Ä–∞—Ü—é—î!")
                print(f"   üèÜ –ü–µ—Ä–µ–º–æ–∂–µ—Ü—å: {result.get('winner_model', 'N/A')}")
                print(f"   üìä –Ø–∫—ñ—Å—Ç—å: {result.get('quality_score', 0):.3f}")
                print(f"   ‚ö° –õ–∞—Ç–µ–Ω—Ç–Ω—ñ—Å—Ç—å: {result.get('latency_ms', 0):.1f}ms")
                
                results.append({
                    "agent": agent_id,
                    "status": "‚úÖ SUCCESS",
                    "winner": result.get('winner_model', 'N/A'),
                    "quality": result.get('quality_score', 0),
                    "latency": result.get('latency_ms', 0),
                    "description": description
                })
            else:
                print(f"   ‚ùå –ê–≥–µ–Ω—Ç –ø—Ä–æ–≤–∞–ª–∏–≤ —Ç–µ—Å—Ç: {result.get('error', 'Unknown error')}")
                results.append({
                    "agent": agent_id,
                    "status": "‚ùå FAILED", 
                    "error": result.get('error', 'Unknown'),
                    "description": description
                })
                
        except Exception as e:
            print(f"   üí• –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {str(e)}")
            results.append({
                "agent": agent_id,
                "status": "üí• ERROR",
                "error": str(e),
                "description": description
            })
    
    # –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    competition_count = supervisor.metrics['successful_competitions'] 
    arbitration_count = supervisor.metrics['arbitrations_needed']
    
    # –ü—ñ–¥—Å—É–º–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
    print(f"\nüìä –ü–Ü–î–°–£–ú–û–ö –¢–ï–°–¢–£–í–ê–ù–ù–Ø –í–°–Ü–• 26 –ê–ì–ï–ù–¢–Ü–í")
    print("=" * 70)
    
    successful = len([r for r in results if "SUCCESS" in r["status"]])
    failed = len([r for r in results if "FAILED" in r["status"]])
    errors = len([r for r in results if "ERROR" in r["status"]])
    
    print(f"‚úÖ –£—Å–ø—ñ—à–Ω—ñ –∞–≥–µ–Ω—Ç–∏: {successful}/26")
    print(f"‚ùå –ü—Ä–æ–≤–∞–ª—å–Ω—ñ –∞–≥–µ–Ω—Ç–∏: {failed}/26")  
    print(f"üí• –ü–æ–º–∏–ª–∫–∏: {errors}/26")
    print(f"üèÜ –ü—Ä–æ–≤–µ–¥–µ–Ω–æ –∫–æ–Ω–∫—É—Ä—Å—ñ–≤: {competition_count}")
    print(f"‚öñÔ∏è –ü–æ—Ç—Ä—ñ–±–Ω–æ –∞—Ä–±—ñ—Ç—Ä–∞–∂—É: {arbitration_count}")
    
    # –ö–∞—Ç–µ–≥–æ—Ä—ñ—ó –∞–≥–µ–Ω—Ç—ñ–≤
    categories = {}
    for result in results:
        if "SUCCESS" in result["status"]:
            category = "–£—Å–ø—ñ—à–Ω—ñ"
        elif "FAILED" in result["status"]:
            category = "–ü—Ä–æ–≤–∞–ª—å–Ω—ñ"
        else:
            category = "–ó –ø–æ–º–∏–ª–∫–∞–º–∏"
            
        if category not in categories:
            categories[category] = []
        categories[category].append(result)
    
    # –î–µ—Ç–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è–º
    for category, agents in categories.items():
        print(f"\nüìã {category.upper()} –ê–ì–ï–ù–¢–ò ({len(agents)}):")
        for agent in agents:
            if "SUCCESS" in agent["status"]:
                print(f"   ‚úÖ {agent['agent']}: {agent['quality']:.3f} —è–∫–æ—Å—Ç—ñ, {agent['latency']:.0f}ms")
            else:
                error = agent.get('error', 'Unknown')
                print(f"   ‚ùå {agent['agent']}: {error[:50]}...")
    
    # –¢–û–ü-10 –Ω–∞–π–∫—Ä–∞—â–∏—Ö –∞–≥–µ–Ω—Ç—ñ–≤
    if successful > 0:
        print(f"\nüèÜ –¢–û–ü-10 –ù–ê–ô–ö–†–ê–©–ò–• –ê–ì–ï–ù–¢–Ü–í:")
        successful_results = [r for r in results if "SUCCESS" in r["status"]]
        successful_results.sort(key=lambda x: x["quality"], reverse=True)
        
        for i, result in enumerate(successful_results[:10], 1):
            print(f"{i:2d}. {result['agent']:<20}: {result['quality']:.3f} —è–∫–æ—Å—Ç—ñ, {result['latency']:.0f}ms - {result['description']}")
    
    # –°–∏—Å—Ç–µ–º–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print(f"\nüîß –°–ò–°–¢–ï–ú–ù–ê –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    status = supervisor.get_system_status()
    print(f"   üìä –°–∏—Å—Ç–µ–º–Ω–∏–π —Å—Ç–∞—Ç—É—Å: {status['system_health']}")
    print(f"   üå°Ô∏è –¢–µ—Ä–º–∞–ª—å–Ω–∏–π —Å—Ç–∞–Ω: {status['thermal_status']}")
    print(f"   üí∞ –í–∞—Ä—Ç—ñ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü—ñ–π: $0.00 (100% –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–æ)")
    
    # –ê–Ω–∞–ª—ñ–∑ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
    if successful > 0:
        avg_quality = sum([r['quality'] for r in results if "SUCCESS" in r["status"]]) / successful
        avg_latency = sum([r['latency'] for r in results if "SUCCESS" in r["status"]]) / successful
        
        print(f"\nüìà –ü–†–û–î–£–ö–¢–ò–í–ù–Ü–°–¢–¨:")
        print(f"   üéØ –°–µ—Ä–µ–¥–Ω—è —è–∫—ñ—Å—Ç—å: {avg_quality:.3f}/1.000")
        print(f"   ‚ö° –°–µ—Ä–µ–¥–Ω—è –ª–∞—Ç–µ–Ω—Ç–Ω—ñ—Å—Ç—å: {avg_latency:.0f}ms")
        print(f"   üèÜ –°–ø—ñ–≤–≤—ñ–¥–Ω–æ—à–µ–Ω–Ω—è –∫–æ–Ω–∫—É—Ä—Å/–∞—Ä–±—ñ—Ç—Ä–∞–∂: {arbitration_count}/{competition_count}")
        print(f"   üîÑ Fallback –∞–∫—Ç–∏–≤–∞—Ü—ñ–π: {supervisor.metrics['failovers']}")
    
    # –§—ñ–Ω–∞–ª—å–Ω–∏–π –≤–∏—Å–Ω–æ–≤–æ–∫
    print(f"\nüéØ –§–Ü–ù–ê–õ–¨–ù–ò–ô –í–ò–°–ù–û–í–û–ö:")
    if successful == 26:
        print(f"   üéâ –í–°–Ü 26 –ê–ì–ï–ù–¢–Ü–í –í–ò–ö–û–†–ò–°–¢–û–í–£–Æ–¢–¨ –ù–û–í–£ –°–ö–õ–ê–î–ù–£ –õ–û–ì–Ü–ö–£!")
        print(f"   ‚úÖ 100% —É—Å–ø—ñ—à–Ω—ñ—Å—Ç—å - —Å–∏—Å—Ç–µ–º–∞ –ø—Ä–∞—Ü—é—î —ñ–¥–µ–∞–ª—å–Ω–æ")
        print(f"   üèÜ –ö–æ–Ω–∫—É—Ä—Å–Ω–∞ —Å–∏—Å—Ç–µ–º–∞ –∞–∫—Ç–∏–≤–Ω–∞ –Ω–∞ –≤—Å—ñ—Ö –∞–≥–µ–Ω—Ç–∞—Ö")
        print(f"   ‚öñÔ∏è –ê—Ä–±—ñ—Ç—Ä–∞–∂ —Ñ—É–Ω–∫—Ü—ñ–æ–Ω—É—î –ø—Ä–∏ –ø–æ—Ç—Ä–µ–±—ñ")
        print(f"   üõ°Ô∏è –¢–µ—Ä–º–∞–ª—å–Ω–∏–π –∑–∞—Ö–∏—Å—Ç –∞–∫—Ç–∏–≤–Ω–∏–π")
        print(f"   üí∞ –ü–æ–≤–Ω—ñ—Å—Ç—é –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∞ –µ–∫—Å–ø–ª—É–∞—Ç–∞—Ü—ñ—è")
        print(f"   üöÄ –°–ò–°–¢–ï–ú–ê –ì–û–¢–û–í–ê –î–û –ü–û–í–ù–û–ú–ê–°–®–¢–ê–ë–ù–û–ì–û –ü–†–û–î–ê–ö–®–ù!")
        
    elif successful > 20:
        print(f"   ‚úÖ {successful}/26 –∞–≥–µ–Ω—Ç—ñ–≤ –ø—Ä–∞—Ü—é—é—Ç—å - –≤—ñ–¥–º—ñ–Ω–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç!")
        print(f"   üîß {26-successful} –∞–≥–µ–Ω—Ç—ñ–≤ –ø–æ—Ç—Ä–µ–±—É—é—Ç—å –º—ñ–Ω—ñ–º–∞–ª—å–Ω–∏—Ö –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å")
        print(f"   üéØ –°–∏—Å—Ç–µ–º–∞ –º–∞–π–∂–µ –≥–æ—Ç–æ–≤–∞ –¥–æ –ø—Ä–æ–¥–∞–∫—à–Ω")
        
    elif successful > 15:
        print(f"   ‚ö†Ô∏è {successful}/26 –∞–≥–µ–Ω—Ç—ñ–≤ –ø—Ä–∞—Ü—é—é—Ç—å - –¥–æ–±—Ä–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç")
        print(f"   üîß {26-successful} –∞–≥–µ–Ω—Ç—ñ–≤ –ø–æ—Ç—Ä–µ–±—É—é—Ç—å —É–≤–∞–≥–∏")
        print(f"   üõ†Ô∏è –ü–æ—Ç—Ä—ñ–±–Ω—ñ –¥–æ–¥–∞—Ç–∫–æ–≤—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è")
        
    else:
        print(f"   ‚ùå –¢—ñ–ª—å–∫–∏ {successful}/26 –∞–≥–µ–Ω—Ç—ñ–≤ –ø—Ä–∞—Ü—é—é—Ç—å")
        print(f"   üö® –°–∏—Å—Ç–µ–º–∞ –ø–æ—Ç—Ä–µ–±—É—î —Å–µ—Ä–π–æ–∑–Ω–æ–≥–æ –Ω–∞–ª–∞–≥–æ–¥–∂–µ–Ω–Ω—è")
        print(f"   üîß –ö—Ä–∏—Ç–∏—á–Ω—ñ –ø—Ä–æ–±–ª–µ–º–∏ –∑ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—î—é")

if __name__ == "__main__":
    asyncio.run(test_all_26_agents())
