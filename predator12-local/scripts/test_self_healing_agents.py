#!/usr/bin/env python3
"""
üè• –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∞–≥–µ–Ω—Ç—ñ–≤ —Å–∞–º–æ–≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è
–ü–µ—Ä–µ–≤—ñ—Ä—è—î —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω—ñ—Å—Ç—å –∞–≥–µ–Ω—Ç—ñ–≤ –±–µ–∑ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ–≤
"""

import asyncio
import aiohttp
import docker
import json
import logging
from datetime import datetime
from typing import List, Dict, Any

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class SimpleHealthChecker:
    """–ü—Ä–æ—Å—Ç–∏–π –ø–µ—Ä–µ–≤—ñ—Ä–Ω–∏–∫ –∑–¥–æ—Ä–æ–≤'—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ–≤"""
    
    def __init__(self):
        self.client = docker.from_env()
    
    async def check_containers(self) -> List[Dict[str, Any]]:
        """–ü–µ—Ä–µ–≤—ñ—Ä—è—î —Å—Ç–∞–Ω –≤—Å—ñ—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ–≤"""
        containers_info = []
        
        try:
            containers = self.client.containers.list(all=True)
            
            for container in containers:
                try:
                    # –û—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
                    info = {
                        'name': container.name,
                        'status': container.status,
                        'health': getattr(container.attrs.get('State', {}), 'Health', {}).get('Status', 'no-health-check'),
                        'image': container.image.tags[0] if container.image.tags else 'unknown',
                        'created': container.attrs['Created'],
                        'ports': container.attrs.get('NetworkSettings', {}).get('Ports', {}),
                        'needs_healing': False
                    }
                    
                    # –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è, —á–∏ –ø–æ—Ç—Ä–µ–±—É—î –ª—ñ–∫—É–≤–∞–Ω–Ω—è
                    if container.status in ['exited', 'dead', 'paused']:
                        info['needs_healing'] = True
                        info['healing_action'] = 'restart'
                    elif info['health'] == 'unhealthy':
                        info['needs_healing'] = True
                        info['healing_action'] = 'health_check_restart'
                    
                    containers_info.append(info)
                    
                except Exception as e:
                    logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª—ñ–∑—ñ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ {container.name}: {e}")
                    
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Docker: {e}")
            
        return containers_info
    
    async def heal_container(self, container_name: str, action: str) -> bool:
        """–í–∏–∫–æ–Ω—É—î –¥—ñ—ó —Å–∞–º–æ–≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –¥–ª—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞"""
        try:
            container = self.client.containers.get(container_name)
            
            if action == 'restart':
                logger.info(f"üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—é –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä {container_name}")
                container.restart()
                return True
                
            elif action == 'health_check_restart':
                logger.info(f"üè• –í–∏–∫–æ–Ω—É—é health check restart –¥–ª—è {container_name}")
                container.restart()
                return True
                
        except docker.errors.NotFound:
            logger.error(f"‚ùå –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä {container_name} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
            return False
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ª—ñ–∫—É–≤–∞–Ω–Ω—ñ {container_name}: {e}")
            return False
            
        return False

class SimpleMonitor:
    """–ü—Ä–æ—Å—Ç–∏–π –º–æ–Ω—ñ—Ç–æ—Ä —Å–∏—Å—Ç–µ–º–∏"""
    
    async def check_services(self) -> List[Dict[str, Any]]:
        """–ü–µ—Ä–µ–≤—ñ—Ä—è—î –¥–æ—Å—Ç—É–ø–Ω—ñ—Å—Ç—å —Å–µ—Ä–≤—ñ—Å—ñ–≤ —á–µ—Ä–µ–∑ HTTP"""
        services = [
            {'name': 'backend', 'url': 'http://localhost:8000/health', 'port': 8000},
            {'name': 'frontend', 'url': 'http://localhost:3001/health', 'port': 3001},
            {'name': 'grafana', 'url': 'http://localhost:3001/api/health', 'port': 3001},
            {'name': 'prometheus', 'url': 'http://localhost:9090/-/healthy', 'port': 9090},
            {'name': 'opensearch', 'url': 'http://localhost:9200/_cluster/health', 'port': 9200},
        ]
        
        results = []
        
        async with aiohttp.ClientSession() as session:
            for service in services:
                try:
                    async with session.get(service['url'], timeout=5) as response:
                        status = {
                            'name': service['name'],
                            'url': service['url'],
                            'status': 'healthy' if response.status < 400 else 'unhealthy',
                            'status_code': response.status,
                            'response_time': 0,  # –°–ø—Ä–æ—â–µ–Ω–æ
                            'needs_healing': response.status >= 400
                        }
                        results.append(status)
                        
                except asyncio.TimeoutError:
                    results.append({
                        'name': service['name'],
                        'url': service['url'],
                        'status': 'timeout',
                        'status_code': 0,
                        'response_time': 5000,
                        'needs_healing': True
                    })
                    
                except Exception as e:
                    results.append({
                        'name': service['name'],
                        'url': service['url'],
                        'status': 'error',
                        'error': str(e),
                        'needs_healing': True
                    })
        
        return results

async def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫–∞—é —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∞–≥–µ–Ω—Ç—ñ–≤ —Å–∞–º–æ–≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è")
    
    # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è
    health_checker = SimpleHealthChecker()
    monitor = SimpleMonitor()
    
    logger.info("üìã –ü–µ—Ä–µ–≤—ñ—Ä—è—é —Å—Ç–∞–Ω –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ–≤...")
    containers = await health_checker.check_containers()
    
    print(f"\n{'='*60}")
    print("üê≥ –°–¢–ê–ù –ö–û–ù–¢–ï–ô–ù–ï–†–Ü–í")
    print(f"{'='*60}")
    
    unhealthy_containers = []
    
    for container in containers:
        status_icon = "‚úÖ" if container['status'] == 'running' and not container['needs_healing'] else "‚ùå"
        health_icon = "üü¢" if container['health'] in ['healthy', 'no-health-check'] else "üî¥"
        
        print(f"{status_icon} {health_icon} {container['name']:<30} | {container['status']:<10} | {container['health']}")
        
        if container['needs_healing']:
            unhealthy_containers.append(container)
    
    if unhealthy_containers:
        print(f"\nüö® –ó–ù–ê–ô–î–ï–ù–û {len(unhealthy_containers)} –ö–û–ù–¢–ï–ô–ù–ï–†–Ü–í, –©–û –ü–û–¢–†–ï–ë–£–Æ–¢–¨ –õ–Ü–ö–£–í–ê–ù–ù–Ø:")
        for container in unhealthy_containers:
            print(f"  - {container['name']}: {container.get('healing_action', 'unknown')}")
    
    logger.info("üåê –ü–µ—Ä–µ–≤—ñ—Ä—è—é –¥–æ—Å—Ç—É–ø–Ω—ñ—Å—Ç—å —Å–µ—Ä–≤—ñ—Å—ñ–≤...")
    services = await monitor.check_services()
    
    print(f"\n{'='*60}")
    print("üåê –°–¢–ê–ù –°–ï–†–í–Ü–°–Ü–í")
    print(f"{'='*60}")
    
    unhealthy_services = []
    
    for service in services:
        status_icon = "‚úÖ" if service['status'] == 'healthy' else "‚ùå"
        status_code = service.get('status_code', 'N/A')
        
        print(f"{status_icon} {service['name']:<20} | {service['status']:<10} | HTTP {status_code}")
        
        if service['needs_healing']:
            unhealthy_services.append(service)
    
    # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è —Å–∞–º–æ–≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è
    if unhealthy_containers:
        print(f"\nüè• –î–ï–ú–û–ù–°–¢–†–ê–¶–Ü–Ø –°–ê–ú–û–í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø")
        print(f"{'='*60}")
        
        for container in unhealthy_containers[:2]:  # –û–±–º–µ–∂—É—î–º–æ –¥–æ 2 –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ–≤
            if container.get('healing_action'):
                logger.info(f"üîß –°–ø—Ä–æ–±–∞ –ª—ñ–∫—É–≤–∞–Ω–Ω—è: {container['name']}")
                success = await health_checker.heal_container(
                    container['name'], 
                    container['healing_action']
                )
                
                if success:
                    print(f"‚úÖ –£—Å–ø—ñ—à–Ω–æ –≤–∏–ª—ñ–∫–æ–≤–∞–Ω–æ: {container['name']}")
                else:
                    print(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–ª—ñ–∫–æ–≤–∞—Ç–∏: {container['name']}")
    
    print(f"\n{'='*60}")
    print("üìä –ü–Ü–î–°–£–ú–û–ö")
    print(f"{'='*60}")
    print(f"–ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ–≤: {len(containers)}")
    print(f"–ü–æ—Ç—Ä–µ–±—É—é—Ç—å –ª—ñ–∫—É–≤–∞–Ω–Ω—è: {len(unhealthy_containers)}")
    print(f"–ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å–µ—Ä–≤—ñ—Å—ñ–≤: {len(services)}")
    print(f"–ù–µ–¥–æ—Å—Ç—É–ø–Ω—ñ —Å–µ—Ä–≤—ñ—Å–∏: {len(unhealthy_services)}")
    
    if not unhealthy_containers and not unhealthy_services:
        print("üéâ –í–°–Ü –°–ò–°–¢–ï–ú–ò –ü–†–ê–¶–Æ–Æ–¢–¨ –ù–û–†–ú–ê–õ–¨–ù–û!")
    else:
        print("‚ö†Ô∏è  –í–ò–Ø–í–õ–ï–ù–Ü –ü–†–û–ë–õ–ï–ú–ò, –Ø–ö–Ü –ü–û–¢–†–ï–ë–£–Æ–¢–¨ –£–í–ê–ì–ò")

if __name__ == "__main__":
    asyncio.run(main())
