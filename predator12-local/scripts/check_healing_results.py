#!/usr/bin/env python3
"""
–®–≤–∏–¥–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ —Ä–æ–±–æ—Ç–∏ –∞–≥–µ–Ω—Ç—ñ–≤ —Å–∞–º–æ–≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è
"""

import asyncio
import json
import sys
import time
from datetime import datetime
from pathlib import Path

# –î–æ–¥–∞—î–º–æ —à–ª—è—Ö –¥–æ —Å–∫—Ä–∏–ø—Ç—ñ–≤
sys.path.append(str(Path(__file__).parent))

async def check_healing_agents():
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ —Ä–æ–±–æ—Ç–∏ –∞–≥–µ–Ω—Ç—ñ–≤ —Å–∞–º–æ–≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è"""
    
    print("ü§ñ –†–ï–ó–£–õ–¨–¢–ê–¢–ò –†–û–ë–û–¢–ò –ê–ì–ï–ù–¢–Ü–í –°–ê–ú–û–í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø")
    print("=" * 60)
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ª–æ–≥–∏ –∞–≥–µ–Ω—Ç—ñ–≤
    log_dir = Path("/Users/dima/Documents/Predator11/logs")
    
    if log_dir.exists():
        print(f"\nüìÅ –ü–µ—Ä–µ–≤—ñ—Ä—è—é –ª–æ–≥–∏ –≤ {log_dir}...")
        
        # –®—É–∫–∞—î–º–æ –ª–æ–≥–∏ –∞–≥–µ–Ω—Ç—ñ–≤ —Å–∞–º–æ–≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è
        healing_logs = [
            "self_diagnosis.log",
            "selfdiagnosisagent.log", 
            "autoheal.log",
            "self_improvement.log",
            "performance_optimizer.log"
        ]
        
        found_activities = []
        
        for log_file in healing_logs:
            log_path = log_dir / "agents" / log_file
            if log_path.exists():
                print(f"   ‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ: {log_file}")
                try:
                    with open(log_path, 'r') as f:
                        lines = f.readlines()
                        if lines:
                            last_line = lines[-1].strip()
                            found_activities.append({
                                'agent': log_file.replace('.log', ''),
                                'last_activity': last_line,
                                'lines_count': len(lines)
                            })
                except Exception as e:
                    print(f"   ‚ùå –ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è {log_file}: {e}")
            else:
                print(f"   ‚ùì –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ: {log_file}")
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
    print(f"\nüß™ –†–ï–ó–£–õ–¨–¢–ê–¢–ò –û–°–¢–ê–ù–ù–¨–û–ì–û –¢–ï–°–¢–£–í–ê–ù–ù–Ø –ê–ì–ï–ù–¢–Ü–í:")
    print("-" * 50)
    
    try:
        # –Ü–º–ø–æ—Ä—Ç—É—î–º–æ —Ç–∞ –∑–∞–ø—É—Å–∫–∞—î–º–æ —à–≤–∏–¥–∫–∏–π —Ç–µ—Å—Ç
        from production_model_distribution import ProductionSupervisor
        
        supervisor = ProductionSupervisor()
        
        # –¢–µ—Å—Ç—É—î–º–æ –∫–ª—é—á–æ–≤—ñ –∞–≥–µ–Ω—Ç–∏ —Å–∞–º–æ–≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è
        agents_to_test = [
            'SelfDiagnosis',
            'AutoHeal', 
            'SelfImprovement',
            'PerformanceOptimizer'
        ]
        
        results = {}
        
        for agent_name in agents_to_test:
            try:
                # –®–≤–∏–¥–∫–∏–π —Ç–µ—Å—Ç –∞–≥–µ–Ω—Ç–∞
                start_time = time.time()
                
                result = supervisor.process_request(
                    agent_name, 
                    'quick_health_check', 
                    {'test_type': 'diagnostic'}
                )
                
                end_time = time.time()
                latency = (end_time - start_time) * 1000
                
                if result.get('success'):
                    results[agent_name] = {
                        'status': '‚úÖ –ü—Ä–∞—Ü—é—î',
                        'model': result.get('winner_model', 'Unknown'),
                        'quality': result.get('quality_score', 0.0),
                        'latency': latency,
                        'recommendations': len(result.get('recommendations', []))
                    }
                    
                    print(f"   {agent_name:20} | ‚úÖ | {result.get('winner_model', 'N/A')[:30]:30} | {result.get('quality_score', 0.0):.3f}")
                else:
                    results[agent_name] = {
                        'status': '‚ùå –ü–æ–º–∏–ª–∫–∞',
                        'error': result.get('error', 'Unknown error')
                    }
                    print(f"   {agent_name:20} | ‚ùå | {'ERROR: ' + str(result.get('error', 'Unknown'))[:30]:30} | 0.000")
                    
            except Exception as e:
                results[agent_name] = {
                    'status': 'üí• –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞', 
                    'error': str(e)
                }
                print(f"   {agent_name:20} | üí• | {'CRASH: ' + str(e)[:30]:30} | 0.000")
        
        # –ü—ñ–¥—Å—É–º–æ–∫
        successful = sum(1 for r in results.values() if '‚úÖ' in r['status'])
        total = len(results)
        
        print(f"\nüìä –ü–Ü–î–°–£–ú–û–ö:")
        print(f"   –£—Å–ø—ñ—à–Ω–∏—Ö –∞–≥–µ–Ω—Ç—ñ–≤: {successful}/{total}")
        print(f"   –í—ñ–¥—Å–æ—Ç–æ–∫ —É—Å–ø—ñ—Ö—É: {(successful/total*100):.1f}%")
        
        if successful > 0:
            avg_quality = sum(r.get('quality', 0.0) for r in results.values() if '‚úÖ' in r['status']) / successful
            print(f"   –°–µ—Ä–µ–¥–Ω—è —è–∫—ñ—Å—Ç—å: {avg_quality:.3f}")
        
        print(f"\nüéØ –í–ò–°–ù–û–í–ö–ò:")
        if successful == total:
            print("   üöÄ –í–°–Ü –ê–ì–ï–ù–¢–ò –°–ê–ú–û–í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø –ü–û–í–ù–Ü–°–¢–Æ –§–£–ù–ö–¶–Ü–û–ù–ê–õ–¨–ù–Ü!")
            print("   üí° –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≤–∏—è–≤–ª—è—Ç–∏ —Ç–∞ —É—Å—É–≤–∞—Ç–∏ –ø—Ä–æ–±–ª–µ–º–∏")
        elif successful > total // 2:
            print(f"   ‚ö†Ô∏è –°–ò–°–¢–ï–ú–ê –ß–ê–°–¢–ö–û–í–û –§–£–ù–ö–¶–Ü–û–ù–ê–õ–¨–ù–ê ({successful}/{total})")
            print("   üîß –î–µ—è–∫—ñ –∞–≥–µ–Ω—Ç–∏ –ø–æ—Ç—Ä–µ–±—É—é—Ç—å –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è")  
        else:
            print("   ‚ùå –ö–†–ò–¢–ò–ß–ù–Ü –ü–†–û–ë–õ–ï–ú–ò –ó –ê–ì–ï–ù–¢–ê–ú–ò –°–ê–ú–û–í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø")
            print("   üÜò –ü–æ—Ç—Ä—ñ–±–Ω–∞ —Ä—É—á–Ω–∞ –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Ç–∞ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è")
            
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è: {e}")
        print("üîß –ê–≥–µ–Ω—Ç–∏ —Å–∞–º–æ–≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è")
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ–≤
    print(f"\nüê≥ –°–¢–ê–ù –ö–û–ù–¢–ï–ô–ù–ï–†–ù–û–á –Ü–ù–§–†–ê–°–¢–†–£–ö–¢–£–†–ò:")
    try:
        import subprocess
        result = subprocess.run(['docker', 'ps', '--format', 'table {{.Names}}\\t{{.Status}}'], 
                              capture_output=True, text=True)
        
        if result.returncode == 0:
            lines = result.stdout.strip().split('\n')[1:]  # Skip header
            containers = len(lines)
            running = sum(1 for line in lines if 'Up' in line)
            
            print(f"   –í—Å—å–æ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ–≤: {containers}")
            print(f"   –ó–∞–ø—É—â–µ–Ω–∏—Ö: {running}")
            print(f"   –í—ñ–¥—Å–æ—Ç–æ–∫ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ: {(running/containers*100):.1f}%")
            
            if running == containers:
                print("   ‚úÖ –í—Å—è —ñ–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–∞—Ü—é—î —Å—Ç–∞–±—ñ–ª—å–Ω–æ")
            else:
                print(f"   ‚ö†Ô∏è {containers - running} –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ–≤ –ø–æ—Ç—Ä–µ–±—É—é—Ç—å —É–≤–∞–≥–∏")
        
    except Exception as e:
        print(f"   ‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ–≤: {e}")
    
    print(f"\nüïí –î–∞—Ç–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏: {datetime.now().strftime('%Y-%m-%d %H:%M:%S UTC')}")
    print("=" * 60)

if __name__ == "__main__":
    asyncio.run(check_healing_agents())
