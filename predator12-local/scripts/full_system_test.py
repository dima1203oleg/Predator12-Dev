#!/usr/bin/env python3
"""
–ü–æ–≤–Ω–∏–π —Ç–µ—Å—Ç —Å–∏—Å—Ç–µ–º–∏ Predator11 - –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤—Å—ñ—Ö –∞–≥–µ–Ω—Ç—ñ–≤ —Ç–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ–≤
"""

import requests
import time
import json
import subprocess
import sys
from datetime import datetime
from pathlib import Path

# –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –∞–≥–µ–Ω—Ç—ñ–≤
AGENTS = {
    "data-quality-agent": {
        "port": 8001,
        "endpoints": ["/health", "/api/validate"],
        "test_data": {"data": "test"}
    },
    "synthetic-agent": {
        "port": 8002, 
        "endpoints": ["/health", "/api/generate"],
        "test_data": {"type": "sample"}
    },
    "nlp-agent": {
        "port": 8003,
        "endpoints": ["/health", "/api/process"],
        "test_data": {"text": "test text"}
    },
    "security-privacy": {
        "port": 8004,
        "endpoints": ["/health", "/api/scan"],
        "test_data": {"content": "test content"}
    },
    "self-healing-agent": {
        "port": 8008,
        "endpoints": ["/health", "/api/heal"],
        "test_data": {"system": "test"}
    }
}

def check_agent_health(name, port):
    """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤'—è –∞–≥–µ–Ω—Ç–∞"""
    try:
        response = requests.get(f"http://localhost:{port}/health", timeout=5)
        if response.status_code == 200:
            print(f"‚úÖ {name}: OK")
            return True
        else:
            print(f"‚ùå {name}: HTTP {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå {name}: Connection failed - {str(e)}")
        return False

def test_docker_compose():
    """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ Docker Compose"""
    try:
        result = subprocess.run(["docker", "compose", "config"], 
                              capture_output=True, text=True, cwd=".")
        if result.returncode == 0:
            print("‚úÖ Docker Compose config: OK")
            return True
        else:
            print(f"‚ùå Docker Compose config: {result.stderr}")
            return False
    except Exception as e:
        print(f"‚ùå Docker Compose: {str(e)}")
        return False

def check_dockerfile_exists():
    """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ Dockerfile –¥–ª—è –∞–≥–µ–Ω—Ç—ñ–≤"""
    missing_files = []
    
    for agent_name in AGENTS.keys():
        dockerfile_path = Path(f"agents/{agent_name}/Dockerfile")
        requirements_path = Path(f"agents/{agent_name}/requirements.txt")
        
        if not dockerfile_path.exists():
            missing_files.append(str(dockerfile_path))
        if not requirements_path.exists():
            missing_files.append(str(requirements_path))
    
    if missing_files:
        print("‚ùå –í—ñ–¥—Å—É—Ç–Ω—ñ —Ñ–∞–π–ª–∏:")
        for file in missing_files:
            print(f"   - {file}")
        return False
    else:
        print("‚úÖ –í—Å—ñ Dockerfile —Ç–∞ requirements.txt –ø—Ä–∏—Å—É—Ç–Ω—ñ")
        return True

def check_docker_images():
    """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑—ñ–≤"""
    try:
        result = subprocess.run(["docker", "images", "--format", "{{.Repository}}:{{.Tag}}"], 
                              capture_output=True, text=True)
        images = result.stdout.split('\n')
        
        predator_images = [img for img in images if 'predator11' in img.lower()]
        
        if predator_images:
            print(f"‚úÖ Docker –æ–±—Ä–∞–∑–∏ –∑–Ω–∞–π–¥–µ–Ω–æ: {len(predator_images)}")
            for img in predator_images[:5]:  # –ü–æ–∫–∞–∑–∞—Ç–∏ –ø–µ—Ä—à—ñ 5
                print(f"   - {img}")
            return True
        else:
            print("‚ùå Docker –æ–±—Ä–∞–∑–∏ Predator11 –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
            return False
    except Exception as e:
        print(f"‚ùå –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑—ñ–≤: {str(e)}")
        return False

def run_full_test():
    """–ó–∞–ø—É—Å–∫ –ø–æ–≤–Ω–æ–≥–æ —Ç–µ—Å—Ç—É —Å–∏—Å—Ç–µ–º–∏"""
    print("üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–≤–Ω–æ–≥–æ —Ç–µ—Å—Ç—É —Å–∏—Å—Ç–µ–º–∏ Predator11")
    print("=" * 50)
    
    # 1. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ñ–∞–π–ª—ñ–≤
    print("\n1. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏—Ö —Ñ–∞–π–ª—ñ–≤:")
    files_ok = check_dockerfile_exists()
    
    # 2. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ Docker Compose
    print("\n2. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ Docker Compose:")
    compose_ok = test_docker_compose()
    
    # 3. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑—ñ–≤
    print("\n3. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑—ñ–≤:")
    images_ok = check_docker_images()
    
    # 4. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ –ø—Ä–æ–µ–∫—Ç—É
    print("\n4. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ –ø—Ä–æ–µ–∫—Ç—É:")
    key_directories = ["agents", "prometheus", "grafana", "backend-api", "frontend", "etl"]
    structure_ok = True
    
    for directory in key_directories:
        if Path(directory).exists():
            print(f"‚úÖ –î–∏—Ä–µ–∫—Ç–æ—Ä—ñ—è {directory}: OK")
        else:
            print(f"‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä—ñ—è {directory}: –í—ñ–¥—Å—É—Ç–Ω—è")
            structure_ok = False
    
    # 5. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ–π–Ω–∏—Ö —Ñ–∞–π–ª—ñ–≤
    print("\n5. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ–π–Ω–∏—Ö —Ñ–∞–π–ª—ñ–≤:")
    config_files = [
        "docker-compose.yml",
        "agents/registry.yaml", 
        "agents/policies.yaml",
        "observability/prometheus/prometheus.yml"
    ]
    
    config_ok = True
    for config_file in config_files:
        if Path(config_file).exists():
            print(f"‚úÖ {config_file}: OK")
        else:
            print(f"‚ùå {config_file}: –í—ñ–¥—Å—É—Ç–Ω—ñ–π")
            config_ok = False
    
    # 6. –ü—ñ–¥—Å—É–º–æ–∫
    print("\n" + "=" * 50)
    print("üìä –ü–Ü–î–°–£–ú–û–ö –¢–ï–°–¢–£–í–ê–ù–ù–Ø:")
    
    results = {
        "–§–∞–π–ª–∏ –∞–≥–µ–Ω—Ç—ñ–≤": files_ok,
        "Docker Compose": compose_ok, 
        "Docker –æ–±—Ä–∞–∑–∏": images_ok,
        "–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç—É": structure_ok,
        "–ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó": config_ok
    }
    
    all_ok = all(results.values())
    
    for test_name, result in results.items():
        status = "‚úÖ –ü–†–û–ô–î–ï–ù–û" if result else "‚ùå –ü–†–û–í–ê–õ–ï–ù–û"
        print(f"{test_name}: {status}")
    
    if all_ok:
        print("\nüéâ –í–°–Ü –¢–ï–°–¢–ò –ü–†–û–ô–î–ï–ù–û –£–°–ü–Ü–®–ù–û!")
        print("–°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –¥–æ —Ä–æ–∑–≥–æ—Ä—Ç–∞–Ω–Ω—è!")
        
        print("\n–î–ª—è –∑–∞–ø—É—Å–∫—É —Å–∏—Å—Ç–µ–º–∏ –≤–∏–∫–æ–Ω–∞–π—Ç–µ:")
        print("docker compose up -d")
        
        return True
    else:
        print("\n‚ùå –î–ï–Ø–ö–Ü –¢–ï–°–¢–ò –ü–†–û–í–ê–õ–ò–õ–ò–°–¨")
        print("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–ø—Ä–∞–≤—Ç–µ –ø–æ–º–∏–ª–∫–∏ –ø–µ—Ä–µ–¥ —Ä–æ–∑–≥–æ—Ä—Ç–∞–Ω–Ω—è–º")
        return False

if __name__ == "__main__":
    success = run_full_test()
    sys.exit(0 if success else 1)
