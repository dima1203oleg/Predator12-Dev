#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–∏–π —Ç–µ—Å—Ç –¥–ª—è –∑–∞–ø—É—Å–∫—É —Ç–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ –∞–≥–µ–Ω—Ç—ñ–≤
"""

import os
import sys
import time
import subprocess
import signal
from datetime import datetime
from pathlib import Path

class AgentTester:
    def __init__(self):
        self.project_root = Path("/Users/dima/Documents/Predator11")
        self.agents = {
            'AutoHeal': self.project_root / "agents/auto-heal/auto_heal_agent.py",
            'SelfImprovement': self.project_root / "agents/self-improvement/self_improvement_agent.py", 
            'SelfDiagnosis': self.project_root / "agents/self-diagnosis/self_diagnosis_agent.py"
        }
        self.processes = {}
        
    def setup_environment(self):
        """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∑–º—ñ–Ω–Ω–∏—Ö –æ—Ç–æ—á–µ–Ω–Ω—è"""
        os.environ.update({
            'REDIS_URL': 'redis://localhost:6379/0',
            'DATABASE_URL': 'postgresql://postgres:postgres@localhost:5432/predator11',
            'KAFKA_BROKERS': 'localhost:9092'
        })
        
    def check_services(self):
        """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ —Å–µ—Ä–≤—ñ—Å—ñ–≤"""
        print("üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å–µ—Ä–≤—ñ—Å—ñ–≤...")
        
        services = {
            'Redis': ('redis-cli', 'ping'),
            'PostgreSQL': ('pg_isready', '-h', 'localhost', '-p', '5432'),
        }
        
        available_services = []
        
        for service_name, cmd in services.items():
            try:
                result = subprocess.run(cmd, capture_output=True, timeout=5)
                if result.returncode == 0:
                    print(f"   ‚úÖ {service_name}: –î–û–°–¢–£–ü–ù–ò–ô")
                    available_services.append(service_name)
                else:
                    print(f"   ‚ùå {service_name}: –ù–ï–î–û–°–¢–£–ü–ù–ò–ô")
            except (subprocess.TimeoutExpired, FileNotFoundError):
                print(f"   ‚ùå {service_name}: –ù–ï–î–û–°–¢–£–ü–ù–ò–ô (–∫–æ–º–∞–Ω–¥–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞)")
                
        return available_services
    
    def start_agent(self, name, path):
        """–ó–∞–ø—É—Å–∫ –∞–≥–µ–Ω—Ç–∞"""
        print(f"ü§ñ –ó–∞–ø—É—Å–∫ {name}...")
        
        if not path.exists():
            print(f"   ‚ùå –§–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: {path}")
            return False
            
        try:
            # –ó–∞–ø—É—Å–∫ –∞–≥–µ–Ω—Ç–∞ –≤ –æ–∫—Ä–µ–º–æ–º—É –ø—Ä–æ—Ü–µ—Å—ñ
            process = subprocess.Popen([
                sys.executable, str(path)
            ], stdout=subprocess.PIPE, stderr=subprocess.PIPE, 
               cwd=path.parent)
            
            self.processes[name] = process
            print(f"   ‚úÖ –ó–∞–ø—É—â–µ–Ω–æ –∑ PID: {process.pid}")
            return True
            
        except Exception as e:
            print(f"   ‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É: {e}")
            return False
    
    def monitor_agents(self, duration=30):
        """–ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –∞–≥–µ–Ω—Ç—ñ–≤"""
        print(f"\nüìä –ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ ({duration} —Å–µ–∫—É–Ω–¥)...")
        
        start_time = time.time()
        
        while time.time() - start_time < duration:
            active_count = 0
            
            for name, process in self.processes.items():
                if process.poll() is None:  # –ü—Ä–æ—Ü–µ—Å —â–µ –∞–∫—Ç–∏–≤–Ω–∏–π
                    active_count += 1
                    
            print(f"\r   –ê–∫—Ç–∏–≤–Ω–∏—Ö –∞–≥–µ–Ω—Ç—ñ–≤: {active_count}/{len(self.processes)}", end='', flush=True)
            time.sleep(1)
            
        print()  # –ù–æ–≤–∏–π —Ä—è–¥–æ–∫
    
    def collect_results(self):
        """–ó–±—ñ—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è"""
        print("\nüìà –ó–±—ñ—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤...")
        
        results = {}
        
        for name, process in self.processes.items():
            if process.poll() is None:
                print(f"   ‚úÖ {name}: –ê–ö–¢–ò–í–ù–ò–ô (PID: {process.pid})")
                results[name] = 'active'
            else:
                print(f"   ‚ùå {name}: –ó–£–ü–ò–ù–ï–ù–ò–ô (–∫–æ–¥: {process.returncode})")
                results[name] = 'stopped'
                
                # –ü–æ–∫–∞–∑–∞—Ç–∏ –ø–æ–º–∏–ª–∫–∏ —è–∫—â–æ —î
                if process.stderr:
                    stderr = process.stderr.read().decode('utf-8', errors='ignore')
                    if stderr.strip():
                        print(f"      –ü–æ–º–∏–ª–∫–∞: {stderr[:100]}...")
        
        return results
    
    def check_logs(self):
        """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–∏—Ö –ª–æ–≥—ñ–≤"""
        print("\nüìù –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ª–æ–≥—ñ–≤...")
        
        log_locations = [
            self.project_root / "logs/agents",
            self.project_root / "logs/autoheal",
            Path("/tmp")
        ]
        
        found_logs = []
        
        for log_dir in log_locations:
            if log_dir.exists():
                for log_file in log_dir.glob("*.log"):
                    # –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —á–∏ —Ñ–∞–π–ª —Å—Ç–≤–æ—Ä–µ–Ω–æ –Ω–µ—â–æ–¥–∞–≤–Ω–æ
                    if time.time() - log_file.stat().st_mtime < 300:  # 5 —Ö–≤–∏–ª–∏–Ω
                        found_logs.append(log_file)
                        print(f"   üìÑ {log_file.name}: {log_file.stat().st_size} –±–∞–π—Ç")
        
        if not found_logs:
            print("   ‚ùå –ù–æ–≤–∏—Ö –ª–æ–≥—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
            
        return found_logs
    
    def cleanup(self):
        """–ó—É–ø–∏–Ω–∫–∞ –≤—Å—ñ—Ö –∞–≥–µ–Ω—Ç—ñ–≤"""
        print("\nüõë –ó—É–ø–∏–Ω–∫–∞ –∞–≥–µ–Ω—Ç—ñ–≤...")
        
        for name, process in self.processes.items():
            if process.poll() is None:
                print(f"   –ó—É–ø–∏–Ω—è—é {name}...")
                process.terminate()
                
                # –î–∞—Ç–∏ —á–∞—Å –Ω–∞ graceful shutdown
                try:
                    process.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    print(f"   –ü—Ä–∏–º—É—Å–æ–≤–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è {name}...")
                    process.kill()
                    process.wait()
    
    def run_test(self):
        """–ó–∞–ø—É—Å–∫ –ø–æ–≤–Ω–æ–≥–æ —Ç–µ—Å—Ç—É"""
        print("üöÄ PREDATOR11 AGENTS ACTIVITY TEST")
        print("=" * 50)
        print(f"–ß–∞—Å –∑–∞–ø—É—Å–∫—É: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        
        try:
            # 1. –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
            self.setup_environment()
            
            # 2. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å–µ—Ä–≤—ñ—Å—ñ–≤  
            available_services = self.check_services()
            
            # 3. –ó–∞–ø—É—Å–∫ –∞–≥–µ–Ω—Ç—ñ–≤
            print(f"\nü§ñ –ó–∞–ø—É—Å–∫ –∞–≥–µ–Ω—Ç—ñ–≤...")
            started_agents = 0
            
            for name, path in self.agents.items():
                if self.start_agent(name, path):
                    started_agents += 1
                    time.sleep(2)  # –ó–∞—Ç—Ä–∏–º–∫–∞ –º—ñ–∂ –∑–∞–ø—É—Å–∫–∞–º–∏
            
            if started_agents == 0:
                print("‚ùå –ñ–æ–¥–µ–Ω –∞–≥–µ–Ω—Ç –Ω–µ –±—É–ª–æ –∑–∞–ø—É—â–µ–Ω–æ!")
                return
            
            # 4. –ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥
            self.monitor_agents(30)
            
            # 5. –ó–±—ñ—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
            results = self.collect_results()
            
            # 6. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ª–æ–≥—ñ–≤
            logs = self.check_logs()
            
            # 7. –ü—ñ–¥—Å—É–º–æ–∫
            print(f"\nüìã –ü–Ü–î–°–£–ú–û–ö")
            print("=" * 30)
            print(f"–î–æ—Å—Ç—É–ø–Ω–∏—Ö —Å–µ—Ä–≤—ñ—Å—ñ–≤: {len(available_services)}")
            print(f"–ó–∞–ø—É—â–µ–Ω–∏—Ö –∞–≥–µ–Ω—Ç—ñ–≤: {started_agents}/{len(self.agents)}")
            
            active_agents = len([r for r in results.values() if r == 'active'])
            print(f"–ê–∫—Ç–∏–≤–Ω–∏—Ö –∞–≥–µ–Ω—Ç—ñ–≤: {active_agents}/{len(self.agents)}")
            print(f"–ó–Ω–∞–π–¥–µ–Ω–æ –ª–æ–≥—ñ–≤: {len(logs)}")
            
            # –û—Ü—ñ–Ω–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
            if active_agents >= 2 and len(available_services) > 0:
                print("\nüéØ –†–ï–ó–£–õ–¨–¢–ê–¢: ‚úÖ –£–°–ü–Ü–®–ù–û - –ê–≥–µ–Ω—Ç–∏ –ø—Ä–∞—Ü—é—é—Ç—å!")
            elif active_agents >= 1:
                print("\nüéØ –†–ï–ó–£–õ–¨–¢–ê–¢: üü° –ß–ê–°–¢–ö–û–í–û - –î–µ—è–∫—ñ –∞–≥–µ–Ω—Ç–∏ –ø—Ä–∞—Ü—é—é—Ç—å")  
            else:
                print("\nüéØ –†–ï–ó–£–õ–¨–¢–ê–¢: ‚ùå –ù–ï–£–°–ü–Ü–®–ù–û - –ê–≥–µ–Ω—Ç–∏ –Ω–µ –ø—Ä–∞—Ü—é—é—Ç—å")
            
            return {
                'available_services': available_services,
                'started_agents': started_agents,
                'active_agents': active_agents,
                'logs_found': len(logs),
                'success': active_agents >= 1
            }
            
        except KeyboardInterrupt:
            print("\n‚ö†Ô∏è –¢–µ—Å—Ç –ø–µ—Ä–µ—Ä–≤–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º")
        except Exception as e:
            print(f"\n‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É: {e}")
        finally:
            self.cleanup()

def main():
    tester = AgentTester()
    results = tester.run_test()
    
    # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
    if results:
        results_file = Path("/Users/dima/Documents/Predator11/test_results.json")
        import json
        
        with open(results_file, 'w') as f:
            json.dump({
                'timestamp': datetime.now().isoformat(),
                'results': results
            }, f, indent=2)
            
        print(f"\nüìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–æ: {results_file}")

if __name__ == "__main__":
    main()
