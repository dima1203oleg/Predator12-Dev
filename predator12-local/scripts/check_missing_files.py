#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø—Ä–æ–ø—É—â–µ–Ω–∏—Ö –≤–∞–∂–ª–∏–≤–∏—Ö —Ñ–∞–π–ª—ñ–≤ –∑ –≤–∏—Ö—ñ–¥–Ω–∏—Ö –ø–∞–ø–æ–∫ AAPredator8.0 —Ç–∞ codespaces-models
"""
import os
from pathlib import Path

def get_important_files() -> dict:
    """–°–ø–∏—Å–æ–∫ –≤–∞–∂–ª–∏–≤–∏—Ö —Ñ–∞–π–ª—ñ–≤, —è–∫—ñ –º–æ–≥–ª–∏ –∑–∞–ª–∏—à–∏—Ç–∏—Å—å —É –≤–∏—Ö—ñ–¥–Ω–∏—Ö –ø–∞–ø–∫–∞—Ö"""
    return {
        'AAPredator8.0': {
            'configs': [
                'requirements.txt', '.env.example', 'docker-compose.yml',
                'Makefile', '.vscode/settings.json', '.devcontainer/devcontainer.json'
            ],
            'etl_scripts': [
                'test_complete_etl.py', 'test_customs_parser.py', 'test_simple_parser.py',
                'test_etl_quick.py', 'check_excel_parser.py'
            ],
            'test_data': [
                'test_data/sample_customs.csv', 'test_data/generate_test_data.py'
            ],
            'etl_templates': [
                'etl-parsing/pandas-pipelines/customs_registry_full_auto_etl.py',
                'etl-parsing/pandas-pipelines/customs_registry_etl_template.py'
            ],
            'docs': [
                'README.md', 'FINAL_STATUS.txt', 'DEPLOYMENT_CHECKLIST.md',
                'PRODUCTION_READINESS_REPORT.md', 'SYSTEM_STATUS_REPORT.md'
            ],
            'shell_scripts': [
                'start_services.sh', 'stop_services.sh', 'check_status.sh',
                'test_alerts.sh', 'start-webapp.sh'
            ]
        },
        'codespaces-models': {
            'server': ['server.js', 'package.json'],
            'ai_tools': [
                'advanced_ai_bot.py', 'ai_integration_hub.py', 'ai_model_tester.py',
                'model-helper.mjs', 'model-limits-utils.mjs'
            ],
            'web_ui': ['public/modern.html', 'public/simple.html'],
            'scripts': [
                'scripts/discover_all_models.mjs', 'scripts/test_models.mjs',
                'scripts/query_models.py', 'scripts/list_models.mjs'
            ],
            'docs': [
                'README.md', 'PRODUCTION_GUIDE.md', 'ALL_MODELS_FIXED.md',
                'MODEL_DISCOVERY_REPORT.md', 'TOOLS.md'
            ],
            'configs': [
                'ecosystem.config.js', '.env.example', 'model-config.json'
            ]
        }
    }

def check_file_exists_in_new_structure(file_path: str, base_path: Path) -> bool:
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ —ñ—Å–Ω—É—î —Ñ–∞–π–ª —É –Ω–æ–≤—ñ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ñ –ø—Ä–æ–µ–∫—Ç—É"""
    # –ú–æ–∂–ª–∏–≤—ñ –º—ñ—Å—Ü—è —Ä–æ–∑—Ç–∞—à—É–≤–∞–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤ —É –Ω–æ–≤—ñ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ñ
    possible_locations = [
        base_path / file_path,                    # –ü—Ä—è–º–µ —Ä–æ–∑—Ç–∞—à—É–≤–∞–Ω–Ω—è
        base_path / 'backend/app' / file_path,    # –í backend
        base_path / 'backend/app/mcp' / file_path,# –í MCP
        base_path / 'etl' / file_path,           # –í ETL
        base_path / 'scripts' / file_path,       # –í scripts
        base_path / 'docs' / file_path,          # –í docs
        base_path / 'frontend' / file_path,      # –í frontend
        base_path / 'tests' / file_path,         # –í tests
        base_path / 'ml' / file_path,            # –í ML
        base_path / Path(file_path).name,        # –¢—ñ–ª—å–∫–∏ —ñ–º'—è —Ñ–∞–π–ª—É –≤ –∫–æ—Ä–µ–Ω—ñ
    ]
    
    # –¢–∞–∫–æ–∂ —à—É–∫–∞—î–º–æ —Ñ–∞–π–ª–∏ –∑ —Å—Ö–æ–∂–∏–º–∏ —ñ–º–µ–Ω–∞–º–∏
    file_name = Path(file_path).name
    for location in possible_locations:
        if location.exists():
            return True
    
    # –ü–æ—à—É–∫ –ø–æ –≤—Å—å–æ–º—É –ø—Ä–æ–µ–∫—Ç—É
    for root, dirs, files in os.walk(base_path):
        if file_name in files:
            return True
    
    return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏"""
    base_path = Path(__file__).parent.parent
    source_paths = {
        'AAPredator8.0': base_path / 'AAPredator8.0',
        'codespaces-models': base_path / 'codespaces-models'
    }
    
    important_files = get_important_files()
    missing_files = []
    
    print("üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—Ä–æ–ø—É—â–µ–Ω–∏—Ö –≤–∞–∂–ª–∏–≤–∏—Ö —Ñ–∞–π–ª—ñ–≤...")
    print("=" * 60)
    
    for source_name, source_path in source_paths.items():
        if not source_path.exists():
            print(f"‚ö†Ô∏è  –ü–∞–ø–∫–∞ {source_name} –Ω–µ —ñ—Å–Ω—É—î - –º–æ–∂–ª–∏–≤–æ, –≤–∂–µ –≤–∏–¥–∞–ª–µ–Ω–∞")
            continue
            
        print(f"\nüìÅ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ {source_name}:")
        
        for category, files in important_files[source_name].items():
            print(f"\n  üìÇ {category.upper()}:")
            
            for file_path in files:
                full_source_path = source_path / file_path
                
                if full_source_path.exists():
                    # –§–∞–π–ª —ñ—Å–Ω—É—î —É –≤–∏—Ö—ñ–¥–Ω—ñ–π –ø–∞–ø—Ü—ñ, –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —î –≤ –Ω–æ–≤—ñ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ñ
                    if check_file_exists_in_new_structure(file_path, base_path):
                        print(f"    ‚úÖ {file_path} - –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ")
                    else:
                        print(f"    ‚ùå {file_path} - –ù–ï –ü–ï–†–ï–ù–ï–°–ï–ù–û!")
                        missing_files.append((source_name, file_path, full_source_path))
                else:
                    print(f"    ‚ûñ {file_path} - –≤—ñ–¥—Å—É—Ç–Ω—ñ–π —É –≤–∏—Ö—ñ–¥–Ω—ñ–π –ø–∞–ø—Ü—ñ")
    
    # –ü—ñ–¥—Å—É–º–æ–∫
    print("\n" + "=" * 60)
    if missing_files:
        print(f"‚ö†Ô∏è  –ó–ù–ê–ô–î–ï–ù–û {len(missing_files)} –í–ê–ñ–õ–ò–í–ò–• –§–ê–ô–õ–Ü–í, –Ø–ö–Ü –ù–ï –ë–£–õ–ò –ü–ï–†–ï–ù–ï–°–ï–ù–Ü:")
        print("\n–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó:")
        
        for source, file_path, full_path in missing_files:
            print(f"\nüìã {source}/{file_path}:")
            
            # –ê–Ω–∞–ª—ñ–∑ —Ç–∏–ø—É —Ñ–∞–π–ª—É —Ç–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó
            if file_path.endswith('.py'):
                if 'test_' in file_path:
                    print("  ‚Üí –°–∫–æ–ø—ñ—é–≤–∞—Ç–∏ –¥–æ: tests/legacy/")
                elif 'etl' in file_path.lower():
                    print("  ‚Üí –°–∫–æ–ø—ñ—é–≤–∞—Ç–∏ –¥–æ: etl/legacy/")
                else:
                    print("  ‚Üí –°–∫–æ–ø—ñ—é–≤–∞—Ç–∏ –¥–æ: scripts/legacy/")
            elif file_path.endswith(('.md', '.txt')):
                print("  ‚Üí –°–∫–æ–ø—ñ—é–≤–∞—Ç–∏ –¥–æ: docs/legacy/")
            elif file_path.endswith(('.sh', '.js', '.mjs')):
                print("  ‚Üí –°–∫–æ–ø—ñ—é–≤–∞—Ç–∏ –¥–æ: scripts/legacy/")
            elif 'config' in file_path.lower() or file_path.endswith('.json'):
                print("  ‚Üí –°–∫–æ–ø—ñ—é–≤–∞—Ç–∏ –¥–æ: config/legacy/")
            else:
                print("  ‚Üí –°–∫–æ–ø—ñ—é–≤–∞—Ç–∏ –¥–æ: misc/legacy/")
                
            print(f"  üìÇ –ü–æ–≤–Ω–∏–π —à–ª—è—Ö: {full_path}")
        
        print("\nüîß –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —à–≤–∏–¥–∫–æ–≥–æ –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è:")
        print("mkdir -p docs/legacy etl/legacy scripts/legacy config/legacy tests/legacy misc/legacy")
        
    else:
        print("‚úÖ –í–°–Ü –í–ê–ñ–õ–ò–í–Ü –§–ê–ô–õ–ò –ë–£–õ–ò –£–°–ü–Ü–®–ù–û –ü–ï–†–ï–ù–ï–°–ï–ù–Ü!")
        print("\nüóëÔ∏è  –í–∏—Ö—ñ–¥–Ω—ñ –ø–∞–ø–∫–∏ –º–æ–∂–Ω–∞ –±–µ–∑–ø–µ—á–Ω–æ –≤–∏–¥–∞–ª–∏—Ç–∏:")
        print("rm -rf AAPredator8.0/ codespaces-models/")
    
    print("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    print(f"  ‚Ä¢ –ü–µ—Ä–µ–≤—ñ—Ä–µ–Ω–æ –ø–∞–ø–æ–∫: {len([p for p in source_paths.values() if p.exists()])}")
    total_expected_files = sum(
        len(file_list)
        for source_categories in important_files.values()
        for file_list in source_categories.values()
    )
    print(f"  ‚Ä¢ –í—Å—å–æ–≥–æ —Ñ–∞–π–ª—ñ–≤ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏: {total_expected_files}")
    print(f"  ‚Ä¢ –ù–µ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ: {len(missing_files)}")

if __name__ == '__main__':
    main()
