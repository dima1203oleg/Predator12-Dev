#!/usr/bin/env python3
"""
üß™ –¢–ï–°–¢–ï–† –†–û–ó–£–ú–ù–û–ì–û –†–û–ó–ü–û–î–Ü–õ–£ AI –ú–û–î–ï–õ–ï–ô
–ü–µ—Ä–µ–≤—ñ—Ä—è—î —Ä–æ–±–æ—Ç—É –≤—Å—ñ—Ö 58 –º–æ–¥–µ–ª–µ–π —Ç–∞ —ó—Ö —Ä–æ–∑–ø–æ–¥—ñ–ª –º—ñ–∂ –∞–≥–µ–Ω—Ç–∞–º–∏
"""

import yaml
import asyncio
import aiohttp
import time
import json
from typing import Dict, List, Any

async def test_model(session: aiohttp.ClientSession, model_id: str, test_prompt: str = "Hello! How are you?") -> Dict[str, Any]:
    """–¢–µ—Å—Ç—É—î –æ–∫—Ä–µ–º—É –º–æ–¥–µ–ª—å"""
    try:
        payload = {
            "model": model_id,
            "messages": [{"role": "user", "content": test_prompt}],
            "max_tokens": 50,
            "temperature": 0.1
        }
        
        start_time = time.time()
        async with session.post("http://localhost:3011/v1/chat/completions", 
                               json=payload, timeout=15) as response:
            response_time = time.time() - start_time
            
            if response.status == 200:
                data = await response.json()
                return {
                    "model": model_id,
                    "status": "‚úÖ SUCCESS",
                    "response_time": f"{response_time:.2f}s",
                    "content": data.get("choices", [{}])[0].get("message", {}).get("content", "")[:100] + "..."
                }
            else:
                error_text = await response.text()
                return {
                    "model": model_id,
                    "status": f"‚ùå HTTP {response.status}",
                    "response_time": f"{response_time:.2f}s",
                    "error": error_text[:200]
                }
                
    except asyncio.TimeoutError:
        return {"model": model_id, "status": "‚è±Ô∏è TIMEOUT", "response_time": ">15s", "error": "Request timeout"}
    except Exception as e:
        return {"model": model_id, "status": "üí• ERROR", "response_time": "N/A", "error": str(e)[:200]}

async def test_agent_models(config: Dict[str, Any], agent_name: str) -> Dict[str, Any]:
    """–¢–µ—Å—Ç—É—î –≤—Å—ñ –º–æ–¥–µ–ª—ñ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞"""
    agent_config = config["agents"][agent_name]
    
    # –ó–±–∏—Ä–∞—î–º–æ –≤—Å—ñ –º–æ–¥–µ–ª—ñ –∞–≥–µ–Ω—Ç–∞
    all_models = []
    all_models.extend(agent_config["models"]["primary"])
    all_models.extend(agent_config["models"]["fallback"])
    all_models.extend(agent_config["models"]["emergency"])
    
    results = {
        "agent": agent_name,
        "category": agent_config["category"],
        "total_models": len(all_models),
        "max_concurrent": agent_config["concurrency"]["max_concurrent"],
        "load_balancing": agent_config["concurrency"]["load_balancing"],
        "primary_results": [],
        "fallback_results": [],
        "emergency_results": [],
        "summary": {"success": 0, "failed": 0, "timeout": 0}
    }
    
    async with aiohttp.ClientSession() as session:
        # –¢–µ—Å—Ç—É—î–º–æ –æ—Å–Ω–æ–≤–Ω—ñ –º–æ–¥–µ–ª—ñ
        print(f"üîç –¢–µ—Å—Ç—É—é {agent_name} - Primary –º–æ–¥–µ–ª—ñ...")
        for model_id in agent_config["models"]["primary"]:
            result = await test_model(session, model_id, f"Test for {agent_name} agent")
            results["primary_results"].append(result)
            
            if "SUCCESS" in result["status"]:
                results["summary"]["success"] += 1
            elif "TIMEOUT" in result["status"]:
                results["summary"]["timeout"] += 1
            else:
                results["summary"]["failed"] += 1
        
        # –¢–µ—Å—Ç—É—î–º–æ —Ä–µ–∑–µ—Ä–≤–Ω—ñ –º–æ–¥–µ–ª—ñ (–≤–∏–±—ñ—Ä–∫–æ–≤–æ –¥–ª—è –µ–∫–æ–Ω–æ–º—ñ—ó —á–∞—Å—É)
        if agent_config["models"]["fallback"]:
            print(f"üîÑ –¢–µ—Å—Ç—É—é {agent_name} - Fallback –º–æ–¥–µ–ª—ñ...")
            for model_id in agent_config["models"]["fallback"][:2]:  # –¢–µ—Å—Ç—É—î–º–æ —Ç—ñ–ª—å–∫–∏ –ø–µ—Ä—à—ñ 2
                result = await test_model(session, model_id, f"Fallback test for {agent_name}")
                results["fallback_results"].append(result)
                
                if "SUCCESS" in result["status"]:
                    results["summary"]["success"] += 1
                elif "TIMEOUT" in result["status"]:
                    results["summary"]["timeout"] += 1
                else:
                    results["summary"]["failed"] += 1
    
    return results

def load_configuration() -> Dict[str, Any]:
    """–ó–∞–≤–∞–Ω—Ç–∞–∂—É—î –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é —Ä–æ–∑–ø–æ–¥—ñ–ª—É –º–æ–¥–µ–ª–µ–π"""
    try:
        with open("/Users/dima/Documents/Predator11/agents/intelligent_model_distribution.yaml", 'r', encoding='utf-8') as f:
            return yaml.safe_load(f)
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó: {e}")
        return {}

async def test_critical_agents_first(config: Dict[str, Any]) -> List[Dict[str, Any]]:
    """–°–ø–æ—á–∞—Ç–∫—É —Ç–µ—Å—Ç—É—î –∫—Ä–∏—Ç–∏—á–Ω–æ –≤–∞–∂–ª–∏–≤—ñ –∞–≥–µ–Ω—Ç–∏"""
    
    critical_agents = [
        "ChiefOrchestrator", "ModelRouter", "QueryPlanner", 
        "DataQuality", "Anomaly", "AutoHeal"
    ]
    
    results = []
    
    print("üö® –¢–ï–°–¢–£–í–ê–ù–ù–Ø –ö–†–ò–¢–ò–ß–ù–û –í–ê–ñ–õ–ò–í–ò–• –ê–ì–ï–ù–¢–Ü–í")
    print("="*60)
    
    for agent_name in critical_agents:
        if agent_name in config["agents"]:
            print(f"\nüß™ –¢–µ—Å—Ç—É—é –∫—Ä–∏—Ç–∏—á–Ω–∏–π –∞–≥–µ–Ω—Ç: {agent_name}")
            result = await test_agent_models(config, agent_name)
            results.append(result)
            
            # –®–≤–∏–¥–∫–∏–π –∑–≤—ñ—Ç
            summary = result["summary"]
            total = summary["success"] + summary["failed"] + summary["timeout"]
            success_rate = (summary["success"] / total * 100) if total > 0 else 0
            
            print(f"   üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {summary['success']}/{total} —É—Å–ø—ñ—à–Ω–æ ({success_rate:.1f}%)")
            if summary["failed"] > 0:
                print(f"   ‚ö†Ô∏è  –ü–æ–º–∏–ª–æ–∫: {summary['failed']}")
            if summary["timeout"] > 0:
                print(f"   ‚è±Ô∏è  –¢–∞–π–º–∞—É—Ç—ñ–≤: {summary['timeout']}")
    
    return results

async def test_remaining_agents(config: Dict[str, Any], tested_agents: List[str]) -> List[Dict[str, Any]]:
    """–¢–µ—Å—Ç—É—î —Ä–µ—à—Ç—É –∞–≥–µ–Ω—Ç—ñ–≤"""
    
    remaining_agents = [name for name in config["agents"].keys() if name not in tested_agents]
    results = []
    
    print(f"\nüîç –¢–ï–°–¢–£–í–ê–ù–ù–Ø –†–ï–®–¢–ò –ê–ì–ï–ù–¢–Ü–í ({len(remaining_agents)} —à—Ç.)")
    print("="*60)
    
    for agent_name in remaining_agents:
        print(f"\nüß™ –¢–µ—Å—Ç—É—é –∞–≥–µ–Ω—Ç: {agent_name}")
        result = await test_agent_models(config, agent_name)
        results.append(result)
        
        # –®–≤–∏–¥–∫–∏–π –∑–≤—ñ—Ç
        summary = result["summary"]
        total = summary["success"] + summary["failed"] + summary["timeout"]
        success_rate = (summary["success"] / total * 100) if total > 0 else 0
        print(f"   üìä {summary['success']}/{total} —É—Å–ø—ñ—à–Ω–æ ({success_rate:.1f}%)")
    
    return results

def generate_comprehensive_report(all_results: List[Dict[str, Any]]) -> None:
    """–ì–µ–Ω–µ—Ä—É—î –ø–æ–≤–Ω–∏–π –∑–≤—ñ—Ç —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è"""
    
    print(f"\n{'='*80}")
    print("üìä –ü–û–í–ù–ò–ô –ó–í–Ü–¢ –¢–ï–°–¢–£–í–ê–ù–ù–Ø –†–û–ó–ü–û–î–Ü–õ–£ AI –ú–û–î–ï–õ–ï–ô")
    print(f"{'='*80}")
    
    # –ó–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    total_agents = len(all_results)
    total_success = sum(result["summary"]["success"] for result in all_results)
    total_failed = sum(result["summary"]["failed"] for result in all_results)
    total_timeout = sum(result["summary"]["timeout"] for result in all_results)
    total_tests = total_success + total_failed + total_timeout
    
    print(f"\nüéØ –ó–ê–ì–ê–õ–¨–ù–ê –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    print(f"   üìù –ü—Ä–æ—Ç–µ—Å—Ç–æ–≤–∞–Ω–æ –∞–≥–µ–Ω—Ç—ñ–≤: {total_agents}")
    print(f"   ‚úÖ –£—Å–ø—ñ—à–Ω–∏—Ö —Ç–µ—Å—Ç—ñ–≤: {total_success}/{total_tests} ({total_success/total_tests*100:.1f}%)")
    print(f"   ‚ùå –ù–µ–≤–¥–∞–ª–∏—Ö —Ç–µ—Å—Ç—ñ–≤: {total_failed}/{total_tests} ({total_failed/total_tests*100:.1f}%)")
    print(f"   ‚è±Ô∏è  –¢–∞–π–º–∞—É—Ç—ñ–≤: {total_timeout}/{total_tests} ({total_timeout/total_tests*100:.1f}%)")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è—Ö
    categories = {}
    for result in all_results:
        category = result["category"]
        if category not in categories:
            categories[category] = {"success": 0, "failed": 0, "timeout": 0, "agents": 0}
        
        categories[category]["success"] += result["summary"]["success"]
        categories[category]["failed"] += result["summary"]["failed"]  
        categories[category]["timeout"] += result["summary"]["timeout"]
        categories[category]["agents"] += 1
    
    print(f"\nüè∑Ô∏è  –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –ö–ê–¢–ï–ì–û–†–Ü–Ø–•:")
    for category, stats in sorted(categories.items()):
        total = stats["success"] + stats["failed"] + stats["timeout"]
        success_rate = (stats["success"] / total * 100) if total > 0 else 0
        print(f"   {category}: {stats['success']}/{total} ({success_rate:.1f}%) - {stats['agents']} –∞–≥–µ–Ω—Ç—ñ–≤")
    
    # –ù–∞–π–∫—Ä–∞—â—ñ —Ç–∞ –Ω–∞–π–≥—ñ—Ä—à—ñ –∞–≥–µ–Ω—Ç–∏
    agent_performance = []
    for result in all_results:
        total = sum(result["summary"].values())
        success_rate = (result["summary"]["success"] / total * 100) if total > 0 else 0
        agent_performance.append((result["agent"], success_rate, result["summary"]))
    
    agent_performance.sort(key=lambda x: x[1], reverse=True)
    
    print(f"\nüèÜ –¢–û–ü-5 –ù–ê–ô–ö–†–ê–©–ò–• –ê–ì–ï–ù–¢–Ü–í:")
    for i, (agent, rate, summary) in enumerate(agent_performance[:5]):
        print(f"   {i+1}. {agent}: {rate:.1f}% ({summary['success']} —É—Å–ø—ñ—à–Ω–æ)")
    
    if len(agent_performance) > 5:
        print(f"\n‚ö†Ô∏è  –ê–ì–ï–ù–¢–ò –ó –ü–†–û–ë–õ–ï–ú–ê–ú–ò:")
        for agent, rate, summary in agent_performance[-3:]:
            if rate < 80:
                print(f"   ‚ùå {agent}: {rate:.1f}% ({summary['failed']} –ø–æ–º–∏–ª–æ–∫, {summary['timeout']} —Ç–∞–π–º–∞—É—Ç—ñ–≤)")
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó
    print(f"\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–Ü–á:")
    if total_success / total_tests >= 0.8:
        print("   ‚úÖ –°–∏—Å—Ç–µ–º–∞ –ø—Ä–∞—Ü—é—î —Å—Ç–∞–±—ñ–ª—å–Ω–æ!")
        print("   üöÄ –ú–æ–∂–Ω–∞ –∑–∞–ø—É—Å–∫–∞—Ç–∏ —É –ø—Ä–æ–¥–∞–∫—à–µ–Ω—ñ")
    elif total_success / total_tests >= 0.6:
        print("   ‚ö†Ô∏è  –°–∏—Å—Ç–µ–º–∞ –ø—Ä–∞—Ü—é—î –∑–∞–¥–æ–≤—ñ–ª—å–Ω–æ")
        print("   üîß –†–µ–∫–æ–º–µ–Ω–¥—É—î—Ç—å—Å—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø—Ä–æ–±–ª–µ–º–Ω–∏—Ö –º–æ–¥–µ–ª–µ–π")
    else:
        print("   ‚ùå –°–∏—Å—Ç–µ–º–∞ –ø–æ—Ç—Ä–µ–±—É—î —Å–µ—Ä–π–æ–∑–Ω–æ–≥–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è")
        print("   üõ†Ô∏è  –ù–µ–æ–±—Ö—ñ–¥–Ω–æ –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é —Ç–∞ –¥–æ—Å—Ç—É–ø–Ω—ñ—Å—Ç—å –º–æ–¥–µ–ª–µ–π")
    
    print(f"\nüîÑ –ü–æ–≤–Ω–∏–π –ª–æ–≥ –∑–±–µ—Ä–µ–∂–µ–Ω–æ —É —Ñ–∞–π–ª–∞—Ö –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó")

async def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è"""
    
    print("üöÄ –ó–ê–ü–£–°–ö –ö–û–ú–ü–õ–ï–ö–°–ù–û–ì–û –¢–ï–°–¢–£–í–ê–ù–ù–Ø AI –ú–û–î–ï–õ–ï–ô")
    print("="*60)
    
    # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é
    config = load_configuration()
    if not config:
        print("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é!")
        return
    
    print(f"üìã –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é –∑ {len(config['agents'])} –∞–≥–µ–Ω—Ç–∞–º–∏")
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –¥–æ—Å—Ç—É–ø–Ω—ñ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get("http://localhost:3011/v1/models") as response:
                if response.status == 200:
                    models = await response.json()
                    print(f"üåê –°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–Ω–∏–π –∑ {len(models.get('data', []))} –º–æ–¥–µ–ª—è–º–∏")
                else:
                    print(f"‚ö†Ô∏è  –°–µ—Ä–≤–µ—Ä –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –∑ –ø–æ–º–∏–ª–∫–æ—é {response.status}")
                    return
    except Exception as e:
        print(f"‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π: {e}")
        return
    
    # –°–ø–æ—á–∞—Ç–∫—É —Ç–µ—Å—Ç—É—î–º–æ –∫—Ä–∏—Ç–∏—á–Ω—ñ –∞–≥–µ–Ω—Ç–∏
    critical_results = await test_critical_agents_first(config)
    tested_agent_names = [result["agent"] for result in critical_results]
    
    # –¢–µ—Å—Ç—É—î–º–æ —Ä–µ—à—Ç—É –∞–≥–µ–Ω—Ç—ñ–≤
    remaining_results = await test_remaining_agents(config, tested_agent_names)
    
    # –ó–±–∏—Ä–∞—î–º–æ –≤—Å—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏
    all_results = critical_results + remaining_results
    
    # –ì–µ–Ω–µ—Ä—É—î–º–æ –ø–æ–≤–Ω–∏–π –∑–≤—ñ—Ç
    generate_comprehensive_report(all_results)

if __name__ == "__main__":
    asyncio.run(main())
