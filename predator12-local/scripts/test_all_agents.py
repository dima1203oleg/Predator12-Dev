#!/usr/bin/env python3
"""
üîç –¢–ï–°–¢ –í–°–Ü–• –ê–ì–ï–ù–¢–Ü–í –ù–ê –í–ò–ö–û–†–ò–°–¢–ê–ù–ù–Ø –ù–û–í–û–á –õ–û–ì–Ü–ö–ò
"""

import asyncio
import sys
import os
sys.path.append('/Users/dima/Documents/Predator11/agents')

from supervisor import ProductionSupervisor, TaskType

async def test_all_agents():
    """–¢–µ—Å—Ç—É—î –≤—Å—ñ—Ö –∞–≥–µ–Ω—Ç—ñ–≤ –Ω–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –Ω–æ–≤–æ—ó –∫–æ–Ω–∫—É—Ä—Å–Ω–æ—ó –ª–æ–≥—ñ–∫–∏"""
    
    supervisor = ProductionSupervisor()
    
    # –°–ø–∏—Å–æ–∫ –∞–≥–µ–Ω—Ç—ñ–≤ –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∑ —ó—Ö–Ω—ñ–º–∏ —Å–ø–µ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è–º–∏
    test_agents = [
        ("ChiefOrchestrator", TaskType.CRITICAL_ORCHESTRATION, "–£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —Å–∏—Å—Ç–µ–º–æ—é"),
        ("ModelRouter", TaskType.CRITICAL_ROUTING, "–ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü—ñ—è –∑–∞–ø–∏—Ç—ñ–≤"), 
        ("QueryPlanner", TaskType.CRITICAL_PLANNING, "–ü–ª–∞–Ω—É–≤–∞–Ω–Ω—è –∑–∞–≤–¥–∞–Ω—å"),
        ("DataQuality", TaskType.HIGH_LOAD_ANALYSIS, "–ê–Ω–∞–ª—ñ–∑ —è–∫–æ—Å—Ç—ñ –¥–∞–Ω–∏—Ö"),
        ("Anomaly", TaskType.REAL_TIME_DETECTION, "–í–∏—è–≤–ª–µ–Ω–Ω—è –∞–Ω–æ–º–∞–ª—ñ–π"),
        ("AutoHeal", TaskType.CODE_GENERATION, "–°–∞–º–æ–≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –∫–æ–¥—É"),
        ("SelfDiagnosis", TaskType.SYSTEM_DIAGNOSTICS, "–î—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º–∏"),
        ("DatasetIngest", TaskType.FAST_PROCESSING, "–®–≤–∏–¥–∫–µ –ø–æ–≥–ª–∏–Ω–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö"),
        ("PIIGuardian", TaskType.PRIVACY_PROTECTION, "–ó–∞—Ö–∏—Å—Ç –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—ñ"),
        ("RedTeam", TaskType.SECURITY_TESTING, "–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –±–µ–∑–ø–µ–∫–∏"),
        ("Arbiter", TaskType.DECISION_ARBITRATION, "–ê—Ä–±—ñ—Ç—Ä–∞–∂ —Ä—ñ—à–µ–Ω—å"),
        ("NexusGuide", TaskType.USER_ASSISTANCE, "–î–æ–ø–æ–º–æ–≥–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º")
    ]
    
    print("üîç –¢–ï–°–¢–£–í–ê–ù–ù–Ø –ê–ì–ï–ù–¢–Ü–í –ù–ê –í–ò–ö–û–†–ò–°–¢–ê–ù–ù–Ø –ù–û–í–û–á –õ–û–ì–Ü–ö–ò")
    print("=" * 60)
    
    results = []
    
    for agent_id, task_type, description in test_agents:
        print(f"\nü§ñ –¢–µ—Å—Ç—É—é –∞–≥–µ–Ω—Ç–∞: {agent_id}")
        print(f"   üìù –°–ø–µ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è: {description}")
        
        try:
            # –¢–µ—Å—Ç—É—î–º–æ –∞–≥–µ–Ω—Ç–∞
            result = await supervisor.handle_agent_request(
                agent_id, 
                f"–¢–µ—Å—Ç–æ–≤–µ –∑–∞–≤–¥–∞–Ω–Ω—è –¥–ª—è {description.lower()}", 
                task_type
            )
            
            if result["success"]:
                print(f"   ‚úÖ –ê–≥–µ–Ω—Ç –ø—Ä–∞—Ü—é—î!")
                print(f"   üèÜ –ü–µ—Ä–µ–º–æ–∂–µ—Ü—å: {result.get('winner_model', 'N/A')}")
                print(f"   üìä –Ø–∫—ñ—Å—Ç—å: {result.get('quality_score', 0):.3f}")
                print(f"   ‚ö° –õ–∞—Ç–µ–Ω—Ç–Ω—ñ—Å—Ç—å: {result.get('latency_ms', 0):.1f}ms")
                print(f"   üå°Ô∏è –¢–µ—Ä–º–æ—Å—Ç–∞—Ç—É—Å: {result.get('thermal_status', 'unknown')}")
                
                results.append({
                    "agent": agent_id,
                    "status": "‚úÖ SUCCESS",
                    "winner": result.get('winner_model', 'N/A'),
                    "quality": result.get('quality_score', 0),
                    "latency": result.get('latency_ms', 0)
                })
            else:
                print(f"   ‚ùå –ê–≥–µ–Ω—Ç –ø—Ä–æ–≤–∞–ª–∏–≤ —Ç–µ—Å—Ç: {result.get('error', 'Unknown error')}")
                results.append({
                    "agent": agent_id,
                    "status": "‚ùå FAILED", 
                    "error": result.get('error', 'Unknown')
                })
                
        except Exception as e:
            print(f"   üí• –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {str(e)}")
            results.append({
                "agent": agent_id,
                "status": "üí• ERROR",
                "error": str(e)
            })
    
    # –ü—ñ–¥—Å—É–º–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
    print(f"\nüìä –ü–Ü–î–°–£–ú–û–ö –¢–ï–°–¢–£–í–ê–ù–ù–Ø")
    print("=" * 60)
    
    successful = len([r for r in results if "SUCCESS" in r["status"]])
    failed = len([r for r in results if "FAILED" in r["status"]])
    errors = len([r for r in results if "ERROR" in r["status"]])
    
    print(f"‚úÖ –£—Å–ø—ñ—à–Ω—ñ –∞–≥–µ–Ω—Ç–∏: {successful}/{len(results)}")
    print(f"‚ùå –ü—Ä–æ–≤–∞–ª—å–Ω—ñ –∞–≥–µ–Ω—Ç–∏: {failed}/{len(results)}")  
    print(f"üí• –ü–æ–º–∏–ª–∫–∏: {errors}/{len(results)}")
    
    # –î–µ—Ç–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    if successful > 0:
        print(f"\nüèÜ –ù–ê–ô–ö–†–ê–©–Ü –ê–ì–ï–ù–¢–ò:")
        successful_results = [r for r in results if "SUCCESS" in r["status"]]
        successful_results.sort(key=lambda x: x["quality"], reverse=True)
        
        for i, result in enumerate(successful_results[:5], 1):
            print(f"{i}. {result['agent']}: {result['quality']:.3f} —è–∫–æ—Å—Ç—ñ, {result['latency']:.1f}ms")
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏—Ö —Ñ—É–Ω–∫—Ü—ñ–π
    print(f"\nüîß –ü–ï–†–ï–í–Ü–†–ö–ê –°–ò–°–¢–ï–ú–ù–ò–• –§–£–ù–ö–¶–Ü–ô:")
    
    # –°–∏—Å—Ç–µ–º–Ω–∏–π —Å—Ç–∞—Ç—É—Å
    status = supervisor.get_system_status()
    print(f"   üìä –°–∏—Å—Ç–µ–º–Ω–∏–π —Å—Ç–∞—Ç—É—Å: {status['system_health']}")
    print(f"   üå°Ô∏è –¢–µ—Ä–º–∞–ª—å–Ω–∏—Ö –ø—Ä–æ–±–ª–µ–º: {status['thermal_status']['emergency'] + status['thermal_status']['critical']}")
    print(f"   üìà –í—Å—å–æ–≥–æ –∫–æ–Ω–∫—É—Ä—Å—ñ–≤: {supervisor.metrics['successful_competitions']}")
    print(f"   ‚öñÔ∏è –ê—Ä–±—ñ—Ç—Ä–∞–∂—ñ–≤ –ø–æ—Ç—Ä–µ–±—É–≤–∞–ª–æ: {supervisor.metrics['arbitrations_needed']}")
    print(f"   üîÑ Fallback –∞–∫—Ç–∏–≤–∞—Ü—ñ–π: {supervisor.metrics['failovers']}")
    
    # –¢–µ—Ä–º–∞–ª—å–Ω–µ –æ–±—Å–ª—É–≥–æ–≤—É–≤–∞–Ω–Ω—è
    print(f"\nüå°Ô∏è –ó–ê–ü–£–°–ö –¢–ï–†–ú–ê–õ–¨–ù–û–ì–û –û–ë–°–õ–£–ì–û–í–£–í–ê–ù–ù–Ø...")
    supervisor.run_thermal_maintenance()
    print(f"   ‚ùÑÔ∏è –¢–µ—Ä–º–∞–ª—å–Ω–µ –æ–±—Å–ª—É–≥–æ–≤—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
    
    print(f"\nüéØ –í–ò–°–ù–û–í–û–ö:")
    if successful == len(results):
        print(f"   üéâ –í–°–Ü –ê–ì–ï–ù–¢–ò –í–ò–ö–û–†–ò–°–¢–û–í–£–Æ–¢–¨ –ù–û–í–£ –°–ö–õ–ê–î–ù–£ –õ–û–ì–Ü–ö–£!")
        print(f"   ‚úÖ –ö–æ–Ω–∫—É—Ä—Å–Ω–∞ —Å–∏—Å—Ç–µ–º–∞ –ø—Ä–∞—Ü—é—î")
        print(f"   ‚úÖ –ê—Ä–±—ñ—Ç—Ä–∞–∂ —Ñ—É–Ω–∫—Ü—ñ–æ–Ω—É—î")  
        print(f"   ‚úÖ –¢–µ—Ä–º–∞–ª—å–Ω–∏–π –∑–∞—Ö–∏—Å—Ç –∞–∫—Ç–∏–≤–Ω–∏–π")
        print(f"   ‚úÖ Fallback —Å–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞")
    else:
        print(f"   ‚ö†Ô∏è {failed + errors} –∞–≥–µ–Ω—Ç—ñ–≤ –ø–æ—Ç—Ä–µ–±—É—é—Ç—å —É–≤–∞–≥–∏")
        
        if failed > 0:
            print(f"   üîß –ü—Ä–æ–≤–∞–ª—å–Ω—ñ –∞–≥–µ–Ω—Ç–∏ –ø–æ—Ç—Ä—ñ–±–Ω–æ –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏")
        if errors > 0:
            print(f"   üí• –ê–≥–µ–Ω—Ç–∏ –∑ –ø–æ–º–∏–ª–∫–∞–º–∏ –ø–æ—Ç—Ä–µ–±—É—é—Ç—å –Ω–∞–ª–∞–≥–æ–¥–∂–µ–Ω–Ω—è")

if __name__ == "__main__":
    asyncio.run(test_all_agents())
