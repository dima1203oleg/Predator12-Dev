#!/usr/bin/env python3
"""
–®–≤–∏–¥–∫–∏–π —Ç–µ—Å—Ç –≤–µ–±-—ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É Predator11
"""

import subprocess
import time
import os
import sys
from pathlib import Path
import signal

class WebInterfaceTest:
    def __init__(self):
        self.project_root = Path("/Users/dima/Documents/Predator11")
        self.frontend_dir = self.project_root / "frontend"
        self.processes = {}
        
    def check_nodejs(self):
        """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ Node.js"""
        print("üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ Node.js...")
        
        try:
            result = subprocess.run(['node', '--version'], capture_output=True, text=True)
            if result.returncode == 0:
                print(f"   ‚úÖ Node.js: {result.stdout.strip()}")
                return True
            else:
                print("   ‚ùå Node.js –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
                return False
        except FileNotFoundError:
            print("   ‚ùå Node.js –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            return False
    
    def check_npm(self):
        """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ npm"""
        print("üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ npm...")
        
        try:
            result = subprocess.run(['npm', '--version'], capture_output=True, text=True)
            if result.returncode == 0:
                print(f"   ‚úÖ npm: {result.stdout.strip()}")
                return True
            else:
                print("   ‚ùå npm –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
                return False
        except FileNotFoundError:
            print("   ‚ùå npm –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            return False
    
    def check_dependencies(self):
        """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π"""
        print("üì¶ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π...")
        
        node_modules = self.frontend_dir / "node_modules"
        package_lock = self.frontend_dir / "package-lock.json"
        
        if node_modules.exists():
            print("   ‚úÖ node_modules —ñ—Å–Ω—É—î")
        else:
            print("   ‚ùå node_modules –≤—ñ–¥—Å—É—Ç–Ω—ñ")
            return False
        
        if package_lock.exists():
            print("   ‚úÖ package-lock.json —ñ—Å–Ω—É—î")
        else:
            print("   ‚ö†Ô∏è  package-lock.json –≤—ñ–¥—Å—É—Ç–Ω—ñ–π")
        
        return True
    
    def install_dependencies(self):
        """–í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π"""
        print("üì¶ –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π...")
        
        try:
            os.chdir(self.frontend_dir)
            result = subprocess.run(['npm', 'install'], 
                                  capture_output=True, text=True, timeout=300)
            
            if result.returncode == 0:
                print("   ‚úÖ –ó–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
                return True
            else:
                print("   ‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è:")
                print(f"      {result.stderr[:200]}")
                return False
                
        except subprocess.TimeoutExpired:
            print("   ‚ùå –¢–∞–π–º–∞—É—Ç –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è (5 —Ö–≤–∏–ª–∏–Ω)")
            return False
        except Exception as e:
            print(f"   ‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")
            return False
    
    def check_typescript(self):
        """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ TypeScript"""
        print("üîß –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ TypeScript...")
        
        try:
            os.chdir(self.frontend_dir)
            result = subprocess.run(['npm', 'run', 'typecheck'], 
                                  capture_output=True, text=True, timeout=30)
            
            if result.returncode == 0:
                print("   ‚úÖ TypeScript: OK")
                return True
            else:
                print("   ‚ùå TypeScript –ø–æ–º–∏–ª–∫–∏:")
                # –ü–æ–∫–∞–∑–∞—Ç–∏ –ø–µ—Ä—à—ñ –∫—ñ–ª—å–∫–∞ –ø–æ–º–∏–ª–æ–∫
                errors = result.stderr.split('\n')[:5]
                for error in errors:
                    if error.strip():
                        print(f"      {error}")
                return False
                
        except subprocess.TimeoutExpired:
            print("   ‚ö†Ô∏è  TypeScript –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞–π–Ω—è–ª–∞ –∑–∞–±–∞–≥–∞—Ç–æ —á–∞—Å—É")
            return False
        except Exception as e:
            print(f"   ‚ùå –ü–æ–º–∏–ª–∫–∞ TypeScript: {e}")
            return False
    
    def start_frontend_dev(self):
        """–ó–∞–ø—É—Å–∫ frontend –≤ —Ä–µ–∂–∏–º—ñ —Ä–æ–∑—Ä–æ–±–∫–∏"""
        print("üöÄ –ó–∞–ø—É—Å–∫ frontend –≤ —Ä–µ–∂–∏–º—ñ —Ä–æ–∑—Ä–æ–±–∫–∏...")
        
        try:
            os.chdir(self.frontend_dir)
            
            # –ó–∞–ø—É—Å–∫ —É —Ñ–æ–Ω–æ–≤–æ–º—É —Ä–µ–∂–∏–º—ñ
            process = subprocess.Popen(['npm', 'run', 'dev'], 
                                     stdout=subprocess.PIPE, 
                                     stderr=subprocess.PIPE)
            
            self.processes['frontend'] = process
            print(f"   ‚úÖ Frontend –∑–∞–ø—É—â–µ–Ω–æ (PID: {process.pid})")
            
            # –î–∞—Ç–∏ —á–∞—Å –Ω–∞ –∑–∞–ø—É—Å–∫
            time.sleep(5)
            
            # –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —á–∏ –ø—Ä–æ—Ü–µ—Å —â–µ –ø—Ä–∞—Ü—é—î
            if process.poll() is None:
                print("   ‚úÖ Frontend –ø—Ä–∞—Ü—é—î")
                return True
            else:
                print("   ‚ùå Frontend –∑—É–ø–∏–Ω–∏–≤—Å—è")
                stdout, stderr = process.communicate()
                if stderr:
                    print(f"      –ü–æ–º–∏–ª–∫–∞: {stderr.decode()[:200]}")
                return False
                
        except Exception as e:
            print(f"   ‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É: {e}")
            return False
    
    def check_frontend_running(self):
        """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –ø—Ä–∞—Ü—é—î frontend"""
        print("üåê –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞...")
        
        import urllib.request
        import urllib.error
        
        try:
            # –°–ø—Ä–æ–±—É–≤–∞—Ç–∏ –ø—ñ–¥–∫–ª—é—á–∏—Ç–∏—Å—è –¥–æ localhost:3000
            response = urllib.request.urlopen('http://localhost:3000', timeout=5)
            print(f"   ‚úÖ Frontend –¥–æ—Å—Ç—É–ø–Ω–∏–π (—Å—Ç–∞—Ç—É—Å: {response.getcode()})")
            return True
            
        except urllib.error.URLError as e:
            print(f"   ‚ùå Frontend –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π: {e}")
            return False
        except Exception as e:
            print(f"   ‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏: {e}")
            return False
    
    def check_ports(self):
        """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞–π–Ω—è—Ç–∏—Ö –ø–æ—Ä—Ç—ñ–≤"""
        print("üì° –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–æ—Ä—Ç—ñ–≤...")
        
        ports = [3000, 8000, 5432, 6379]
        
        for port in ports:
            try:
                import socket
                sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
                sock.settimeout(1)
                result = sock.connect_ex(('localhost', port))
                sock.close()
                
                if result == 0:
                    print(f"   ‚úÖ –ü–æ—Ä—Ç {port}: –ó–ê–ô–ù–Ø–¢–ò–ô")
                else:
                    print(f"   ‚ùå –ü–æ—Ä—Ç {port}: –í–Ü–õ–¨–ù–ò–ô")
                    
            except Exception as e:
                print(f"   ‚ùå –ü–æ—Ä—Ç {port}: –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏")
    
    def cleanup(self):
        """–ó—É–ø–∏–Ω–∫–∞ –ø—Ä–æ—Ü–µ—Å—ñ–≤"""
        print("\nüõë –ó—É–ø–∏–Ω–∫–∞ –ø—Ä–æ—Ü–µ—Å—ñ–≤...")
        
        for name, process in self.processes.items():
            if process.poll() is None:
                print(f"   –ó—É–ø–∏–Ω—è—é {name}...")
                process.terminate()
                
                try:
                    process.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    print(f"   –ü—Ä–∏–º—É—Å–æ–≤–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è {name}...")
                    process.kill()
    
    def run_full_test(self):
        """–ü–æ–≤–Ω–∏–π —Ç–µ—Å—Ç –≤–µ–±-—ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É"""
        print("üîç –¢–ï–°–¢ –í–ï–ë-–Ü–ù–¢–ï–†–§–ï–ô–°–£ PREDATOR11")
        print("=" * 50)
        
        try:
            # 1. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω–∏—Ö –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π
            if not self.check_nodejs() or not self.check_npm():
                print("\n‚ùå –°–∏—Å—Ç–µ–º–Ω—ñ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –Ω–µ –≥–æ—Ç–æ–≤—ñ")
                return False
            
            # 2. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–æ—Ä—Ç—ñ–≤
            self.check_ports()
            
            # 3. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π –ø—Ä–æ–µ–∫—Ç—É
            if not self.check_dependencies():
                print("\nüì¶ –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π...")
                if not self.install_dependencies():
                    print("\n‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ")
                    return False
            
            # 4. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ TypeScript
            self.check_typescript()
            
            # 5. –ó–∞–ø—É—Å–∫ frontend
            if self.start_frontend_dev():
                # 6. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ
                time.sleep(3)  # –î–æ–¥–∞—Ç–∫–æ–≤–∏–π —á–∞—Å –Ω–∞ –∑–∞–ø—É—Å–∫
                if self.check_frontend_running():
                    print("\nüéØ –†–ï–ó–£–õ–¨–¢–ê–¢: ‚úÖ –í–ï–ë-–Ü–ù–¢–ï–†–§–ï–ô–° –ü–†–ê–¶–Æ–Ñ!")
                    print("üåê –í—ñ–¥–∫—Ä–∏–π—Ç–µ: http://localhost:3000")
                    
                    # –ó–∞–ª–∏—à–∏—Ç–∏ –ø—Ä–∞—Ü—é—é—á–∏–º –Ω–∞ 30 —Å–µ–∫—É–Ω–¥
                    print("\n‚è±Ô∏è  –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è 30 —Å–µ–∫—É–Ω–¥...")
                    time.sleep(30)
                    
                    return True
                else:
                    print("\nüéØ –†–ï–ó–£–õ–¨–¢–ê–¢: ‚ùå –í–ï–ë-–Ü–ù–¢–ï–†–§–ï–ô–° –ù–ï –î–û–°–¢–£–ü–ù–ò–ô")
                    return False
            else:
                print("\nüéØ –†–ï–ó–£–õ–¨–¢–ê–¢: ‚ùå –ù–ï –í–î–ê–õ–û–°–Ø –ó–ê–ü–£–°–¢–ò–¢–ò")
                return False
                
        except KeyboardInterrupt:
            print("\n‚ö†Ô∏è –¢–µ—Å—Ç –ø–µ—Ä–µ—Ä–≤–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º")
            return False
        except Exception as e:
            print(f"\n‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É: {e}")
            return False
        finally:
            self.cleanup()

def main():
    tester = WebInterfaceTest()
    success = tester.run_full_test()
    
    if success:
        print("\n‚úÖ –¢–µ—Å—Ç —É—Å–ø—ñ—à–Ω–∏–π! –í–µ–±-—ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø—Ä–∞—Ü—é—î.")
    else:
        print("\n‚ùå –¢–µ—Å—Ç –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–æ. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ø–æ–º–∏–ª–∫–∏ –≤–∏—â–µ.")
        
    return 0 if success else 1

if __name__ == "__main__":
    sys.exit(main())
