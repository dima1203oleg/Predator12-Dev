#!/usr/bin/env bash

# ==============================================================================
# PREDATOR12 - Setup Python 3.11 venv
# ==============================================================================
# –°—Ç–≤–æ—Ä—é—î —á–∏—Å—Ç–∏–π Python 3.11 venv —Ç–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ
# ==============================================================================

set -Eeuo pipefail

# –ö–æ–ª—å–æ—Ä–∏
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

info() { echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"; }
success() { echo -e "${GREEN}‚úÖ $1${NC}"; }
warning() { echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"; }
error() { echo -e "${RED}‚ùå $1${NC}"; }

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
BACKEND_DIR="$(cd "$SCRIPT_DIR/../backend" && pwd)"
VENV_DIR="$BACKEND_DIR/venv"

cat << 'EOF'
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë          PREDATOR12 - Python 3.11 venv Setup                 ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
EOF

echo ""

# ==============================================================================
# –ö—Ä–æ–∫ 1: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ Python 3.11
# ==============================================================================
info "=== –ö—Ä–æ–∫ 1: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ Python 3.11 ==="

if ! command -v python3.11 &> /dev/null; then
    error "Python 3.11 –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!"
    echo ""
    echo "–í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å Python 3.11:"
    echo "  brew install python@3.11"
    exit 1
fi

PYTHON_VERSION=$(python3.11 --version)
success "–ó–Ω–∞–π–¥–µ–Ω–æ: $PYTHON_VERSION"

echo ""

# ==============================================================================
# –ö—Ä–æ–∫ 2: Backup —Å—Ç–∞—Ä–æ–≥–æ venv (—è–∫—â–æ —ñ—Å–Ω—É—î)
# ==============================================================================
info "=== –ö—Ä–æ–∫ 2: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —ñ—Å–Ω—É—é—á–æ–≥–æ venv ==="

if [ -d "$VENV_DIR" ]; then
    warning "–ó–Ω–∞–π–¥–µ–Ω–æ —ñ—Å–Ω—É—é—á–∏–π venv"
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤–µ—Ä—Å—ñ—ó Python —É venv
    if [ -f "$VENV_DIR/bin/python" ]; then
        OLD_VERSION=$("$VENV_DIR/bin/python" --version 2>&1 || echo "unknown")
        info "–ü–æ—Ç–æ—á–Ω–∞ –≤–µ—Ä—Å—ñ—è —É venv: $OLD_VERSION"
    fi
    
    read -p "–í–∏–¥–∞–ª–∏—Ç–∏ —ñ—Å–Ω—É—é—á–∏–π venv —Ç–∞ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–∏–π? (y/N): " -n 1 -r
    echo ""
    
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        BACKUP_DIR="$BACKEND_DIR/venv.backup.$(date +%Y%m%d_%H%M%S)"
        info "–°—Ç–≤–æ—Ä—é—é backup: $BACKUP_DIR"
        mv "$VENV_DIR" "$BACKUP_DIR"
        success "Backup —Å—Ç–≤–æ—Ä–µ–Ω–æ"
    else
        info "–ó–∞–ª–∏—à–∞—é —ñ—Å–Ω—É—é—á–∏–π venv"
        exit 0
    fi
else
    info "–Ü—Å–Ω—É—é—á–æ–≥–æ venv –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"
fi

echo ""

# ==============================================================================
# –ö—Ä–æ–∫ 3: –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ venv
# ==============================================================================
info "=== –ö—Ä–æ–∫ 3: –°—Ç–≤–æ—Ä–µ–Ω–Ω—è Python 3.11 venv ==="

cd "$BACKEND_DIR"
python3.11 -m venv venv

if [ -d "$VENV_DIR" ] && [ -f "$VENV_DIR/bin/python" ]; then
    success "venv —Å—Ç–≤–æ—Ä–µ–Ω–æ: $VENV_DIR"
else
    error "–ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ venv"
    exit 1
fi

echo ""

# ==============================================================================
# –ö—Ä–æ–∫ 4: –ê–∫—Ç–∏–≤–∞—Ü—ñ—è —Ç–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è pip
# ==============================================================================
info "=== –ö—Ä–æ–∫ 4: –û–Ω–æ–≤–ª–µ–Ω–Ω—è pip, setuptools, wheel ==="

source "$VENV_DIR/bin/activate"

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü—ñ—ó
ACTIVE_PYTHON=$(which python)
info "–ê–∫—Ç–∏–≤–Ω–∏–π Python: $ACTIVE_PYTHON"

if [[ ! "$ACTIVE_PYTHON" == *"venv/bin/python"* ]]; then
    warning "venv –º–æ–∂–µ –±—É—Ç–∏ –Ω–µ –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ –∫–æ—Ä–µ–∫—Ç–Ω–æ"
fi

# –û–Ω–æ–≤–ª–µ–Ω–Ω—è —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ñ–≤
pip install --upgrade pip setuptools wheel

PIP_VERSION=$(pip --version)
success "pip –æ–Ω–æ–≤–ª–µ–Ω–æ: $PIP_VERSION"

echo ""

# ==============================================================================
# –ö—Ä–æ–∫ 5: –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π
# ==============================================================================
info "=== –ö—Ä–æ–∫ 5: –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π ==="

if [ ! -f "$BACKEND_DIR/requirements-311-modern.txt" ]; then
    error "–§–∞–π–ª requirements-311-modern.txt –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!"
    exit 1
fi

info "–í—Å—Ç–∞–Ω–æ–≤–ª—é—é –ø–∞–∫–µ—Ç–∏ –∑ requirements-311-modern.txt..."
info "–¶–µ –º–æ–∂–µ –∑–∞–π–Ω—è—Ç–∏ 5-10 —Ö–≤–∏–ª–∏–Ω..."
echo ""

pip install -r requirements-311-modern.txt

if [ $? -eq 0 ]; then
    success "–í—Å—ñ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"
else
    error "–ü–æ–º–∏–ª–∫–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π"
    exit 1
fi

echo ""

# ==============================================================================
# –ö—Ä–æ–∫ 6: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–Ω–∏—Ö –ø–∞–∫–µ—Ç—ñ–≤
# ==============================================================================
info "=== –ö—Ä–æ–∫ 6: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–Ω–∏—Ö –ø–∞–∫–µ—Ç—ñ–≤ ==="

PACKAGES=(
    "fastapi"
    "uvicorn"
    "sqlalchemy"
    "alembic"
    "pydantic"
    "psycopg"
    "redis"
    "celery"
)

FAILED=0

for pkg in "${PACKAGES[@]}"; do
    if pip show "$pkg" > /dev/null 2>&1; then
        VERSION=$(pip show "$pkg" | grep "Version:" | cut -d' ' -f2)
        success "$pkg ($VERSION)"
    else
        error "$pkg –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"
        FAILED=1
    fi
done

echo ""

if [ $FAILED -eq 1 ]; then
    error "–î–µ—è–∫—ñ –ø–∞–∫–µ—Ç–∏ –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"
    exit 1
fi

# ==============================================================================
# –ö—Ä–æ–∫ 7: –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —ñ–º–ø–æ—Ä—Ç—ñ–≤
# ==============================================================================
info "=== –ö—Ä–æ–∫ 7: –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —ñ–º–ø–æ—Ä—Ç—ñ–≤ ==="

python << 'PYEOF'
import sys
print(f"Python: {sys.version}")

packages = [
    "fastapi",
    "sqlalchemy",
    "pydantic",
    "psycopg",
    "redis",
    "celery",
    "httpx",
    "numpy",
    "pandas",
]

failed = []
for pkg in packages:
    try:
        __import__(pkg)
        print(f"‚úÖ {pkg}")
    except ImportError as e:
        print(f"‚ùå {pkg}: {e}")
        failed.append(pkg)

if failed:
    print(f"\n‚ö†Ô∏è  –ù–µ –≤–¥–∞–ª–æ—Å—è —ñ–º–ø–æ—Ä—Ç—É–≤–∞—Ç–∏: {', '.join(failed)}")
    sys.exit(1)
else:
    print("\n‚úÖ –í—Å—ñ –ø–∞–∫–µ—Ç–∏ —ñ–º–ø–æ—Ä—Ç—É—é—Ç—å—Å—è —É—Å–ø—ñ—à–Ω–æ")
PYEOF

if [ $? -eq 0 ]; then
    success "–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —ñ–º–ø–æ—Ä—Ç—ñ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ"
else
    error "–î–µ—è–∫—ñ –ø–∞–∫–µ—Ç–∏ –Ω–µ —ñ–º–ø–æ—Ä—Ç—É—é—Ç—å—Å—è"
    exit 1
fi

echo ""

# ==============================================================================
# –ö—Ä–æ–∫ 8: –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ–π–Ω–æ–≥–æ —Ñ–∞–π–ª—É
# ==============================================================================
info "=== –ö—Ä–æ–∫ 8: –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ venv ==="

cat > "$BACKEND_DIR/.venv-info" << INFOEOF
# Predator12 venv Information
Created: $(date)
Python: $(python --version)
Pip: $(pip --version)
Location: $VENV_DIR

# Activation:
source $VENV_DIR/bin/activate

# Packages:
$(pip list --format=freeze | head -20)
...
Total packages: $(pip list | wc -l)
INFOEOF

success "–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –∑–±–µ—Ä–µ–∂–µ–Ω–∞ –≤ .venv-info"

echo ""

# ==============================================================================
# –ö—Ä–æ–∫ 9: VS Code –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
# ==============================================================================
info "=== –ö—Ä–æ–∫ 9: VS Code –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è ==="

VSCODE_DIR="$BACKEND_DIR/../.vscode"
mkdir -p "$VSCODE_DIR"

# –û–Ω–æ–≤–ª–µ–Ω–Ω—è settings.json
if [ -f "$VSCODE_DIR/settings.json" ]; then
    info "settings.json –≤–∂–µ —ñ—Å–Ω—É—î"
else
    cat > "$VSCODE_DIR/settings.json" << 'VSCEOF'
{
  "python.defaultInterpreterPath": "${workspaceFolder}/backend/venv/bin/python",
  "python.terminal.activateEnvironment": true,
  "python.linting.enabled": true,
  "python.linting.pylintEnabled": false,
  "python.linting.ruffEnabled": true,
  "python.formatting.provider": "black",
  "editor.formatOnSave": true,
  "[python]": {
    "editor.defaultFormatter": "ms-python.black-formatter",
    "editor.codeActionsOnSave": {
      "source.organizeImports": "explicit"
    }
  }
}
VSCEOF
    success "settings.json —Å—Ç–≤–æ—Ä–µ–Ω–æ"
fi

echo ""

# ==============================================================================
# –§–Ü–ù–ê–õ
# ==============================================================================
success "=========================================="
success "   Python 3.11 venv –ì–û–¢–û–í–ò–ô! üéâ"
success "=========================================="
echo ""

info "–©–æ –¥–∞–ª—ñ:"
echo ""
echo "  1. –ê–∫—Ç–∏–≤—É–≤–∞—Ç–∏ venv:"
echo "     source backend/venv/bin/activate"
echo ""
echo "  2. –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –≤–µ—Ä—Å—ñ—é:"
echo "     python --version"
echo ""
echo "  3. Health check:"
echo "     python scripts/health-check.py"
echo ""
echo "  4. –ù–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ .env:"
echo "     cd backend && cp .env.example .env"
echo ""
echo "  5. –ó–∞–ø—É—Å—Ç–∏—Ç–∏ –º—ñ–≥—Ä–∞—Ü—ñ—ó:"
echo "     alembic upgrade head"
echo ""
echo "  6. –ó–∞–ø—É—Å—Ç–∏—Ç–∏ —Å–µ—Ä–≤–µ—Ä:"
echo "     uvicorn app.main:app --reload"
echo ""

info "–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ venv:"
echo "  –†–æ–∑—Ç–∞—à—É–≤–∞–Ω–Ω—è: $VENV_DIR"
echo "  Python: $PYTHON_VERSION"
echo "  –ü–∞–∫–µ—Ç—ñ–≤ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: $(pip list | wc -l)"
echo ""

deactivate 2>/dev/null || true
