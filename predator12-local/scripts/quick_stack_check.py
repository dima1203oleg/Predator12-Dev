#!/usr/bin/env python3
"""
–°–ø—Ä–æ—â–µ–Ω–∞ –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å—Ç–∞–Ω—É Predator11 stack
"""

import subprocess
import sys
import socket
from pathlib import Path
from datetime import datetime

def check_port(port, service_name):
    """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ –ø–æ—Ä—Ç—É"""
    try:
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.settimeout(5)
        result = sock.connect_ex(('localhost', port))
        sock.close()
        if result == 0:
            return f"‚úÖ {service_name} ({port}): –î–æ—Å—Ç—É–ø–Ω–∏–π"
        else:
            return f"‚ùå {service_name} ({port}): –ù–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π"
    except Exception as e:
        return f"‚ö†Ô∏è {service_name} ({port}): –ü–æ–º–∏–ª–∫–∞ - {e}"

def check_docker_compose_status():
    """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å—É docker-compose"""
    try:
        result = subprocess.run(
            ["docker-compose", "ps", "--format", "table"],
            cwd="/Users/dima/Documents/Predator11",
            capture_output=True,
            text=True,
            timeout=30
        )
        
        if result.returncode != 0:
            return f"‚ùå Docker Compose –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π: {result.stderr}"
        
        lines = result.stdout.strip().split('\n')
        if len(lines) <= 1:
            return "‚ö†Ô∏è –ñ–æ–¥–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –Ω–µ –∑–∞–ø—É—â–µ–Ω–æ"
        
        # –ê–Ω–∞–ª—ñ–∑ —Å—Ç–∞—Ç—É—Å—ñ–≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ–≤
        running = 0
        stopped = 0
        unhealthy = 0
        
        for line in lines[1:]:  # –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫
            if 'Up' in line:
                if 'unhealthy' in line:
                    unhealthy += 1
                else:
                    running += 1
            elif 'Exit' in line:
                stopped += 1
        
        status_parts = []
        if running > 0:
            status_parts.append(f"üü¢ {running} –ø—Ä–∞—Ü—é—î")
        if unhealthy > 0:
            status_parts.append(f"üü° {unhealthy} –Ω–µ–∑–¥–æ—Ä–æ–≤—ñ")  # Orange status!
        if stopped > 0:
            status_parts.append(f"üî¥ {stopped} –∑—É–ø–∏–Ω–µ–Ω–æ")
            
        return f"Docker Compose: {', '.join(status_parts)}"
        
    except subprocess.TimeoutExpired:
        return "‚ùå Docker Compose: –¢–∞–π–º–∞—É—Ç"
    except FileNotFoundError:
        return "‚ùå Docker Compose –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"
    except Exception as e:
        return f"‚ùå Docker Compose –ø–æ–º–∏–ª–∫–∞: {e}"

def check_critical_files():
    """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–Ω–∏—Ö —Ñ–∞–π–ª—ñ–≤"""
    project_root = Path("/Users/dima/Documents/Predator11")
    critical_files = [
        "docker-compose.yml",
        ".env", 
        "backend/Dockerfile",
        "frontend/package.json"
    ]
    
    results = []
    for file_path in critical_files:
        full_path = project_root / file_path
        if full_path.exists():
            results.append(f"‚úÖ {file_path}: –Ü—Å–Ω—É—î")
        else:
            results.append(f"‚ùå {file_path}: –í—ñ–¥—Å—É—Ç–Ω—ñ–π")
    
    return results

def main():
    print("üöÄ PREDATOR11 STACK - –®–í–ò–î–ö–ê –î–Ü–ê–ì–ù–û–°–¢–ò–ö–ê")
    print("=" * 60)
    print(f"–ß–∞—Å: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print()
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–Ω–∏—Ö —Ñ–∞–π–ª—ñ–≤
    print("üìã –ö—Ä–∏—Ç–∏—á–Ω—ñ —Ñ–∞–π–ª–∏:")
    for result in check_critical_files():
        print(f"   {result}")
    
    print()
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ Docker Compose
    print("üê≥ Docker Compose —Å—Ç–∞—Ç—É—Å:")
    compose_status = check_docker_compose_status()
    print(f"   {compose_status}")
    
    print()
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–æ—Ä—Ç—ñ–≤ —Å–µ—Ä–≤—ñ—Å—ñ–≤
    print("üåê –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–æ—Ä—Ç—ñ–≤:")
    services = [
        (3000, "Frontend React"),
        (8000, "Backend API"),
        (5432, "PostgreSQL"),
        (6379, "Redis"),
        (9200, "OpenSearch"),
        (5601, "OpenSearch Dashboards"),
        (9090, "Prometheus"),
        (3001, "Grafana"),
        (3100, "Loki"),
        (8080, "Keycloak")
    ]
    
    available = 0
    total = len(services)
    
    for port, name in services:
        result = check_port(port, name)
        print(f"   {result}")
        if "–î–æ—Å—Ç—É–ø–Ω–∏–π" in result:
            available += 1
    
    print()
    print(f"üìä –ü—ñ–¥—Å—É–º–æ–∫: {available}/{total} —Å–µ—Ä–≤—ñ—Å—ñ–≤ –¥–æ—Å—Ç—É–ø–Ω—ñ")
    
    # –ê–Ω–∞–ª—ñ–∑ –ø—Ä–æ–±–ª–µ–º
    print()
    print("üîç –ú–û–ñ–õ–ò–í–Ü –ü–†–ò–ß–ò–ù–ò –û–†–ê–ù–ñ–ï–í–û–ì–û (WARNING) –°–¢–ê–¢–£–°–£:")
    print("   1. üïê –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏ —â–µ –∑–∞–ø—É—Å–∫–∞—é—Ç—å—Å—è (starting)")
    print("   2. üè• Health check –Ω–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç—å (unhealthy)")
    print("   3. üêå –ü–æ–≤—ñ–ª—å–Ω–∏–π –∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ —Ä–µ—Å—É—Ä—Å–∏")
    print("   4. üîß –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è health check")
    print()
    print("üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–Ü–á:")
    print("   ‚Ä¢ –ó–∞—á–µ–∫–∞–π—Ç–µ 2-3 —Ö–≤–∏–ª–∏–Ω–∏ –¥–ª—è –ø–æ–≤–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫—É")
    print("   ‚Ä¢ –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ª–æ–≥–∏: docker-compose logs [service_name]")
    print("   ‚Ä¢ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç—ñ—Ç—å –ø—Ä–æ–±–ª–µ–º–Ω—ñ —Å–µ—Ä–≤—ñ—Å–∏: docker-compose restart [service_name]")
    print("   ‚Ä¢ –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ .env –∑–º—ñ–Ω–Ω—ñ")
    
    print()
    print("üöÄ –î–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ—ó –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –∑–∞–ø—É—Å—Ç—ñ—Ç—å:")
    print("   docker-compose logs --tail=50")
    print("   docker-compose ps")
    
if __name__ == "__main__":
    main()
