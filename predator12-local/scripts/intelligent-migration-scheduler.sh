#!/bin/bash

# ü§ñ Predator Analytics - Intelligent Migration Scheduler
# –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–π –≤–∏–±—ñ—Ä –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ –º–æ–º–µ–Ω—Ç—É –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥—É –Ω–∞ Helm Charts

set -euo pipefail

# –ö–æ–ª—å–æ—Ä–∏
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
RED='\033[0;31m'
NC='\033[0m'

log() { echo -e "${BLUE}[$(date +'%H:%M:%S')] $1${NC}"; }
success() { echo -e "${GREEN}‚úÖ $1${NC}"; }
warning() { echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"; }
error() { echo -e "${RED}‚ùå $1${NC}"; }

# –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è
MIGRATION_SCRIPT="/Users/dima/Documents/Predator11/scripts/migrate-to-helm.sh"
MONITORING_INTERVAL=300  # 5 —Ö–≤–∏–ª–∏–Ω
MAX_WAIT_TIME=86400     # 24 –≥–æ–¥–∏–Ω–∏
LOG_FILE="/tmp/predator-migration-scheduler.log"

# –ú–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –≤–∏–±–æ—Ä—É –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ —á–∞—Å—É
check_system_metrics() {
    local cpu_usage memory_usage disk_usage network_load user_activity
    
    # CPU –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è
    cpu_usage=$(top -l 1 | grep "CPU usage" | awk '{print $3}' | sed 's/%//')
    
    # Memory –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è  
    memory_usage=$(memory_pressure | grep "System-wide memory free percentage" | awk '{print 100-$5}')
    
    # Disk I/O
    disk_usage=$(iostat -d 1 2 | tail -1 | awk '{print $3+$4}')
    
    # Network –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å (–ø—Ä–∏–±–ª–∏–∑–Ω–æ)
    network_load=$(netstat -ib | awk 'NR>1 {sum+=$7+$10} END {print sum/1024/1024}' 2>/dev/null || echo "0")
    
    # –ê–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (–∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø—Ä–æ—Ü–µ—Å—ñ–≤)
    user_activity=$(ps aux | wc -l)
    
    # –ß–∞—Å –¥–æ–±–∏ (0-23)
    current_hour=$(date +%H)
    
    echo "$cpu_usage $memory_usage $disk_usage $network_load $user_activity $current_hour"
}

# –û—Ü—ñ–Ω–∫–∞ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ—Å—Ç—ñ –º–æ–º–µ–Ω—Ç—É (0-100, –¥–µ 100 - –Ω–∞–π–∫—Ä–∞—â–µ)
calculate_migration_score() {
    local metrics=($1)
    local cpu=${metrics[0]:-50}
    local memory=${metrics[1]:-50}
    local disk=${metrics[2]:-50}
    local network=${metrics[3]:-50}
    local processes=${metrics[4]:-200}
    local hour=${metrics[5]:-12}
    
    local score=100
    
    # CPU –Ω–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è (—á–∏–º –º–µ–Ω—à–µ, —Ç–∏–º –∫—Ä–∞—â–µ)
    if (( $(echo "$cpu > 70" | bc -l) )); then
        score=$((score - 30))
    elif (( $(echo "$cpu > 50" | bc -l) )); then
        score=$((score - 15))
    fi
    
    # Memory –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è
    if (( $(echo "$memory > 80" | bc -l) )); then
        score=$((score - 25))
    elif (( $(echo "$memory > 60" | bc -l) )); then
        score=$((score - 10))
    fi
    
    # Disk I/O –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å
    if (( $(echo "$disk > 100" | bc -l) )); then
        score=$((score - 20))
    fi
    
    # –ß–∞—Å –¥–æ–±–∏ (–∫—Ä–∞—â–∏–π —á–∞—Å: 2-6 —Ä–∞–Ω–∫—É –∞–±–æ 14-16)
    if [[ $hour -ge 2 && $hour -le 6 ]]; then
        score=$((score + 20))  # –ù—ñ—á - –Ω–∞–π–∫—Ä–∞—â–∏–π —á–∞—Å
    elif [[ $hour -ge 14 && $hour -le 16 ]]; then
        score=$((score + 10))  # –û–±—ñ–¥ - –¥–æ–±—Ä–∏–π —á–∞—Å
    elif [[ $hour -ge 9 && $hour -le 18 ]]; then
        score=$((score - 15))  # –†–æ–±–æ—á–∏–π —á–∞—Å - –≥—ñ—Ä—à–µ
    fi
    
    # –î–µ–Ω—å —Ç–∏–∂–Ω—è
    local weekday=$(date +%u)  # 1=Monday, 7=Sunday
    if [[ $weekday -eq 6 || $weekday -eq 7 ]]; then
        score=$((score + 15))  # –í–∏—Ö—ñ–¥–Ω—ñ - –∫—Ä–∞—â–µ
    fi
    
    # –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∏—Ö –ø—Ä–æ—Ü–µ—Å—ñ–≤
    if [[ $processes -gt 300 ]]; then
        score=$((score - 10))
    fi
    
    # –û–±–º–µ–∂–µ–Ω–Ω—è score
    if [[ $score -lt 0 ]]; then score=0; fi
    if [[ $score -gt 100 ]]; then score=100; fi
    
    echo $score
}

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—ñ —Å–∏—Å—Ç–µ–º–∏
check_system_readiness() {
    local issues=0
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏—Ö —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ñ–≤
    for tool in kubectl helm docker; do
        if ! command -v $tool &> /dev/null; then
            error "$tool –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"
            ((issues++))
        fi
    done
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø—É –¥–æ Kubernetes
    if ! kubectl cluster-info &> /dev/null; then
        warning "–ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ Kubernetes –∫–ª–∞—Å—Ç–µ—Ä–∞"
        ((issues++))
    fi
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ Docker
    if ! docker info &> /dev/null; then
        warning "Docker –Ω–µ –∑–∞–ø—É—â–µ–Ω–∏–π"
        ((issues++))
    fi
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤—ñ–ª—å–Ω–æ–≥–æ –º—ñ—Å—Ü—è –Ω–∞ –¥–∏—Å–∫—É
    local free_space=$(df / | tail -1 | awk '{print $4}')
    if [[ $free_space -lt 10000000 ]]; then  # –ú–µ–Ω—à–µ 10GB
        warning "–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –≤—ñ–ª—å–Ω–æ–≥–æ –º—ñ—Å—Ü—è –Ω–∞ –¥–∏—Å–∫—É"
        ((issues++))
    fi
    
    return $issues
}

# –í—ñ–¥–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–Ω—è
send_notification() {
    local message="$1"
    local level="$2"  # info, warning, error
    
    # –õ–æ–≥
    echo "[$(date)] [$level] $message" >> "$LOG_FILE"
    
    # Terminal notification (macOS)
    if command -v osascript &> /dev/null; then
        osascript -e "display notification \"$message\" with title \"Predator Analytics Migration\""
    fi
    
    # Slack notification (—è–∫—â–æ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ)
    if [[ -n "${SLACK_WEBHOOK_URL:-}" ]]; then
        curl -X POST -H 'Content-type: application/json' \
            --data "{\"text\":\"ü§ñ Predator Migration: $message\"}" \
            "$SLACK_WEBHOOK_URL" &> /dev/null || true
    fi
}

# –û—Å–Ω–æ–≤–Ω–∏–π —Ü–∏–∫–ª –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É
monitor_and_schedule() {
    local start_time=$(date +%s)
    local best_score=0
    local wait_count=0
    local max_wait_cycles=$((MAX_WAIT_TIME / MONITORING_INTERVAL))
    
    log "üîç –ü–æ—á–∞—Ç–æ–∫ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É –¥–ª—è –≤–∏–±–æ—Ä—É –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ –º–æ–º–µ–Ω—Ç—É –º—ñ–≥—Ä–∞—Ü—ñ—ó"
    log "üìä –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ–∂–Ω—ñ $MONITORING_INTERVAL —Å–µ–∫—É–Ω–¥, –º–∞–∫—Å–∏–º—É–º $MAX_WAIT_TIME —Å–µ–∫—É–Ω–¥"
    
    while true; do
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—ñ —Å–∏—Å—Ç–µ–º–∏
        if ! check_system_readiness; then
            warning "–°–∏—Å—Ç–µ–º–∞ –Ω–µ –≥–æ—Ç–æ–≤–∞ –¥–ª—è –º—ñ–≥—Ä–∞—Ü—ñ—ó, —á–µ–∫–∞—î–º–æ..."
            sleep $MONITORING_INTERVAL
            continue
        fi
        
        # –ó–±—ñ—Ä –º–µ—Ç—Ä–∏–∫
        local metrics=$(check_system_metrics)
        local score=$(calculate_migration_score "$metrics")
        
        log "üìà –ü–æ—Ç–æ—á–Ω–∏–π score: $score/100 (CPU: $(echo $metrics | cut -d' ' -f1)%, Memory: $(echo $metrics | cut -d' ' -f2)%, Hour: $(echo $metrics | cut -d' ' -f6))"
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–æ—Ä–æ–≥—ñ–≤ –¥–ª—è –∑–∞–ø—É—Å–∫—É –º—ñ–≥—Ä–∞—Ü—ñ—ó
        if [[ $score -ge 85 ]]; then
            success "üéØ –í—ñ–¥–º—ñ–Ω–Ω—ñ —É–º–æ–≤–∏ –¥–ª—è –º—ñ–≥—Ä–∞—Ü—ñ—ó (score: $score)!"
            return 0
        elif [[ $score -ge 75 && $wait_count -gt 20 ]]; then  # –ü—ñ—Å–ª—è –≥–æ–¥–∏–Ω–∏ —á–µ–∫–∞–Ω–Ω—è
            success "‚úÖ –•–æ—Ä–æ—à—ñ —É–º–æ–≤–∏ –¥–ª—è –º—ñ–≥—Ä–∞—Ü—ñ—ó (score: $score)"
            return 0
        elif [[ $score -ge 60 && $wait_count -gt 100 ]]; then # –ü—ñ—Å–ª—è 8+ –≥–æ–¥–∏–Ω
            warning "‚è∞ –ó–∞–ø—É—Å–∫–∞—î–º–æ –º—ñ–≥—Ä–∞—Ü—ñ—é —á–µ—Ä–µ–∑ —Ç—Ä–∏–≤–∞–ª–µ –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è (score: $score)"
            return 0
        fi
        
        # –û–Ω–æ–≤–ª–µ–Ω–Ω—è –Ω–∞–π–∫—Ä–∞—â–æ–≥–æ score
        if [[ $score -gt $best_score ]]; then
            best_score=$score
        fi
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —á–∞—Å—É –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è
        wait_count=$((wait_count + 1))
        if [[ $wait_count -ge $max_wait_cycles ]]; then
            warning "‚è±Ô∏è –î–æ—Å—è–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π —á–∞—Å –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è, –∑–∞–ø—É—Å–∫–∞—î–º–æ –º—ñ–≥—Ä–∞—Ü—ñ—é"
            return 0
        fi
        
        # –ü—Ä–æ–≥–Ω–æ–∑—É–≤–∞–Ω–Ω—è –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞
        local current_hour=$(date +%H)
        local next_optimal=""
        
        if [[ $current_hour -lt 2 ]]; then
            next_optimal="02:00 —Å—å–æ–≥–æ–¥–Ω—ñ"
        elif [[ $current_hour -lt 6 ]]; then
            next_optimal="—á–µ—Ä–µ–∑ $((6 - current_hour)) –≥–æ–¥–∏–Ω"
        elif [[ $current_hour -lt 14 ]]; then
            next_optimal="14:00 —Å—å–æ–≥–æ–¥–Ω—ñ"
        else
            next_optimal="02:00 –∑–∞–≤—Ç—Ä–∞"
        fi
        
        log "‚è≥ –û—á—ñ–∫—É–≤–∞–Ω–Ω—è... –ù–∞—Å—Ç—É–ø–Ω–µ –æ–ø—Ç–∏–º–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ: $next_optimal (–Ω–∞–π–∫—Ä–∞—â–∏–π score: $best_score)"
        
        # –°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –∫–æ–∂–Ω—ñ 30 —Ö–≤–∏–ª–∏–Ω
        if [[ $((wait_count % 6)) -eq 0 ]]; then
            send_notification "–û—á—ñ–∫—É–≤–∞–Ω–Ω—è –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ –º–æ–º–µ–Ω—Ç—É –¥–ª—è –º—ñ–≥—Ä–∞—Ü—ñ—ó. Score: $score/100" "info"
        fi
        
        sleep $MONITORING_INTERVAL
    done
}

# –í–∏–∫–æ–Ω–∞–Ω–Ω—è –º—ñ–≥—Ä–∞—Ü—ñ—ó
execute_migration() {
    log "üöÄ –†–æ–∑–ø–æ—á–∏–Ω–∞—î–º–æ –º—ñ–≥—Ä–∞—Ü—ñ—é –Ω–∞ Kubernetes..."
    
    send_notification "–†–æ–∑–ø–æ—á–∏–Ω–∞—î–º–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω—É –º—ñ–≥—Ä–∞—Ü—ñ—é Predator Analytics –Ω–∞ Kubernetes" "info"
    
    # –ó–∞–ø—É—Å–∫ –º—ñ–≥—Ä–∞—Ü—ñ—ó –∑ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    if [[ -x "$MIGRATION_SCRIPT" ]]; then
        "$MIGRATION_SCRIPT" \
            --registry "${DOCKER_REGISTRY:-localhost:5000}" \
            --namespace "predator-analytics"
    else
        error "–°–∫—Ä–∏–ø—Ç –º—ñ–≥—Ä–∞—Ü—ñ—ó –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–±–æ –Ω–µ –º–∞—î –ø—Ä–∞–≤–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è: $MIGRATION_SCRIPT"
        return 1
    fi
}

# –ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è
main() {
    log "ü§ñ Predator Analytics - Intelligent Migration Scheduler"
    
    # –û–±—Ä–æ–±–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤
    while [[ $# -gt 0 ]]; do
        case $1 in
            --force)
                log "üî® –§–æ—Ä—Å–æ–≤–∞–Ω–∞ –º—ñ–≥—Ä–∞—Ü—ñ—è –±–µ–∑ –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è"
                execute_migration
                exit $?
                ;;
            --check-only)
                local metrics=$(check_system_metrics)
                local score=$(calculate_migration_score "$metrics")
                echo "–ü–æ—Ç–æ—á–Ω–∏–π score: $score/100"
                echo "–ú–µ—Ç—Ä–∏–∫–∏: $metrics"
                exit 0
                ;;
            --max-wait)
                MAX_WAIT_TIME="$2"
                shift 2
                ;;
            --interval)
                MONITORING_INTERVAL="$2"
                shift 2
                ;;
            --slack-webhook)
                SLACK_WEBHOOK_URL="$2"
                shift 2
                ;;
            -h|--help)
                echo "–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: $0 [OPTIONS]"
                echo "OPTIONS:"
                echo "  --force              –§–æ—Ä—Å—É–≤–∞—Ç–∏ –º—ñ–≥—Ä–∞—Ü—ñ—é –Ω–µ–≥–∞–π–Ω–æ"
                echo "  --check-only         –¢—ñ–ª—å–∫–∏ –ø–æ–∫–∞–∑–∞—Ç–∏ –ø–æ—Ç–æ—á–Ω–∏–π score"
                echo "  --max-wait SECONDS   –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π —á–∞—Å –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º: 86400)"
                echo "  --interval SECONDS   –Ü–Ω—Ç–µ—Ä–≤–∞–ª –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º: 300)"
                echo "  --slack-webhook URL  Slack webhook –¥–ª—è —Å–ø–æ–≤—ñ—â–µ–Ω—å"
                echo "  -h, --help           –ü–æ–∫–∞–∑–∞—Ç–∏ —Ü—é –¥–æ–≤—ñ–¥–∫—É"
                exit 0
                ;;
            *)
                error "–ù–µ–≤—ñ–¥–æ–º–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä: $1"
                exit 1
                ;;
        esac
    done
    
    # –ü–æ—á–∞—Ç–∫–æ–≤–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞
    log "üîç –ü–æ—á–∞—Ç–∫–æ–≤–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–∏..."
    if ! check_system_readiness; then
        error "–°–∏—Å—Ç–µ–º–∞ –Ω–µ –≥–æ—Ç–æ–≤–∞ –¥–ª—è –º—ñ–≥—Ä–∞—Ü—ñ—ó"
        exit 1
    fi
    
    # –ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ —Ç–∞ –ø–ª–∞–Ω—É–≤–∞–Ω–Ω—è
    if monitor_and_schedule; then
        execute_migration
        if [[ $? -eq 0 ]]; then
            success "üéâ –ú—ñ–≥—Ä–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø—ñ—à–Ω–æ!"
            send_notification "–ú—ñ–≥—Ä–∞—Ü—ñ—è Predator Analytics –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø—ñ—à–Ω–æ! üéâ" "info"
        else
            error "–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –º—ñ–≥—Ä–∞—Ü—ñ—ó"
            send_notification "–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –º—ñ–≥—Ä–∞—Ü—ñ—ó Predator Analytics" "error"
            exit 1
        fi
    else
        error "–ü–æ–º–∏–ª–∫–∞ –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫–∞"
        exit 1
    fi
}

# –ó–∞–ø—É—Å–∫ —É —Ñ–æ–Ω–æ–≤–æ–º—É —Ä–µ–∂–∏–º—ñ –∑ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—é –∫–æ–Ω—Ç—Ä–æ–ª—é
if [[ "${1:-}" == "--daemon" ]]; then
    log "üîÑ –ó–∞–ø—É—Å–∫ —É —Ñ–æ–Ω–æ–≤–æ–º—É —Ä–µ–∂–∏–º—ñ..."
    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è PID —Ñ–∞–π–ª—É
    echo $$ > /tmp/predator-migration-scheduler.pid
    
    # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –ª–æ–≥—ñ–≤
    exec > >(tee -a "$LOG_FILE") 2>&1
    
    # –ó–∞–ø—É—Å–∫
    main "${@:2}"
else
    main "$@"
fi
