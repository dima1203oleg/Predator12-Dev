#!/usr/bin/env bash

# ==============================================================================
# PREDATOR12 - VS Code Configuration Fixer
# ==============================================================================
# –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≤–∏–ø—Ä–∞–≤–ª—è—î –≤—Å—ñ –ø–æ–º–∏–ª–∫–∏ VS Code
# ==============================================================================

set -Eeuo pipefail

RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

info() { echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"; }
success() { echo -e "${GREEN}‚úÖ $1${NC}"; }
warning() { echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"; }
error() { echo -e "${RED}‚ùå $1${NC}"; }

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(dirname "$SCRIPT_DIR")"
VSCODE_DIR="$PROJECT_ROOT/.vscode"

cat << 'EOF'
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë          PREDATOR12 - VS Code Config Fixer                   ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
EOF

echo ""

# ==============================================================================
# 1. –°—Ç–≤–æ—Ä–∏—Ç–∏ venv (—è–∫—â–æ –Ω–µ–º–∞—î)
# ==============================================================================

info "=== –ö—Ä–æ–∫ 1: Python venv ==="

BACKEND_DIR="$PROJECT_ROOT/backend"
VENV_DIR="$BACKEND_DIR/venv"

if [ ! -d "$VENV_DIR" ]; then
    warning "venv –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, —Å—Ç–≤–æ—Ä—é—é..."
    cd "$BACKEND_DIR"
    python3.11 -m venv venv
    success "venv —Å—Ç–≤–æ—Ä–µ–Ω–æ"
else
    success "venv –≤–∂–µ —ñ—Å–Ω—É—î"
fi

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ Python –≤–µ—Ä—Å—ñ—ó
if [ -f "$VENV_DIR/bin/python" ]; then
    PYTHON_VERSION=$("$VENV_DIR/bin/python" --version 2>&1)
    info "Python: $PYTHON_VERSION"
else
    error "venv/bin/python –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!"
    exit 1
fi

echo ""

# ==============================================================================
# 2. Backup —Å—Ç–∞—Ä–∏—Ö –∫–æ–Ω—Ñ—ñ–≥—ñ–≤
# ==============================================================================

info "=== –ö—Ä–æ–∫ 2: Backup –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ–π ==="

TIMESTAMP=$(date +%Y%m%d_%H%M%S)

if [ -f "$VSCODE_DIR/settings.json" ]; then
    cp "$VSCODE_DIR/settings.json" "$VSCODE_DIR/settings.json.backup.$TIMESTAMP"
    success "settings.json ‚Üí backup"
fi

if [ -f "$VSCODE_DIR/launch.json" ]; then
    cp "$VSCODE_DIR/launch.json" "$VSCODE_DIR/launch.json.backup.$TIMESTAMP"
    success "launch.json ‚Üí backup"
fi

echo ""

# ==============================================================================
# 3. –°—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–∏–π settings.json
# ==============================================================================

info "=== –ö—Ä–æ–∫ 3: –°—Ç–≤–æ—Ä–µ–Ω–Ω—è settings.json ==="

cat > "$VSCODE_DIR/settings.json" << 'SETTINGS_EOF'
{
    "python.defaultInterpreterPath": "${workspaceFolder}/backend/venv/bin/python",
    "python.envFile": "${workspaceFolder}/backend/.env",
    "python.terminal.activateEnvironment": true,
    "python.testing.pytestEnabled": true,
    "python.testing.pytestArgs": ["backend/tests"],
    "python.linting.enabled": true,
    "python.linting.pylintEnabled": false,
    "python.linting.flake8Enabled": true,
    "python.formatting.provider": "black",
    "python.formatting.blackArgs": ["--line-length=100"],
    "python.analysis.extraPaths": [
        "${workspaceFolder}/backend",
        "${workspaceFolder}/backend/app"
    ],
    "typescript.tsdk": "frontend/node_modules/typescript/lib",
    "typescript.enablePromptUseWorkspaceTsdk": true,
    "editor.formatOnSave": true,
    "editor.codeActionsOnSave": {
        "source.organizeImports": "explicit"
    },
    "files.exclude": {
        "**/.git": true,
        "**/.DS_Store": true,
        "**/__pycache__": true,
        "**/*.pyc": true,
        "**/.pytest_cache": true,
        "**/.ruff_cache": true,
        "**/node_modules": true,
        "**/.venv": false
    },
    "files.watcherExclude": {
        "**/.git/objects/**": true,
        "**/.git/subtree-cache/**": true,
        "**/node_modules/**": true,
        "**/.venv/**": true,
        "**/backups/**": true,
        "**/logs/**": true
    },
    "terminal.integrated.env.osx": {
        "PYTHONPATH": "${workspaceFolder}/backend",
        "ENV_FILE": "${workspaceFolder}/backend/.env"
    },
    "files.autoSave": "onFocusChange",
    "git.enableSmartCommit": true,
    "git.confirmSync": false,
    "[python]": {
        "editor.defaultFormatter": "ms-python.black-formatter",
        "editor.formatOnSave": true,
        "editor.codeActionsOnSave": {
            "source.organizeImports": "explicit"
        }
    },
    "[typescript]": {
        "editor.defaultFormatter": "esbenp.prettier-vscode",
        "editor.formatOnSave": true
    },
    "[typescriptreact]": {
        "editor.defaultFormatter": "esbenp.prettier-vscode",
        "editor.formatOnSave": true
    },
    "[json]": {
        "editor.defaultFormatter": "esbenp.prettier-vscode"
    },
    "[jsonc]": {
        "editor.defaultFormatter": "esbenp.prettier-vscode"
    }
}
SETTINGS_EOF

success "settings.json —Å—Ç–≤–æ—Ä–µ–Ω–æ"

echo ""

# ==============================================================================
# 4. –°—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–∏–π launch.json
# ==============================================================================

info "=== –ö—Ä–æ–∫ 4: –°—Ç–≤–æ—Ä–µ–Ω–Ω—è launch.json ==="

cat > "$VSCODE_DIR/launch.json" << 'LAUNCH_EOF'
{
    "version": "0.2.0",
    "configurations": [
        {
            "name": "Backend: FastAPI (debugpy)",
            "type": "debugpy",
            "request": "launch",
            "module": "uvicorn",
            "args": [
                "app.main:app",
                "--reload",
                "--host", "0.0.0.0",
                "--port", "8000"
            ],
            "jinja": true,
            "console": "integratedTerminal",
            "cwd": "${workspaceFolder}/backend",
            "envFile": "${workspaceFolder}/backend/.env",
            "justMyCode": false
        },
        {
            "name": "Backend: Pytest",
            "type": "debugpy",
            "request": "launch",
            "module": "pytest",
            "args": ["tests/", "-v", "-s"],
            "console": "integratedTerminal",
            "cwd": "${workspaceFolder}/backend",
            "envFile": "${workspaceFolder}/backend/.env",
            "justMyCode": false
        },
        {
            "name": "Backend: Celery Worker",
            "type": "debugpy",
            "request": "launch",
            "module": "celery",
            "args": ["-A", "app.celery_app", "worker", "--loglevel=info"],
            "console": "integratedTerminal",
            "cwd": "${workspaceFolder}/backend",
            "envFile": "${workspaceFolder}/backend/.env"
        },
        {
            "name": "Frontend: Next.js Dev",
            "type": "node",
            "request": "launch",
            "cwd": "${workspaceFolder}/frontend",
            "runtimeExecutable": "npm",
            "runtimeArgs": ["run", "dev"],
            "console": "integratedTerminal",
            "serverReadyAction": {
                "pattern": "- Local:.+(https?://.+)",
                "uriFormat": "%s",
                "action": "debugWithChrome"
            }
        },
        {
            "name": "Scripts: Health Check",
            "type": "debugpy",
            "request": "launch",
            "program": "${workspaceFolder}/scripts/health-check.py",
            "console": "integratedTerminal",
            "cwd": "${workspaceFolder}",
            "justMyCode": false
        }
    ],
    "compounds": [
        {
            "name": "Full Stack: Backend + Frontend",
            "configurations": [
                "Backend: FastAPI (debugpy)",
                "Frontend: Next.js Dev"
            ],
            "stopAll": true
        }
    ]
}
LAUNCH_EOF

success "launch.json —Å—Ç–≤–æ—Ä–µ–Ω–æ"

echo ""

# ==============================================================================
# 5. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞
# ==============================================================================

info "=== –ö—Ä–æ–∫ 5: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ ==="

# –í–∞–ª—ñ–¥–∞—Ü—ñ—è JSON
if command -v python3 &> /dev/null; then
    if python3 -m json.tool "$VSCODE_DIR/settings.json" > /dev/null 2>&1; then
        success "settings.json –≤–∞–ª—ñ–¥–Ω–∏–π"
    else
        error "settings.json –º–∞—î –ø–æ–º–∏–ª–∫–∏ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å—É!"
    fi
    
    if python3 -m json.tool "$VSCODE_DIR/launch.json" > /dev/null 2>&1; then
        success "launch.json –≤–∞–ª—ñ–¥–Ω–∏–π"
    else
        error "launch.json –º–∞—î –ø–æ–º–∏–ª–∫–∏ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å—É!"
    fi
fi

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ venv
if [ -f "$VENV_DIR/bin/python" ]; then
    success "Python venv –≥–æ—Ç–æ–≤–∏–π"
else
    warning "Python venv –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"
fi

echo ""

# ==============================================================================
# –§—ñ–Ω–∞–ª
# ==============================================================================

success "=========================================="
success "   VS CODE –ö–û–ù–§–Ü–ì–£–†–ê–¶–Ü–Ø –í–ò–ü–†–ê–í–õ–ï–ù–ê! ‚úÖ"
success "=========================================="
echo ""

cat << 'EOF'
üìã –©–æ –±—É–ª–æ –∑—Ä–æ–±–ª–µ–Ω–æ:

  ‚úÖ settings.json –±–µ–∑ –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤
  ‚úÖ launch.json –∑ debugpy/node
  ‚úÖ Python paths –æ–Ω–æ–≤–ª–µ–Ω–æ
  ‚úÖ analysis.extraPaths –¥–æ–¥–∞–Ω–æ
  ‚úÖ Backup —Å—Ç–≤–æ—Ä–µ–Ω–æ

üéØ –ù–∞—Å—Ç—É–ø–Ω—ñ –∫—Ä–æ–∫–∏:

  1. –ü–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ VS Code:
     Command Palette ‚Üí Developer: Reload Window

  2. –í–∏–±—Ä–∞—Ç–∏ Python interpreter:
     Command Palette ‚Üí Python: Select Interpreter
     ‚Üí predator12-local/backend/venv/bin/python

  3. –í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ (—è–∫—â–æ —â–µ –Ω–µ):
     cd backend
     source venv/bin/activate
     pip install -r requirements-311-modern.txt

  4. –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ imports:
     –í—ñ–¥–∫—Ä–∏—Ç–∏ backend/app/main.py
     ‚Üí –ú–∞—î –ù–ï –ø–æ–∫–∞–∑—É–≤–∞—Ç–∏ –ø–æ–º–∏–ª–æ–∫

  5. –°–ø—Ä–æ–±—É–≤–∞—Ç–∏ debug:
     Run and Debug ‚Üí Backend: FastAPI (debugpy)

üìö –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—è:
  –î–∏–≤. VSCODE_FIXES.md –¥–ª—è –¥–µ—Ç–∞–ª–µ–π

EOF

info "Backup —Ñ–∞–π–ª–∏: $VSCODE_DIR/*.backup.$TIMESTAMP"
