#!/usr/bin/env bash

# ==============================================================================
# PREDATOR12 - Start All Services
# ==============================================================================
# –ó–∞–ø—É—Å–∫–∞—î –≤—Å—ñ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ —Å–µ—Ä–≤—ñ—Å–∏ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ—ó —Ä–æ–∑—Ä–æ–±–∫–∏
# ==============================================================================

set -Eeuo pipefail

# –ö–æ–ª—å–æ—Ä–∏
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m'

info() { echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"; }
success() { echo -e "${GREEN}‚úÖ $1${NC}"; }
warning() { echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"; }
error() { echo -e "${RED}‚ùå $1${NC}"; }

SCRIPT_DIR="${0:A:h}"
PROJECT_ROOT="$(cd "$SCRIPT_DIR/.." && pwd)"

# ==============================================================================
# Banner
# ==============================================================================
cat << 'EOF'
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë          PREDATOR12 - Local Development Environment          ‚ïë
‚ïë                      Start All Services                      ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
EOF

echo ""

# ==============================================================================
# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–æ—Ä—Ç—ñ–≤
# ==============================================================================
info "=== –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–æ—Ä—Ç—ñ–≤ ==="

"$SCRIPT_DIR/manage-ports.sh" check

read "REPLY?–ó–≤—ñ–ª—å–Ω–∏—Ç–∏ –∑–∞–π–Ω—è—Ç—ñ –ø–æ—Ä—Ç–∏ (–æ–∫—Ä—ñ–º PostgreSQL)? (y/N): "
if [[ $REPLY =~ ^[Yy]$ ]]; then
    "$SCRIPT_DIR/manage-ports.sh" free-dev
fi

echo ""

# ==============================================================================
# PostgreSQL
# ==============================================================================
info "=== PostgreSQL ==="

if lsof -i :5432 >/dev/null 2>&1; then
    success "PostgreSQL –≤–∂–µ –∑–∞–ø—É—â–µ–Ω–æ"
else
    info "–ó–∞–ø—É—Å–∫–∞—é PostgreSQL..."
    if command -v brew >/dev/null 2>&1; then
        brew services start postgresql@14 || brew services start postgresql
        sleep 2
        success "PostgreSQL –∑–∞–ø—É—â–µ–Ω–æ"
    else
        warning "Homebrew –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –ó–∞–ø—É—Å—Ç—ñ—Ç—å PostgreSQL –≤—Ä—É—á–Ω—É."
    fi
fi

echo ""

# ==============================================================================
# Redis
# ==============================================================================
info "=== Redis ==="

if lsof -i :6379 >/dev/null 2>&1; then
    success "Redis –≤–∂–µ –∑–∞–ø—É—â–µ–Ω–æ"
else
    info "–ó–∞–ø—É—Å–∫–∞—é Redis..."
    if command -v brew >/dev/null 2>&1; then
        brew services start redis
        sleep 1
        success "Redis –∑–∞–ø—É—â–µ–Ω–æ"
    else
        warning "Homebrew –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –ó–∞–ø—É—Å—Ç—ñ—Ç—å Redis –≤—Ä—É—á–Ω—É."
    fi
fi

echo ""

# ==============================================================================
# OpenSearch (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ)
# ==============================================================================
info "=== OpenSearch (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ) ==="

if lsof -i :9200 >/dev/null 2>&1; then
    success "OpenSearch –≤–∂–µ –∑–∞–ø—É—â–µ–Ω–æ"
else
    read "REPLY?–ó–∞–ø—É—Å—Ç–∏—Ç–∏ OpenSearch? (y/N): "
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        if command -v brew >/dev/null 2>&1; then
            brew services start opensearch
            sleep 3
            success "OpenSearch –∑–∞–ø—É—â–µ–Ω–æ"
            
            # Dashboards
            if command -v opensearch-dashboards >/dev/null 2>&1; then
                read "REPLY?–ó–∞–ø—É—Å—Ç–∏—Ç–∏ OpenSearch Dashboards? (y/N): "
                if [[ $REPLY =~ ^[Yy]$ ]]; then
                    brew services start opensearch-dashboards
                    sleep 2
                    success "OpenSearch Dashboards –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ http://localhost:5601"
                fi
            fi
        else
            warning "OpenSearch –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ. –î–∏–≤. OPENSEARCH_SETUP_GUIDE.md"
        fi
    fi
fi

echo ""

# ==============================================================================
# Backend (FastAPI)
# ==============================================================================
info "=== Backend (FastAPI) ==="

cd "$PROJECT_ROOT/backend"

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ venv
if [ ! -d "venv" ]; then
    error "venv –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!"
    info "–ó–∞–ø—É—Å—Ç—ñ—Ç—å: python3.11 -m venv venv && source venv/bin/activate && pip install -r requirements-311-modern.txt"
    exit 1
fi

# –ê–∫—Ç–∏–≤–∞—Ü—ñ—è venv
source venv/bin/activate

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ .env
if [ ! -f ".env" ]; then
    warning ".env –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"
    if [ -f ".env.example" ]; then
        info "–ö–æ–ø—ñ—é—é .env.example -> .env"
        cp .env.example .env
        warning "–í—ñ–¥—Ä–µ–¥–∞–≥—É–π—Ç–µ .env –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º!"
    fi
fi

# –ú—ñ–≥—Ä–∞—Ü—ñ—ó
info "–ó–∞—Å—Ç–æ—Å–æ–≤—É—é –º—ñ–≥—Ä–∞—Ü—ñ—ó –ë–î..."
if [ -f "alembic.ini" ]; then
    alembic upgrade head
    success "–ú—ñ–≥—Ä–∞—Ü—ñ—ó –∑–∞—Å—Ç–æ—Å–æ–≤–∞–Ω–æ"
else
    warning "alembic.ini –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, –ø—Ä–æ–ø—É—Å–∫–∞—é –º—ñ–≥—Ä–∞—Ü—ñ—ó"
fi

# –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –≤ —Ñ–æ–Ω—ñ
info "–ó–∞–ø—É—Å–∫–∞—é FastAPI —Å–µ—Ä–≤–µ—Ä..."
nohup uvicorn app.main:app --reload --host 0.0.0.0 --port 8000 > "$PROJECT_ROOT/logs/backend.log" 2>&1 &
BACKEND_PID=$!

sleep 3

if kill -0 $BACKEND_PID 2>/dev/null; then
    success "Backend –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ http://localhost:8000 (PID: $BACKEND_PID)"
    echo $BACKEND_PID > "$PROJECT_ROOT/.backend.pid"
else
    error "–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–ø—É—Å—Ç–∏—Ç–∏ backend. –ü–µ—Ä–µ–≥–ª—è–Ω—å—Ç–µ logs/backend.log"
fi

echo ""

# ==============================================================================
# Celery Worker (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ)
# ==============================================================================
info "=== Celery Worker (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ) ==="

read "REPLY?–ó–∞–ø—É—Å—Ç–∏—Ç–∏ Celery Worker? (y/N): "
if [[ $REPLY =~ ^[Yy]$ ]]; then
    info "–ó–∞–ø—É—Å–∫–∞—é Celery Worker..."
    nohup celery -A app.celery_app worker --loglevel=info > "$PROJECT_ROOT/logs/celery.log" 2>&1 &
    CELERY_PID=$!
    echo $CELERY_PID > "$PROJECT_ROOT/.celery.pid"
    success "Celery Worker –∑–∞–ø—É—â–µ–Ω–æ (PID: $CELERY_PID)"
    
    # Flower
    read "REPLY?–ó–∞–ø—É—Å—Ç–∏—Ç–∏ Celery Flower (monitoring)? (y/N): "
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        nohup celery -A app.celery_app flower --port=5555 > "$PROJECT_ROOT/logs/flower.log" 2>&1 &
        FLOWER_PID=$!
        echo $FLOWER_PID > "$PROJECT_ROOT/.flower.pid"
        success "Celery Flower –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ http://localhost:5555 (PID: $FLOWER_PID)"
    fi
fi

echo ""

# ==============================================================================
# Frontend (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ)
# ==============================================================================
info "=== Frontend (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ) ==="

if [ -d "$PROJECT_ROOT/frontend" ]; then
    read "REPLY?–ó–∞–ø—É—Å—Ç–∏—Ç–∏ Frontend? (y/N): "
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        cd "$PROJECT_ROOT/frontend"
        
        if [ ! -d "node_modules" ]; then
            info "–í—Å—Ç–∞–Ω–æ–≤–ª—é—é npm –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ..."
            npm install
        fi
        
        info "–ó–∞–ø—É—Å–∫–∞—é Frontend..."
        nohup npm run dev > "$PROJECT_ROOT/logs/frontend.log" 2>&1 &
        FRONTEND_PID=$!
        echo $FRONTEND_PID > "$PROJECT_ROOT/.frontend.pid"
        sleep 3
        success "Frontend –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ http://localhost:3000 (PID: $FRONTEND_PID)"
    fi
else
    warning "Frontend –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞"
fi

echo ""

# ==============================================================================
# –ü—ñ–¥—Å—É–º–æ–∫
# ==============================================================================
success "=========================================="
success "   –í–°–Ü –°–ï–†–í–Ü–°–ò –ó–ê–ü–£–©–ï–ù–û! üöÄ"
success "=========================================="
echo ""

cat << 'EOF'
üìç –î–æ—Å—Ç—É–ø–Ω—ñ —Å–µ—Ä–≤—ñ—Å–∏:

  üåê Backend API:        http://localhost:8000
  üìö API Docs:           http://localhost:8000/docs
  üé® Frontend:           http://localhost:3000
  üóÑÔ∏è  PostgreSQL:         localhost:5432
  üî¥ Redis:              localhost:6379
  üîç OpenSearch:         http://localhost:9200
  üìä OpenSearch Dash:    http://localhost:5601
  üå∏ Celery Flower:      http://localhost:5555

üìã –ö–æ—Ä–∏—Å–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:

  # –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –ª–æ–≥–∏
  tail -f logs/backend.log
  tail -f logs/celery.log
  
  # –ó—É–ø–∏–Ω–∏—Ç–∏ —Å–µ—Ä–≤—ñ—Å–∏
  ./scripts/stop-all.sh
  
  # –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å
  ./scripts/manage-ports.sh check
  
  # Health check
  python scripts/health-check.py

EOF

# –ó–±–µ—Ä–µ–≥—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∑–∞–ø—É—â–µ–Ω—ñ –ø—Ä–æ—Ü–µ—Å–∏
cat > "$PROJECT_ROOT/.running-services.txt" << EOF
# –ó–∞–ø—É—â–µ–Ω—ñ —Å–µ—Ä–≤—ñ—Å–∏ Predator12
# $(date)

Backend PID: ${BACKEND_PID:-N/A}
Celery PID: ${CELERY_PID:-N/A}
Flower PID: ${FLOWER_PID:-N/A}
Frontend PID: ${FRONTEND_PID:-N/A}
EOF

info "–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –∑–∞–ø—É—â–µ–Ω—ñ –ø—Ä–æ—Ü–µ—Å–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–∞ —É .running-services.txt"
echo ""

deactivate 2>/dev/null || true
