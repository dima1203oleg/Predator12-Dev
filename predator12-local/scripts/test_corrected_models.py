#!/usr/bin/env python3
"""
üß™ –¢–ï–°–¢–£–í–ê–ù–ù–Ø –í–°–Ü–• 58 –í–ò–ü–†–ê–í–õ–ï–ù–ò–• AI –ú–û–î–ï–õ–ï–ô
–ó –ø—Ä–∞–≤–∏–ª—å–Ω–∏–º–∏ –Ω–∞–∑–≤–∞–º–∏ –∑ —Å–µ—Ä–≤–µ—Ä–∞
"""

import asyncio
import aiohttp
import json
from datetime import datetime
import logging

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(message)s')

# –Ü–º–ø–æ—Ä—Ç—É—î–º–æ —Å–ø–∏—Å–æ–∫ –∑ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–∏–º–∏ –Ω–∞–∑–≤–∞–º–∏
import sys
sys.path.append('/Users/dima/Documents/Predator11/scripts')
from intelligent_model_distribution import ALL_MODELS

# –°–µ—Ä–≤–µ—Ä —â–æ –ø—Ä–∞—Ü—é—î
SERVER_URL = "http://localhost:3011"

async def test_model(session, model):
    """–¢–µ—Å—Ç—É—î –æ–¥–Ω—É –º–æ–¥–µ–ª—å"""
    try:
        payload = {
            "model": model,
            "messages": [{"role": "user", "content": "Hi! Just say 'OK'"}],
            "max_tokens": 5,
            "temperature": 0.1
        }
        
        async with session.post(
            f"{SERVER_URL}/v1/chat/completions",
            json=payload,
            timeout=aiohttp.ClientTimeout(total=10)
        ) as response:
            
            if response.status == 200:
                data = await response.json()
                if "choices" in data and data["choices"]:
                    content = data["choices"][0].get("message", {}).get("content", "")
                    print(f"‚úÖ {model} - –ø—Ä–∞—Ü—é—î: {content}")
                    return True
            else:
                error = await response.text()
                print(f"‚ùå {model} - –ø–æ–º–∏–ª–∫–∞ {response.status}: {error[:100]}")
                return False
                
    except Exception as e:
        print(f"‚ùå {model} - –≤–∏–Ω—è—Ç–æ–∫: {str(e)[:100]}")
        return False

async def main():
    print(f"üöÄ –¢–µ—Å—Ç—É—é –≤—Å—ñ 58 –º–æ–¥–µ–ª–µ–π –Ω–∞ {SERVER_URL}")
    print("=" * 60)
    
    working = []
    failed = []
    
    async with aiohttp.ClientSession() as session:
        for i, model in enumerate(ALL_MODELS, 1):
            print(f"\n[{i:2d}/58] –¢–µ—Å—Ç—É—é: {model}")
            
            if await test_model(session, model):
                working.append(model)
            else:
                failed.append(model)
            
            # –ü–∞—É–∑–∞ –º—ñ–∂ –∑–∞–ø–∏—Ç–∞–º–∏
            await asyncio.sleep(0.3)
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç–∏
    print(f"\n{'='*60}")
    print(f"üéØ –†–ï–ó–£–õ–¨–¢–ê–¢–ò:")
    print(f"‚úÖ –ü—Ä–∞—Ü—é—é—á–∏—Ö: {len(working)}/58 ({len(working)/58*100:.1f}%)")
    print(f"‚ùå –ù–µ –ø—Ä–∞—Ü—é—é—á–∏—Ö: {len(failed)}/58 ({len(failed)/58*100:.1f}%)")
    
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    
    # –°–ø–∏—Å–æ–∫ –ø—Ä–∞—Ü—é—é—á–∏—Ö –º–æ–¥–µ–ª–µ–π
    with open(f"/Users/dima/Documents/Predator11/WORKING_MODELS_{timestamp}.txt", "w") as f:
        f.write("# –ü–†–ê–¶–Æ–Æ–ß–Ü –ú–û–î–ï–õ–Ü\n\n")
        for model in working:
            f.write(f'"{model}",\n')
    
    # –°–ø–∏—Å–æ–∫ –Ω–µ—Ä–æ–±–æ—á–∏—Ö –º–æ–¥–µ–ª–µ–π  
    with open(f"/Users/dima/Documents/Predator11/FAILED_MODELS_{timestamp}.txt", "w") as f:
        f.write("# –ù–ï–†–û–ë–û–ß–Ü –ú–û–î–ï–õ–Ü\n\n")
        for model in failed:
            f.write(f'"{model}",\n')
    
    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –∑–±–µ—Ä–µ–∂–µ–Ω—ñ:")
    print(f"   ‚úÖ –ü—Ä–∞—Ü—é—é—á—ñ: WORKING_MODELS_{timestamp}.txt")
    print(f"   ‚ùå –ù–µ—Ä–æ–±–æ—á—ñ: FAILED_MODELS_{timestamp}.txt")

if __name__ == "__main__":
    asyncio.run(main())
