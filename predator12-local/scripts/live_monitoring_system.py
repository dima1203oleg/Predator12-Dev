# üéØ –ü–õ–ê–ù –†–û–ó–í–ò–¢–ö–£ PREDATOR ANALYTICS NEXUS CORE V2.0

## üöÄ –ü–û–¢–û–ß–ù–ò–ô –°–¢–ê–ù: –°–ò–°–¢–ï–ú–ê –ü–†–ê–¶–Æ–Ñ!

‚úÖ **26 –∞–≥–µ–Ω—Ç—ñ–≤ —Å–∞–º–æ–≤–¥–æ—Å–∫–æ–Ω–∞–ª–µ–Ω–Ω—è** –∞–∫—Ç–∏–≤–Ω—ñ  
‚úÖ **21 –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∞ AI-–º–æ–¥–µ–ª—å** –≤ –ø—Ä–æ–¥–∞–∫—à–Ω  
‚úÖ **Web-—ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å** –¥–æ—Å—Ç—É–ø–Ω–∏–π –Ω–∞ http://localhost:3001  
‚úÖ **–ë—ñ–∑–Ω–µ—Å-–∞–Ω–∞–ª—ñ—Ç–∏–∫–∞** –ø—Ä–∞—Ü—é—î –≤ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–º—É —Ä–µ–∂–∏–º—ñ  

---

## üéØ –ù–ê–°–¢–£–ü–ù–Ü –ö–†–û–ö–ò –†–û–ó–í–ò–¢–ö–£

### 1. üìä –†–û–ó–®–ò–†–ï–ù–ù–Ø –ë–Ü–ó–ù–ï–°-–ê–ù–ê–õ–Ü–¢–ò–ö–ò

#### üè¶ –ë–∞–Ω–∫—ñ–≤—Å—å–∫–∏–π —Å–µ–∫—Ç–æ—Ä - NEXT LEVEL
```python
# –î–æ–¥–∞—Ç–∫–æ–≤—ñ –º–æ–¥—É–ª—ñ –¥–ª—è –≥–ª–∏–±—à–æ–≥–æ –∞–Ω–∞–ª—ñ–∑—É
- Crypto-—Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó —Ç–∞ DeFi –∞–Ω–∞–ª—ñ–∑
- Cross-border –ø–ª–∞—Ç–µ–∂—ñ —Ç–∞ –æ—Ñ—à–æ—Ä–Ω—ñ —Å—Ö–µ–º–∏  
- Real-time –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ SWIFT –ø–µ—Ä–µ–∫–∞–∑—ñ–≤
- ML-–¥–µ—Ç–µ–∫—Ü—ñ—è –Ω–æ–≤–∏—Ö —Ç–∏–ø—ñ–≤ —à–∞—Ö—Ä–∞–π—Å—Ç–≤–∞
```

#### üèõÔ∏è –î–µ—Ä–∂–∞–≤–Ω–∏–π —Å–µ–∫—Ç–æ—Ä - –†–û–ó–®–ò–†–ï–ù–ù–Ø  
```python
# –ù–æ–≤—ñ –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É
- –ê–Ω–∞–ª—ñ–∑ –±—é–¥–∂–µ—Ç–Ω–∏—Ö –≤–∏–¥–∞—Ç–∫—ñ–≤ –≤ —Ä–µ–∞–ª—å–Ω–æ–º—É —á–∞—Å—ñ
- –î–µ—Ç–µ–∫—Ü—ñ—è –∫–æ–Ω—Ñ–ª—ñ–∫—Ç—ñ–≤ —ñ–Ω—Ç–µ—Ä–µ—Å—ñ–≤ —á–µ—Ä–µ–∑ —Å–æ—Ü–º–µ—Ä–µ–∂—ñ
- –ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –ª–æ–±—ñ—Å—Ç—Å—å–∫–∏—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π
- –ü—Ä–æ–≥–Ω–æ–∑—É–≤–∞–Ω–Ω—è –∫–æ—Ä—É–ø—Ü—ñ–π–Ω–∏—Ö —Ä–∏–∑–∏–∫—ñ–≤
```

#### üìà –§—ñ–Ω—Ç–µ—Ö —Ç–∞ —ñ–Ω–≤–µ—Å—Ç–∏—Ü—ñ—ó - –ù–û–í–ò–ô –ù–ê–ü–†–Ø–ú–û–ö
```python
# –Ü–Ω–≤–µ—Å—Ç–∏—Ü—ñ–π–Ω–∞ –∞–Ω–∞–ª—ñ—Ç–∏–∫–∞
- –ê–ª–≥–æ—Ä–∏—Ç–º—ñ—á–Ω–∏–π —Ç—Ä–µ–π–¥–∏–Ω–≥ –∑ AI-—Å–∏–≥–Ω–∞–ª–∞–º–∏
- –†–∏–∑–∏–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç –ø–æ—Ä—Ç—Ñ–µ–ª—é  
- –î–µ—Ç–µ–∫—Ü—ñ—è –º–∞–Ω—ñ–ø—É–ª—è—Ü—ñ–π –Ω–∞ —Ä–∏–Ω–∫—É
- ESG compliance –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥
```

### 2. ü§ñ –ü–û–ö–†–ê–©–ï–ù–ù–Ø AI-–ê–ì–ï–ù–¢–Ü–í

#### –ù–æ–≤—ñ –∞–≥–µ–Ω—Ç–∏ –¥–ª—è —Ä–æ–∑—Ä–æ–±–∫–∏:
1. **üïµÔ∏è DeepInvestigator** - –≥–ª–∏–±–æ–∫–∏–π –∞–Ω–∞–ª—ñ–∑ –ø—ñ–¥–æ–∑—Ä—ñ–ª–∏—Ö —Å—Ö–µ–º
2. **üì± SocialSentiment** - –∞–Ω–∞–ª—ñ–∑ –Ω–∞—Å—Ç—Ä–æ—ó–≤ —Ç–∞ –≤–ø–ª–∏–≤—É
3. **üåç GeopoliticalAnalyst** - –≥–µ–æ–ø–æ–ª—ñ—Ç–∏—á–Ω—ñ —Ä–∏–∑–∏–∫–∏  
4. **üíπ MarketManipulator** (–¥–µ—Ç–µ–∫—Ç–æ—Ä) - –≤–∏—è–≤–ª–µ–Ω–Ω—è –º–∞–Ω—ñ–ø—É–ª—è—Ü—ñ–π
5. **üîê CyberThreat** - –∫—ñ–±–µ—Ä–±–µ–∑–ø–µ–∫–∞ —Ç–∞ –∑–∞–≥—Ä–æ–∑–∏

#### –ü–æ–∫—Ä–∞—â–µ–Ω–Ω—è —ñ—Å–Ω—É—é—á–∏—Ö –∞–≥–µ–Ω—Ç—ñ–≤:
- **–ë—ñ–ª—å—à–µ –º–æ–¥–µ–ª–µ–π** –≤ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–∏—Ö –ø—É–ª–∞—Ö
- **–ì–ª–∏–±—à–µ –Ω–∞–≤—á–∞–Ω–Ω—è** –Ω–∞ —ñ—Å—Ç–æ—Ä–∏—á–Ω–∏—Ö –¥–∞–Ω–∏—Ö
- **–®–≤–∏–¥—à–∞ –∞–¥–∞–ø—Ç–∞—Ü—ñ—è** –¥–æ –Ω–æ–≤–∏—Ö –ø–∞—Ç—Ç–µ—Ä–Ω—ñ–≤

### 3. üåê –†–û–ó–®–ò–†–ï–ù–ù–Ø WEB-–Ü–ù–¢–ï–†–§–ï–ô–°–£

#### –ù–æ–≤—ñ –¥–∞—à–±–æ—Ä–¥–∏:
- **üéØ Executive Dashboard** - –¥–ª—è —Ç–æ–ø-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç—É
- **üìä Risk Management Center** - —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —Ä–∏–∑–∏–∫–∞–º–∏
- **üîç Investigation Workbench** - —Ä–æ–±–æ—á–µ –º—ñ—Å—Ü–µ –∞–Ω–∞–ª—ñ—Ç–∏–∫–∞
- **üìà Market Intelligence Hub** - —Ä–∏–Ω–∫–æ–≤–∞ —Ä–æ–∑–≤—ñ–¥–∫–∞
- **üõ°Ô∏è Compliance Control Room** - —Ü–µ–Ω—Ç—Ä –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ—Å—Ç—ñ

#### –ü–æ–∫—Ä–∞—â–µ–Ω–Ω—è UX/UI:
- **Real-time –Ω–æ—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó** –∫—Ä–∏—Ç–∏—á–Ω–∏—Ö –ø–æ–¥—ñ–π
- **–Ü–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ñ –∫–∞—Ä—Ç–∏** —Ä–∏–∑–∏–∫—ñ–≤ —Ç–∞ —Å—Ö–µ–º
- **AR/VR –≤—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—è** —Å–∫–ª–∞–¥–Ω–∏—Ö –¥–∞–Ω–∏—Ö
- **Mobile-first** –ø—ñ–¥—Ö—ñ–¥ –¥–ª—è –ø–ª–∞–Ω—à–µ—Ç—ñ–≤

---

## üî• –®–í–ò–î–ö–Ü WINS - –©–û –ú–û–ñ–ù–ê –ó–†–û–ë–ò–¢–ò –ó–ê–†–ê–ó

### A. üìà –ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –≤ —Ä–µ–∞–ª—å–Ω–æ–º—É —á–∞—Å—ñ

–°—Ç–≤–æ—Ä–∏–º–æ —Å–∏—Å—Ç–µ–º—É live-–º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É:

<function_calls>
<invoke name="create_file">
<parameter name="content">#!/usr/bin/env python3
"""
üîç LIVE MONITORING SYSTEM
Real-time –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –≤—Å—ñ—Ö –ø—Ä–æ—Ü–µ—Å—ñ–≤ Predator Analytics
"""

import asyncio
import json
import time
from datetime import datetime
from typing import Dict, List
import requests
import websockets

class LiveMonitoringSystem:
    """–°–∏—Å—Ç–µ–º–∞ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É –≤ —Ä–µ–∞–ª—å–Ω–æ–º—É —á–∞—Å—ñ"""
    
    def __init__(self):
        self.active_alerts = []
        self.system_metrics = {}
        self.business_events = []
        
    async def monitor_agents_performance(self):
        """–ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ –∞–≥–µ–Ω—Ç—ñ–≤"""
        print("üîç –ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –∞–≥–µ–Ω—Ç—ñ–≤...")
        
        while True:
            try:
                # –°–∏–º—É–ª—è—Ü—ñ—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∞–≥–µ–Ω—Ç—ñ–≤
                agents_status = await self.check_agents_health()
                
                for agent, status in agents_status.items():
                    if status['health'] < 80:
                        await self.create_alert(
                            f"‚ö†Ô∏è –ê–≥–µ–Ω—Ç {agent} –º–∞—î –Ω–∏–∑—å–∫—É –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å: {status['health']}%",
                            'warning'
                        )
                    elif status['improvements'] > 0:
                        await self.log_success(
                            f"üéØ –ê–≥–µ–Ω—Ç {agent} –∑—Ä–æ–±–∏–≤ {status['improvements']} –ø–æ–∫—Ä–∞—â–µ–Ω—å"
                        )
                
                await asyncio.sleep(30)  # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ–∂–Ω—ñ 30 —Å–µ–∫—É–Ω–¥
                
            except Exception as e:
                await self.create_alert(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É –∞–≥–µ–Ω—Ç—ñ–≤: {e}", 'error')
                await asyncio.sleep(60)
    
    async def monitor_business_events(self):
        """–ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –±—ñ–∑–Ω–µ—Å-–ø–æ–¥—ñ–π"""
        print("üíº –ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –±—ñ–∑–Ω–µ—Å-–ø–æ–¥—ñ–π...")
        
        business_scenarios = [
            {
                'type': 'suspicious_transaction',
                'description': '–ü—ñ–¥–æ–∑—Ä—ñ–ª–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—è $2.5M –∑ –æ—Ñ—à–æ—Ä—É',
                'risk_level': 'high',
                'confidence': 94.2
            },
            {
                'type': 'procurement_anomaly', 
                'description': '–î–µ—Ä–∂–∑–∞–∫—É–ø—ñ–≤–ª—è –∑ –∑–∞–≤–∏—â–µ–Ω–æ—é —Ü—ñ–Ω–æ—é –Ω–∞ 340%',
                'risk_level': 'critical',
                'confidence': 87.5
            },
            {
                'type': 'market_manipulation',
                'description': '–î–µ—Ç–µ–∫—Ç–æ–≤–∞–Ω–æ –º–æ–∂–ª–∏–≤—É –º–∞–Ω—ñ–ø—É–ª—è—Ü—ñ—é –∞–∫—Ü—ñ—è–º–∏ TECH',
                'risk_level': 'medium',
                'confidence': 78.3
            }
        ]
        
        while True:
            # –°–∏–º—É–ª—è—Ü—ñ—è –¥–µ—Ç–µ–∫—Ü—ñ—ó –±—ñ–∑–Ω–µ—Å-–ø–æ–¥—ñ–π
            import random
            if random.random() < 0.3:  # 30% —à–∞–Ω—Å—É
                event = random.choice(business_scenarios)
                await self.handle_business_event(event)
            
            await asyncio.sleep(45)  # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ–∂–Ω—ñ 45 —Å–µ–∫—É–Ω–¥
    
    async def monitor_system_resources(self):
        """–ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Å—Ç–µ–º–Ω–∏—Ö —Ä–µ—Å—É—Ä—Å—ñ–≤"""
        print("üñ•Ô∏è –ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Å—Ç–µ–º–Ω–∏—Ö —Ä–µ—Å—É—Ä—Å—ñ–≤...")
        
        while True:
            try:
                # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ–≤
                containers_status = await self.check_containers()
                
                # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ —Å–µ—Ä–≤—ñ—Å—ñ–≤
                services_status = await self.check_services()
                
                # –ê–≥—Ä–µ–≥–∞—Ü—ñ—è –º–µ—Ç—Ä–∏–∫
                system_health = self.calculate_system_health(
                    containers_status, services_status
                )
                
                if system_health < 85:
                    await self.create_alert(
                        f"‚ö†Ô∏è –ó–¥–æ—Ä–æ–≤'—è —Å–∏—Å—Ç–µ–º–∏ –∑–Ω–∏–∑–∏–ª–æ—Å—å –¥–æ {system_health}%",
                        'warning'
                    )
                
                await asyncio.sleep(60)  # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ–∂–Ω—É —Ö–≤–∏–ª–∏–Ω—É
                
            except Exception as e:
                await self.create_alert(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É —Å–∏—Å—Ç–µ–º–∏: {e}", 'error')
                await asyncio.sleep(120)
    
    async def check_agents_health(self) -> Dict:
        """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤'—è –∞–≥–µ–Ω—Ç—ñ–≤"""
        # –°–∏–º—É–ª—è—Ü—ñ—è —Å—Ç–∞—Ç—É—Å—É –∞–≥–µ–Ω—Ç—ñ–≤
        import random
        
        agents = [
            'SelfImprovement', 'AutoHeal', 'PerformanceOptimizer', 
            'SelfDiagnosis', 'DataQuality', 'BillingGate'
        ]
        
        status = {}
        for agent in agents:
            status[agent] = {
                'health': random.randint(75, 100),
                'improvements': random.randint(0, 3),
                'efficiency': random.uniform(0.85, 0.99)
            }
        
        return status
    
    async def check_containers(self) -> Dict:
        """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å—É –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ–≤"""
        # –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç—ñ —Ç—É—Ç –±—É–¥–µ –≤–∏–∫–ª–∏–∫ –¥–æ Docker API
        return {
            'running': 23,
            'total': 25,
            'healthy': 21,
            'unhealthy': 2
        }
    
    async def check_services(self) -> Dict:
        """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ —Å–µ—Ä–≤—ñ—Å—ñ–≤"""
        services = {
            'frontend': 'http://localhost:3001',
            'backend': 'http://localhost:8000/health',
            'prometheus': 'http://localhost:9090/-/healthy'
        }
        
        status = {}
        for service, url in services.items():
            try:
                response = requests.get(url, timeout=5)
                status[service] = {
                    'available': response.status_code == 200,
                    'response_time': response.elapsed.total_seconds()
                }
            except:
                status[service] = {
                    'available': False,
                    'response_time': None
                }
        
        return status
    
    def calculate_system_health(self, containers: Dict, services: Dict) -> float:
        """–†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –∑–∞–≥–∞–ª—å–Ω–æ–≥–æ –∑–¥–æ—Ä–æ–≤'—è —Å–∏—Å—Ç–µ–º–∏"""
        container_health = (containers['healthy'] / containers['total']) * 100
        
        available_services = sum(1 for s in services.values() if s['available'])
        service_health = (available_services / len(services)) * 100
        
        return (container_health + service_health) / 2
    
    async def handle_business_event(self, event: Dict):
        """–û–±—Ä–æ–±–∫–∞ –±—ñ–∑–Ω–µ—Å-–ø–æ–¥—ñ—ó"""
        timestamp = datetime.now().strftime("%H:%M:%S")
        
        risk_emoji = {
            'low': 'üü¢',
            'medium': 'üü°', 
            'high': 'üü†',
            'critical': 'üî¥'
        }
        
        emoji = risk_emoji.get(event['risk_level'], '‚ö™')
        
        print(f"\n{emoji} –ë–Ü–ó–ù–ï–°-–ü–û–î–Ü–Ø [{timestamp}]")
        print(f"   üìã –¢–∏–ø: {event['type']}")
        print(f"   üìÑ –û–ø–∏—Å: {event['description']}")
        print(f"   ‚ö†Ô∏è –†—ñ–≤–µ–Ω—å —Ä–∏–∑–∏–∫—É: {event['risk_level'].upper()}")
        print(f"   üéØ –í–ø–µ–≤–Ω–µ–Ω—ñ—Å—Ç—å: {event['confidence']:.1f}%")
        
        # –î–æ–¥–∞—î–º–æ –¥–æ —ñ—Å—Ç–æ—Ä—ñ—ó
        self.business_events.append({
            **event,
            'timestamp': timestamp,
            'processed': True
        })
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –∞–ª–µ—Ä—Ç –¥–ª—è –∫—Ä–∏—Ç–∏—á–Ω–∏—Ö –ø–æ–¥—ñ–π
        if event['risk_level'] in ['high', 'critical']:
            await self.create_alert(
                f"{emoji} {event['description']} (–≤–ø–µ–≤–Ω–µ–Ω—ñ—Å—Ç—å: {event['confidence']:.1f}%)",
                event['risk_level']
            )
    
    async def create_alert(self, message: str, level: str):
        """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∞–ª–µ—Ä—Ç—É"""
        timestamp = datetime.now().strftime("%H:%M:%S")
        
        alert = {
            'message': message,
            'level': level,
            'timestamp': timestamp,
            'id': len(self.active_alerts) + 1
        }
        
        self.active_alerts.append(alert)
        
        level_emoji = {
            'info': '‚ÑπÔ∏è',
            'warning': '‚ö†Ô∏è',
            'error': '‚ùå',
            'critical': 'üî¥'
        }
        
        emoji = level_emoji.get(level, '‚ÑπÔ∏è')
        print(f"\n{emoji} –ê–õ–ï–†–¢ [{timestamp}]: {message}")
    
    async def log_success(self, message: str):
        """–õ–æ–≥—É–≤–∞–Ω–Ω—è —É—Å–ø—ñ—à–Ω–∏—Ö –æ–ø–µ—Ä–∞—Ü—ñ–π"""
        timestamp = datetime.now().strftime("%H:%M:%S")
        print(f"‚úÖ [{timestamp}] {message}")
    
    def show_dashboard(self):
        """–í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ —Å—Ç–∞–Ω—É"""
        print("\n" + "="*80)
        print("üìä LIVE DASHBOARD - PREDATOR ANALYTICS NEXUS")
        print("="*80)
        
        # –ê–∫—Ç–∏–≤–Ω—ñ –∞–ª–µ—Ä—Ç–∏
        if self.active_alerts:
            print(f"\nüö® –ê–ö–¢–ò–í–ù–Ü –ê–õ–ï–†–¢–ò ({len(self.active_alerts)}):")
            for alert in self.active_alerts[-5:]:  # –û—Å—Ç–∞–Ω–Ω—ñ 5
                print(f"   [{alert['timestamp']}] {alert['level'].upper()}: {alert['message']}")
        
        # –û—Å—Ç–∞–Ω–Ω—ñ –±—ñ–∑–Ω–µ—Å-–ø–æ–¥—ñ—ó
        if self.business_events:
            print(f"\nüíº –û–°–¢–ê–ù–ù–Ü –ë–Ü–ó–ù–ï–°-–ü–û–î–Ü–á ({len(self.business_events)}):")
            for event in self.business_events[-3:]:  # –û—Å—Ç–∞–Ω–Ω—ñ 3
                print(f"   [{event['timestamp']}] {event['type']}: {event['confidence']:.1f}%")
        
        print("\n" + "="*80)
    
    async def run_monitoring(self, duration_minutes: int = 10):
        """–ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º–∏ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É"""
        print("üöÄ –ó–ê–ü–£–°–ö –°–ò–°–¢–ï–ú–ò LIVE –ú–û–ù–Ü–¢–û–†–ò–ù–ì–£")
        print(f"‚è∞ –¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å: {duration_minutes} —Ö–≤–∏–ª–∏–Ω")
        print("üéØ –ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥: –ê–≥–µ–Ω—Ç–∏ + –ë—ñ–∑–Ω–µ—Å-–ø–æ–¥—ñ—ó + –°–∏—Å—Ç–µ–º–∞")
        print("="*80)
        
        # –ó–∞–ø—É—Å–∫ –≤—Å—ñ—Ö –º–æ–Ω—ñ—Ç–æ—Ä—ñ–≤ –ø–∞—Ä–∞–ª–µ–ª—å–Ω–æ
        tasks = [
            self.monitor_agents_performance(),
            self.monitor_business_events(), 
            self.monitor_system_resources()
        ]
        
        try:
            # –ó–∞–ø—É—Å–∫ –Ω–∞ –≤–∫–∞–∑–∞–Ω—É —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å
            await asyncio.wait_for(
                asyncio.gather(*tasks),
                timeout=duration_minutes * 60
            )
        except asyncio.TimeoutError:
            print(f"\n‚è∞ –ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –ø—ñ—Å–ª—è {duration_minutes} —Ö–≤–∏–ª–∏–Ω")
        except KeyboardInterrupt:
            print("\n‚èπÔ∏è –ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –∑—É–ø–∏–Ω–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º")
        
        # –§—ñ–Ω–∞–ª—å–Ω–∏–π dashboard
        self.show_dashboard()

async def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è"""
    monitor = LiveMonitoringSystem()
    
    print("üîç PREDATOR ANALYTICS - LIVE MONITORING SYSTEM")
    print("–°–∏—Å—Ç–µ–º–∞ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É –≤ —Ä–µ–∞–ª—å–Ω–æ–º—É —á–∞—Å—ñ")
    print("="*80)
    
    try:
        await monitor.run_monitoring(5)  # 5 —Ö–≤–∏–ª–∏–Ω –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É
    except Exception as e:
        print(f"üí• –ü–æ–º–∏–ª–∫–∞: {e}")

if __name__ == "__main__":
    asyncio.run(main())
