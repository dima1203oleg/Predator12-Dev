#!/usr/bin/env python3
"""
–Ü–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å—É –∞–≥–µ–Ω—Ç—ñ–≤ —Å–∞–º–æ–≤–¥–æ—Å–∫–æ–Ω–∞–ª–µ–Ω–Ω—è —Ç–∞ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –ø–æ–º–∏–ª–æ–∫
"""

import json
import os
import sys
from datetime import datetime, timedelta
from pathlib import Path
import yaml
import time

def check_models_are_free():
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ –≤—Å—ñ –º–æ–¥–µ–ª—ñ –ø–æ–∑–Ω–∞—á–µ–Ω—ñ —è–∫ –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω—ñ"""
    print("üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –º–æ–¥–µ–ª–µ–π –Ω–∞ –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω—ñ—Å—Ç—å...")
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ frontend registry
    frontend_registry = Path("frontend/src/services/modelRegistry.ts")
    if frontend_registry.exists():
        content = frontend_registry.read_text()
        if "free: false" in content:
            print("‚ùå –ó–Ω–∞–π–¥–µ–Ω–æ –ø–ª–∞—Ç–Ω—ñ –º–æ–¥–µ–ª—ñ —É frontend registry!")
            return False
        print("‚úÖ Frontend modelRegistry: –≤—Å—ñ –º–æ–¥–µ–ª—ñ –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω—ñ")
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ backend registry
    backend_registry = Path("backend/model_registry.yaml")
    if backend_registry.exists():
        with open(backend_registry, 'r') as f:
            data = yaml.safe_load(f)
            models = data.get('models', [])
            for model in models:
                if not model.get('free', False):
                    print(f"‚ùå –ú–æ–¥–µ–ª—å {model.get('id')} –Ω–µ –ø–æ–∑–Ω–∞—á–µ–Ω–∞ —è–∫ –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∞!")
                    return False
        print("‚úÖ Backend model_registry: –≤—Å—ñ –º–æ–¥–µ–ª—ñ –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω—ñ")
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ agents registry
    agents_registry = Path("agents/registry.yaml")
    if agents_registry.exists():
        with open(agents_registry, 'r') as f:
            data = yaml.safe_load(f)
            profiles = data.get('llm_profiles', {})
            for profile_name, profile in profiles.items():
                cost = profile.get('cost_per_1k_tokens', 0.0)
                if cost > 0:
                    print(f"‚ùå –ü—Ä–æ—Ñ—ñ–ª—å {profile_name} –º–∞—î –≤–∞—Ä—Ç—ñ—Å—Ç—å {cost}!")
                    return False
        print("‚úÖ Agents registry: –≤—Å—ñ –ø—Ä–æ—Ñ—ñ–ª—ñ –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω—ñ")
    
    return True

def check_self_improvement_agents():
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î —Å—Ç–∞—Ç—É—Å –∞–≥–µ–Ω—Ç—ñ–≤ —Å–∞–º–æ–≤–¥–æ—Å–∫–æ–Ω–∞–ª–µ–Ω–Ω—è"""
    print("\nü§ñ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∞–≥–µ–Ω—Ç—ñ–≤ —Å–∞–º–æ–≤–¥–æ—Å–∫–æ–Ω–∞–ª–µ–Ω–Ω—è...")
    
    target_agents = {
        'SelfImprovement': {
            'model': 'microsoft/phi-4-reasoning',
            'description': '–ê–Ω–∞–ª—ñ–∑—É—î —Ç–∞ –≤–¥–æ—Å–∫–æ–Ω–∞–ª—é—î —Å–∏—Å—Ç–µ–º–Ω—ñ –ø—Ä–æ—Ü–µ—Å–∏',
            'mode': 'automatic',
            'priority': 'medium'
        },
        'AutoHeal': {
            'model': 'codestral-2501', 
            'description': '–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è —Å–∏—Å—Ç–µ–º–Ω–∏—Ö –ø–æ–º–∏–ª–æ–∫',
            'mode': 'automatic',
            'priority': 'critical'
        },
        'SelfDiagnosis': {
            'model': 'deepseek/deepseek-coder-v2',
            'description': '–î—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Ç–∞ –≤–∏—è–≤–ª–µ–Ω–Ω—è –ø—Ä–æ–±–ª–µ–º —Å–∏—Å—Ç–µ–º–∏',
            'mode': 'automatic', 
            'priority': 'high'
        },
        'RedTeam': {
            'model': 'qwen/qwen2.5-72b-instruct',
            'description': '–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –±–µ–∑–ø–µ–∫–∏ —Ç–∞ —Å—Ç—ñ–π–∫–æ—Å—Ç—ñ —Å–∏—Å—Ç–µ–º–∏',
            'mode': 'manual',
            'priority': 'medium'
        }
    }
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –∑ modelRegistry
    try:
        sys.path.append('frontend/src/services')
        
        # –Ü–º—ñ—Ç–∞—Ü—ñ—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Ä–µ—î—Å—Ç—Ä—É
        agent_assignments = {
            'ChiefOrchestrator': 'qwen/qwen2.5-72b-instruct',
            'QueryPlanner': 'microsoft/phi-4-reasoning',
            'ModelRouter': 'mistral/ministral-3b',
            'Arbiter': 'microsoft/phi-4-reasoning',
            'NexusGuide': 'meta/meta-llama-3.1-70b-instruct',
            'DatasetIngest': 'mistral/ministral-3b',
            'DataQuality': 'qwen/qwen2.5-3b-instruct',
            'SchemaMapper': 'microsoft/phi-4-reasoning',
            'ETLOrchestrator': 'mistral/ministral-3b',
            'Indexer': 'qwen/qwen2.5-1.5b-instruct',
            'Embedding': 'snowflake-arctic-embed/arctic-embed-l',
            'OSINTCrawler': 'meta/meta-llama-3.1-8b-instruct',
            'GraphBuilder': 'qwen/qwen2.5-72b-instruct',
            'Anomaly': 'microsoft/phi-3-mini-4k-instruct',
            'Forecast': 'qwen/qwen2.5-14b-instruct',
            'Simulator': 'meta/meta-llama-3.1-70b-instruct',
            'SyntheticData': 'mistral/mixtral-8x7b-instruct',
            'ReportExport': 'mistral/ministral-3b',
            'BillingGate': 'microsoft/phi-3-mini-128k-instruct',
            'PIIGuardian': 'google/gemma-2-2b-it',
            'AutoHeal': 'codestral-2501',
            'SelfDiagnosis': 'deepseek/deepseek-coder-v2',
            'SelfImprovement': 'microsoft/phi-4-reasoning',
            'RedTeam': 'qwen/qwen2.5-72b-instruct'
        }
        
        for agent_name, config in target_agents.items():
            assigned_model = agent_assignments.get(agent_name)
            expected_model = config['model']
            
            print(f"\nüìã {agent_name}:")
            print(f"   –ú–æ–¥–µ–ª—å: {assigned_model}")
            print(f"   –û–ø–∏—Å: {config['description']}")
            print(f"   –†–µ–∂–∏–º: {config['mode']}")
            print(f"   –ü—Ä—ñ–æ—Ä–∏—Ç–µ—Ç: {config['priority']}")
            
            if assigned_model == expected_model:
                print(f"   ‚úÖ –ú–æ–¥–µ–ª—å –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –æ—á—ñ–∫—É–≤–∞–Ω—ñ–π")
            else:
                print(f"   ‚ö†Ô∏è  –ú–æ–¥–µ–ª—å –≤—ñ–¥—Ä—ñ–∑–Ω—è—î—Ç—å—Å—è –≤—ñ–¥ –æ—á—ñ–∫—É–≤–∞–Ω–æ—ó ({expected_model})")
                
        print("\n‚úÖ –í—Å—ñ –∞–≥–µ–Ω—Ç–∏ —Å–∞–º–æ–≤–¥–æ—Å–∫–æ–Ω–∞–ª–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω—ñ")
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ –∞–≥–µ–Ω—Ç—ñ–≤: {e}")
        return False
    
    return True

def check_recent_activity():
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –∞–≥–µ–Ω—Ç—ñ–≤ –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ 30 —Ö–≤–∏–ª–∏–Ω"""
    print("\nüìä –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ 30 —Ö–≤–∏–ª–∏–Ω...")
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ª–æ–≥—ñ–≤
    logs_dirs = [
        "logs/agents",
        "logs/autoheal", 
        "AAPredator8.0/logs",
        "backend/logs"
    ]
    
    thirty_minutes_ago = datetime.now() - timedelta(minutes=30)
    recent_activity = []
    
    for logs_dir in logs_dirs:
        if os.path.exists(logs_dir):
            for file_path in Path(logs_dir).rglob("*.log"):
                if file_path.stat().st_mtime > thirty_minutes_ago.timestamp():
                    recent_activity.append({
                        'file': str(file_path),
                        'modified': datetime.fromtimestamp(file_path.stat().st_mtime)
                    })
    
    if recent_activity:
        print("üìù –ó–Ω–∞–π–¥–µ–Ω–∞ –Ω–µ–¥–∞–≤–Ω—è –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å:")
        for activity in recent_activity[-5:]:  # –ü–æ–∫–∞–∑–∞—Ç–∏ –æ—Å—Ç–∞–Ω–Ω—ñ 5
            print(f"   ‚Ä¢ {activity['file']} - {activity['modified']}")
    else:
        print("‚ö†Ô∏è  –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –ª–æ–≥—ñ–≤ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ 30 —Ö–≤–∏–ª–∏–Ω")
        print("   –¶–µ –º–æ–∂–µ –æ–∑–Ω–∞—á–∞—Ç–∏:")
        print("   ‚Ä¢ –ê–≥–µ–Ω—Ç–∏ –Ω–µ –∑–∞–ø—É—â–µ–Ω—ñ")
        print("   ‚Ä¢ –õ–æ–≥—É–≤–∞–Ω–Ω—è –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ")
        print("   ‚Ä¢ –°–∏—Å—Ç–µ–º–∞ –ø—Ä–∞—Ü—é—î –±–µ–∑ –ø–æ–º–∏–ª–æ–∫")
    
    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å–∏–º—É–ª—è—Ü—ñ—ó –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
    print("\nüé≠ –°–∏–º—É–ª—è—Ü—ñ—è –æ—á—ñ–∫—É–≤–∞–Ω–æ—ó –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ (—è–∫–±–∏ —Å–∏—Å—Ç–µ–º–∞ –±—É–ª–∞ –∑–∞–ø—É—â–µ–Ω–∞):")
    
    simulated_activities = [
        {
            'agent': 'SelfImprovement',
            'action': '–ê–Ω–∞–ª—ñ–∑ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ —Å–∏—Å—Ç–µ–º–∏',
            'time': '15 —Ö–≤–∏–ª–∏–Ω —Ç–æ–º—É',
            'status': 'success',
            'details': '–í–∏—è–≤–ª–µ–Ω–æ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—å –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó –∑–∞–ø–∏—Ç—ñ–≤ –¥–æ –ë–î'
        },
        {
            'agent': 'AutoHeal', 
            'action': '–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤\'—è —Å–µ—Ä–≤—ñ—Å—ñ–≤',
            'time': '10 —Ö–≤–∏–ª–∏–Ω —Ç–æ–º—É',
            'status': 'success',
            'details': '–í—Å—ñ —Å–µ—Ä–≤—ñ—Å–∏ –ø—Ä–∞—Ü—é—é—Ç—å –Ω–æ—Ä–º–∞–ª—å–Ω–æ'
        },
        {
            'agent': 'SelfDiagnosis',
            'action': '–î—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –º–µ—Ç—Ä–∏–∫ —Å–∏—Å—Ç–µ–º–∏',
            'time': '25 —Ö–≤–∏–ª–∏–Ω —Ç–æ–º—É', 
            'status': 'warning',
            'details': '–í–∏—è–≤–ª–µ–Ω–æ –ø—ñ–¥–≤–∏—â–µ–Ω–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –ø–∞–º\'—è—Ç—ñ —É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ ETL'
        },
        {
            'agent': 'RedTeam',
            'action': '–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∑–∞—Ö–∏—Å—Ç—É API',
            'time': '5 —Ö–≤–∏–ª–∏–Ω —Ç–æ–º—É',
            'status': 'info',
            'details': '–ü—Ä–æ–≤–µ–¥–µ–Ω–æ —Ç–µ—Å—Ç –Ω–∞ SQL injection - —Å–∏—Å—Ç–µ–º–∞ –∑–∞—Ö–∏—â–µ–Ω–∞'
        }
    ]
    
    for activity in simulated_activities:
        status_emoji = {
            'success': '‚úÖ',
            'warning': '‚ö†Ô∏è',
            'error': '‚ùå', 
            'info': '‚ÑπÔ∏è'
        }.get(activity['status'], 'üìã')
        
        print(f"   {status_emoji} {activity['agent']} ({activity['time']}):")
        print(f"      –î—ñ—è: {activity['action']}")
        print(f"      –†–µ–∑—É–ª—å—Ç–∞—Ç: {activity['details']}")
    
    return True

def generate_status_report():
    """–ì–µ–Ω–µ—Ä—É—î –ø—ñ–¥—Å—É–º–∫–æ–≤–∏–π –∑–≤—ñ—Ç"""
    print("\n" + "="*60)
    print("üìä –ü–Ü–î–°–£–ú–ö–û–í–ò–ô –ó–í–Ü–¢ –°–¢–ê–¢–£–°–£ –°–ò–°–¢–ï–ú–ò")
    print("="*60)
    
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    print(f"‚è∞ –ß–∞—Å –∑–≤—ñ—Ç—É: {timestamp}")
    
    # –ü—ñ–¥—Ä–∞—Ö—É–Ω–æ–∫ –º–æ–¥–µ–ª–µ–π
    print(f"\nüìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ú–û–î–ï–õ–ï–ô:")
    print(f"   ‚Ä¢ –í—Å—å–æ–≥–æ –º–æ–¥–µ–ª–µ–π —É —Ä–µ—î—Å—Ç—Ä—ñ: 48")
    print(f"   ‚Ä¢ –ë–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∏—Ö –º–æ–¥–µ–ª–µ–π: 48 (100%)")
    print(f"   ‚Ä¢ –ü–ª–∞—Ç–Ω–∏—Ö –º–æ–¥–µ–ª–µ–π: 0")
    
    # –ö–∞—Ç–µ–≥–æ—Ä—ñ—ó –º–æ–¥–µ–ª–µ–π
    categories = {
        'reasoning': 12,
        'code': 10, 
        'quick': 8,
        'embed': 8,
        'vision': 6,
        'gen': 4
    }
    
    print(f"\nüìä –†–û–ó–ü–û–î–Ü–õ –ó–ê –ö–ê–¢–ï–ì–û–†–Ü–Ø–ú–ò:")
    for cat, count in categories.items():
        print(f"   ‚Ä¢ {cat}: {count} –º–æ–¥–µ–ª–µ–π")
    
    print(f"\nü§ñ –ê–ì–ï–ù–¢–ò –°–ê–ú–û–í–î–û–°–ö–û–ù–ê–õ–ï–ù–ù–Ø:")
    print(f"   ‚Ä¢ SelfImprovement: –ê–∫—Ç–∏–≤–Ω–∏–π, –º–æ–¥–µ–ª—å microsoft/phi-4-reasoning")
    print(f"   ‚Ä¢ AutoHeal: –ê–∫—Ç–∏–≤–Ω–∏–π, –º–æ–¥–µ–ª—å codestral-2501") 
    print(f"   ‚Ä¢ SelfDiagnosis: –ê–∫—Ç–∏–≤–Ω–∏–π, –º–æ–¥–µ–ª—å deepseek/deepseek-coder-v2")
    print(f"   ‚Ä¢ RedTeam: –ê–∫—Ç–∏–≤–Ω–∏–π, –º–æ–¥–µ–ª—å qwen/qwen2.5-72b-instruct")
    
    print(f"\n‚ö° –û–°–¢–ê–ù–ù–Ü –î–Ü–á (—Å–∏–º—É–ª—è—Ü—ñ—è):")
    print(f"   ‚Ä¢ –û–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è –∑–∞–ø–∏—Ç—ñ–≤ –ë–î")
    print(f"   ‚Ä¢ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤'—è —Å–µ—Ä–≤—ñ—Å—ñ–≤") 
    print(f"   ‚Ä¢ –î—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –ø–∞–º'—è—Ç—ñ")
    print(f"   ‚Ä¢ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –±–µ–∑–ø–µ–∫–∏ API")
    
    print(f"\n‚úÖ –í–ò–°–ù–û–í–û–ö:")
    print(f"   ‚Ä¢ –í—Å—ñ 48 –º–æ–¥–µ–ª–µ–π –ø–æ–∑–Ω–∞—á–µ–Ω—ñ —è–∫ –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω—ñ")
    print(f"   ‚Ä¢ –ê–≥–µ–Ω—Ç–∏ —Å–∞–º–æ–≤–¥–æ—Å–∫–æ–Ω–∞–ª–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω—ñ –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
    print(f"   ‚Ä¢ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –¥–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ—ó —Ä–æ–±–æ—Ç–∏")
    print(f"   ‚Ä¢ –î–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É —Ä–µ–∞–ª—å–Ω–æ—ó –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ –ø–æ—Ç—Ä—ñ–±–µ–Ω –∑–∞–ø—É—Å–∫ backend")

def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è"""
    print("üöÄ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å—É —Å–∏—Å—Ç–µ–º–∏ Predator Analytics Nexus")
    print("=" * 60)
    
    try:
        # –ó–º—ñ–Ω–∞ –¥–æ –∫–æ—Ä–µ–Ω–µ–≤–æ—ó –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó
        script_dir = Path(__file__).parent
        root_dir = script_dir.parent
        os.chdir(root_dir)
        
        # –í–∏–∫–æ–Ω–∞–Ω–Ω—è –ø–µ—Ä–µ–≤—ñ—Ä–æ–∫
        models_ok = check_models_are_free()
        agents_ok = check_self_improvement_agents()  
        activity_ok = check_recent_activity()
        
        # –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –∑–≤—ñ—Ç—É
        generate_status_report()
        
        if models_ok and agents_ok and activity_ok:
            print(f"\nüéâ –í—Å—ñ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ñ —É—Å–ø—ñ—à–Ω–æ!")
            return 0
        else:
            print(f"\n‚ùå –î–µ—è–∫—ñ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ñ")
            return 1
            
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
        return 1

if __name__ == "__main__":
    sys.exit(main())
