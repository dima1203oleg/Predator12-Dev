"""
üïµÔ∏è DEEP INVESTIGATOR AGENT
–ê–≥–µ–Ω—Ç –≥–ª–∏–±–æ–∫–æ–≥–æ —Ä–æ–∑—Å–ª—ñ–¥—É–≤–∞–Ω–Ω—è –¥–ª—è –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –∞–Ω–∞–ª—ñ–∑—É –ø—ñ–¥–æ–∑—Ä—ñ–ª–∏—Ö —Å—Ö–µ–º
"""

import asyncio
import json
from datetime import datetime, timedelta
from typing import Dict, List, Any, Optional
import random
import numpy as np
from dataclasses import dataclass

@dataclass
class Investigation:
    """–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ä–æ–∑—Å–ª—ñ–¥—É–≤–∞–Ω–Ω—è"""
    case_id: str
    title: str
    description: str
    evidence_count: int
    confidence_score: float
    risk_level: str
    entities_involved: List[str]
    financial_impact: float
    status: str
    created_at: datetime
    updated_at: datetime

@dataclass
class Evidence:
    """–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–æ–∫–∞–∑—ñ–≤"""
    evidence_id: str
    case_id: str
    evidence_type: str
    description: str
    source: str
    reliability: float
    timestamp: datetime

class DeepInvestigatorAgent:
    """–ê–≥–µ–Ω—Ç –≥–ª–∏–±–æ–∫–æ–≥–æ —Ä–æ–∑—Å–ª—ñ–¥—É–≤–∞–Ω–Ω—è"""
    
    def __init__(self):
        self.agent_id = "DeepInvestigator"
        self.specialization = "Complex fraud investigation and pattern analysis"
        self.active_investigations: Dict[str, Investigation] = {}
        self.evidence_database: List[Evidence] = []
        self.investigation_counter = 0
        
        # AI-–º–æ–¥–µ–ª—ñ –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É
        self.analysis_models = [
            "mistralai/mixtral-8x7b-instruct-v0.1",
            "ai21-labs/ai21-jamba-1.5-large", 
            "meta-llama/meta-llama-3-70b-instruct"
        ]
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω–∏ –¥–ª—è –¥–µ—Ç–µ–∫—Ü—ñ—ó
        self.fraud_patterns = {
            'shell_company': {
                'indicators': ['minimal_activity', 'round_sum_transactions', 'short_existence'],
                'weight': 0.8
            },
            'layering_scheme': {
                'indicators': ['multiple_transfers', 'geographic_dispersion', 'timing_patterns'],
                'weight': 0.9
            },
            'corruption_network': {
                'indicators': ['unusual_procurement', 'political_connections', 'inflated_prices'],
                'weight': 0.85
            }
        }
    
    async def start_investigation(self, trigger_event: Dict[str, Any]) -> Investigation:
        """–ü–æ—á–∞—Ç–æ–∫ –Ω–æ–≤–æ–≥–æ —Ä–æ–∑—Å–ª—ñ–¥—É–≤–∞–Ω–Ω—è"""
        self.investigation_counter += 1
        case_id = f"INV-{datetime.now().strftime('%Y%m%d')}-{self.investigation_counter:04d}"
        
        investigation = Investigation(
            case_id=case_id,
            title=f"–†–æ–∑—Å–ª—ñ–¥—É–≤–∞–Ω–Ω—è {trigger_event.get('type', '–Ω–µ–≤—ñ–¥–æ–º–æ–≥–æ —Ç–∏–ø—É')}",
            description=trigger_event.get('description', '–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–µ —Ä–æ–∑—Å–ª—ñ–¥—É–≤–∞–Ω–Ω—è'),
            evidence_count=0,
            confidence_score=0.0,
            risk_level=trigger_event.get('risk_level', 'medium'),
            entities_involved=[],
            financial_impact=trigger_event.get('amount', 0.0),
            status='initiated',
            created_at=datetime.now(),
            updated_at=datetime.now()
        )
        
        self.active_investigations[case_id] = investigation
        
        print(f"üîç –†–æ–∑–ø–æ—á–∞—Ç–æ —Ä–æ–∑—Å–ª—ñ–¥—É–≤–∞–Ω–Ω—è {case_id}")
        print(f"   üìã –¢–∏–ø: {trigger_event.get('type')}")
        print(f"   üí∞ –°—É–º–∞: ${trigger_event.get('amount', 0):,.2f}")
        print(f"   ‚ö†Ô∏è –†–∏–∑–∏–∫: {investigation.risk_level}")
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–π –∑–±—ñ—Ä –¥–æ–∫–∞–∑—ñ–≤
        await self.collect_initial_evidence(investigation, trigger_event)
        
        return investigation
    
    async def collect_initial_evidence(self, investigation: Investigation, trigger_event: Dict):
        """–ó–±—ñ—Ä –ø–æ—á–∞—Ç–∫–æ–≤–∏—Ö –¥–æ–∫–∞–∑—ñ–≤"""
        print(f"   üîé –ó–±—ñ—Ä –ø–æ—á–∞—Ç–∫–æ–≤–∏—Ö –¥–æ–∫–∞–∑—ñ–≤ –¥–ª—è {investigation.case_id}...")
        
        # –°–∏–º—É–ª—è—Ü—ñ—è –∑–±–æ—Ä—É —Ä—ñ–∑–Ω–∏—Ö —Ç–∏–ø—ñ–≤ –¥–æ–∫–∞–∑—ñ–≤
        evidence_types = [
            {
                'type': 'financial_records',
                'description': '–ë–∞–Ω–∫—ñ–≤—Å—å–∫—ñ –∑–∞–ø–∏—Å–∏ —Ç–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó',
                'source': 'Banking API',
                'reliability': 0.95
            },
            {
                'type': 'digital_footprint',
                'description': '–¶–∏—Ñ—Ä–æ–≤—ñ —Å–ª—ñ–¥–∏ —Ç–∞ –º–µ—Ç–∞–¥–∞–Ω—ñ',
                'source': 'Digital Forensics',
                'reliability': 0.85
            },
            {
                'type': 'network_analysis',
                'description': '–ê–Ω–∞–ª—ñ–∑ –º–µ—Ä–µ–∂—ñ –∑–≤\'—è–∑–∫—ñ–≤',
                'source': 'Graph Analytics',
                'reliability': 0.80
            },
            {
                'type': 'document_analysis',
                'description': '–ê–Ω–∞–ª—ñ–∑ –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤ —Ç–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ñ–≤',
                'source': 'Document Scanner',
                'reliability': 0.90
            }
        ]
        
        for evidence_type in evidence_types:
            if random.random() < 0.7:  # 70% —à–∞–Ω—Å—É –∑–Ω–∞–π—Ç–∏ –¥–æ–∫–∞–∑
                evidence_id = f"EV-{len(self.evidence_database) + 1:06d}"
                
                evidence = Evidence(
                    evidence_id=evidence_id,
                    case_id=investigation.case_id,
                    evidence_type=evidence_type['type'],
                    description=evidence_type['description'],
                    source=evidence_type['source'],
                    reliability=evidence_type['reliability'],
                    timestamp=datetime.now()
                )
                
                self.evidence_database.append(evidence)
                investigation.evidence_count += 1
                
                print(f"      üìÑ –ó–Ω–∞–π–¥–µ–Ω–æ: {evidence_type['description']} (–Ω–∞–¥—ñ–π–Ω—ñ—Å—Ç—å: {evidence_type['reliability']:.0%})")
        
        # –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Ä—ñ–≤–Ω—è –≤–ø–µ–≤–Ω–µ–Ω–æ—Å—Ç—ñ
        await self.update_confidence_score(investigation)
    
    async def analyze_patterns(self, investigation: Investigation) -> Dict[str, Any]:
        """–ê–Ω–∞–ª—ñ–∑ –ø–∞—Ç—Ç–µ—Ä–Ω—ñ–≤ —É –∑—ñ–±—Ä–∞–Ω–∏—Ö –¥–æ–∫–∞–∑–∞—Ö"""
        print(f"   üß† –ê–Ω–∞–ª—ñ–∑ –ø–∞—Ç—Ç–µ—Ä–Ω—ñ–≤ –¥–ª—è {investigation.case_id}...")
        
        # –í–∏–±—ñ—Ä –º–æ–¥–µ–ª—ñ –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É
        selected_model = random.choice(self.analysis_models)
        print(f"      ü§ñ –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é –º–æ–¥–µ–ª—å: {selected_model}")
        
        # –°–∏–º—É–ª—è—Ü—ñ—è –∞–Ω–∞–ª—ñ–∑—É –ø–∞—Ç—Ç–µ—Ä–Ω—ñ–≤
        detected_patterns = []
        
        for pattern_name, pattern_config in self.fraud_patterns.items():
            # –°–∏–º—É–ª—è—Ü—ñ—è –¥–µ—Ç–µ–∫—Ü—ñ—ó –ø–∞—Ç—Ç–µ—Ä–Ω—É
            detection_score = random.uniform(0.3, 1.0) * pattern_config['weight']
            
            if detection_score > 0.6:  # –ü–æ—Ä—ñ–≥ –¥–µ—Ç–µ–∫—Ü—ñ—ó
                detected_patterns.append({
                    'pattern': pattern_name,
                    'score': detection_score,
                    'indicators': pattern_config['indicators'],
                    'description': self.get_pattern_description(pattern_name)
                })
                
                print(f"      üéØ –î–µ—Ç–µ–∫—Ç–æ–≤–∞–Ω–æ: {pattern_name} (–≤–ø–µ–≤–Ω–µ–Ω—ñ—Å—Ç—å: {detection_score:.1%})")
        
        # –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π
        recommendations = await self.generate_recommendations(detected_patterns, investigation)
        
        analysis_result = {
            'patterns_detected': detected_patterns,
            'recommendations': recommendations,
            'analysis_model': selected_model,
            'analysis_timestamp': datetime.now().isoformat()
        }
        
        return analysis_result
    
    def get_pattern_description(self, pattern_name: str) -> str:
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –æ–ø–∏—Å—É –ø–∞—Ç—Ç–µ—Ä–Ω—É"""
        descriptions = {
            'shell_company': '–°—Ö–µ–º–∞ –∑ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è–º —Ñ—ñ–∫—Ç–∏–≤–Ω–∏—Ö –∫–æ–º–ø–∞–Ω—ñ–π',
            'layering_scheme': '–ë–∞–≥–∞—Ç–æ—Ä—ñ–≤–Ω–µ–≤–∞ —Å—Ö–µ–º–∞ –≤—ñ–¥–º–∏–≤–∞–Ω–Ω—è –∫–æ—à—Ç—ñ–≤',
            'corruption_network': '–ö–æ—Ä—É–ø—Ü—ñ–π–Ω–∞ –º–µ—Ä–µ–∂–∞ –≤ –¥–µ—Ä–∂–∞–≤–Ω–æ–º—É —Å–µ–∫—Ç–æ—Ä—ñ'
        }
        return descriptions.get(pattern_name, '–ù–µ–≤—ñ–¥–æ–º–∏–π –ø–∞—Ç—Ç–µ—Ä–Ω')
    
    async def generate_recommendations(self, patterns: List[Dict], investigation: Investigation) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π –Ω–∞ –æ—Å–Ω–æ–≤—ñ –∞–Ω–∞–ª—ñ–∑—É"""
        recommendations = []
        
        if any(p['pattern'] == 'shell_company' for p in patterns):
            recommendations.extend([
                "–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ–π–Ω—ñ –¥–∞–Ω—ñ –≤—Å—ñ—Ö –ø–æ–≤'—è–∑–∞–Ω–∏—Ö –∫–æ–º–ø–∞–Ω—ñ–π",
                "–ü—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–≤–∞—Ç–∏ —Ñ–∞–∫—Ç–∏—á–Ω—É –¥—ñ—è–ª—å–Ω—ñ—Å—Ç—å –ø—ñ–¥–æ–∑—Ä—ñ–ª–∏—Ö –æ—Ä–≥–∞–Ω—ñ–∑–∞—Ü—ñ–π",
                "–í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ —Ä–µ–∞–ª—å–Ω–∏—Ö –±–µ–Ω–µ—Ñ—ñ—Ü—ñ–∞—Ä—ñ–≤"
            ])
        
        if any(p['pattern'] == 'layering_scheme' for p in patterns):
            recommendations.extend([
                "–ü–æ–±—É–¥—É–≤–∞—Ç–∏ –ø–æ–≤–Ω—É –∫–∞—Ä—Ç—É —Ñ—ñ–Ω–∞–Ω—Å–æ–≤–∏—Ö –ø–æ—Ç–æ–∫—ñ–≤",
                "–Ü–¥–µ–Ω—Ç–∏—Ñ—ñ–∫—É–≤–∞—Ç–∏ –≤—Å—ñ –ø—Ä–æ–º—ñ–∂–Ω—ñ —Ä–∞—Ö—É–Ω–∫–∏",
                "–ü—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–≤–∞—Ç–∏ —á–∞—Å–æ–≤—ñ –ø–∞—Ç—Ç–µ—Ä–Ω–∏ –ø–µ—Ä–µ–∫–∞–∑—ñ–≤"
            ])
        
        if any(p['pattern'] == 'corruption_network' for p in patterns):
            recommendations.extend([
                "–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –∑–≤'—è–∑–∫–∏ –∑ –¥–µ—Ä–∂–∞–≤–Ω–∏–º–∏ —Å–ª—É–∂–±–æ–≤—Ü—è–º–∏", 
                "–ü—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–≤–∞—Ç–∏ –ø—Ä–æ—Ü–µ–¥—É—Ä–∏ —Ç–µ–Ω–¥–µ—Ä–Ω–∏—Ö –∑–∞–∫—É–ø—ñ–≤–µ–ª—å",
                "–í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ —Ñ–∞–∫—Ç–∏ –∫–æ–Ω—Ñ–ª—ñ–∫—Ç—É —ñ–Ω—Ç–µ—Ä–µ—Å—ñ–≤"
            ])
        
        # –ó–∞–≥–∞–ª—å–Ω—ñ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó
        recommendations.extend([
            "–ü–æ–≤—ñ–¥–æ–º–∏—Ç–∏ –ø—Ä–∞–≤–æ–æ—Ö–æ—Ä–æ–Ω–Ω—ñ –æ—Ä–≥–∞–Ω–∏ –ø—Ä–∏ –≤–∏—Å–æ–∫–æ–º—É —Ä—ñ–≤–Ω—ñ —Ä–∏–∑–∏–∫—É",
            "–ó–∞–º–æ—Ä–æ–∑–∏—Ç–∏ –ø—ñ–¥–æ–∑—Ä—ñ–ª—ñ –∞–∫—Ç–∏–≤–∏ –¥–ª—è –∑–∞–ø–æ–±—ñ–≥–∞–Ω–Ω—è –≤—Ç—Ä–∞—Ç–∞–º",
            "–ü—ñ–¥–≥–æ—Ç—É–≤–∞—Ç–∏ –¥–µ—Ç–∞–ª—å–Ω–∏–π –∑–≤—ñ—Ç –¥–ª—è —Ä–µ–≥—É–ª—è—Ç–æ—Ä—ñ–≤"
        ])
        
        return recommendations[:5]  # –û–±–º–µ–∂—É—î–º–æ –¥–æ 5 –Ω–∞–π–≤–∞–∂–ª–∏–≤—ñ—à–∏—Ö
    
    async def update_confidence_score(self, investigation: Investigation):
        """–û–Ω–æ–≤–ª–µ–Ω–Ω—è —Ä—ñ–≤–Ω—è –≤–ø–µ–≤–Ω–µ–Ω–æ—Å—Ç—ñ –≤ —Ä–æ–∑—Å–ª—ñ–¥—É–≤–∞–Ω–Ω—ñ"""
        # –§–∞–∫—Ç–æ—Ä–∏ –≤–ø–ª–∏–≤—É –Ω–∞ –≤–ø–µ–≤–Ω–µ–Ω—ñ—Å—Ç—å
        evidence_factor = min(investigation.evidence_count / 10, 1.0)  # –ú–∞–∫—Å–∏–º—É–º –∑–∞ 10 –¥–æ–∫–∞–∑—ñ–≤
        
        case_evidence = [e for e in self.evidence_database if e.case_id == investigation.case_id]
        reliability_factor = np.mean([e.reliability for e in case_evidence]) if case_evidence else 0.5
        
        financial_factor = min(investigation.financial_impact / 1000000, 1.0)  # –ù–æ—Ä–º–∞–ª—ñ–∑–∞—Ü—ñ—è –ø–æ $1M
        
        # –ó–∞–≥–∞–ª—å–Ω–∏–π —Ä–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –≤–ø–µ–≤–Ω–µ–Ω–æ—Å—Ç—ñ
        confidence = (evidence_factor * 0.4 + reliability_factor * 0.4 + financial_factor * 0.2)
        investigation.confidence_score = confidence
        investigation.updated_at = datetime.now()
        
        # –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É –Ω–∞ –æ—Å–Ω–æ–≤—ñ –≤–ø–µ–≤–Ω–µ–Ω–æ—Å—Ç—ñ
        if confidence > 0.8:
            investigation.status = 'high_confidence'
        elif confidence > 0.6:
            investigation.status = 'medium_confidence'
        else:
            investigation.status = 'low_confidence'
    
    async def conduct_investigation(self, case_id: str) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ–¥–µ–Ω–Ω—è –ø–æ–≤–Ω–æ–≥–æ —Ä–æ–∑—Å–ª—ñ–¥—É–≤–∞–Ω–Ω—è"""
        if case_id not in self.active_investigations:
            raise ValueError(f"–†–æ–∑—Å–ª—ñ–¥—É–≤–∞–Ω–Ω—è {case_id} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        
        investigation = self.active_investigations[case_id]
        
        print(f"\nüïµÔ∏è –ü—Ä–æ–≤–µ–¥–µ–Ω–Ω—è –≥–ª–∏–±–æ–∫–æ–≥–æ —Ä–æ–∑—Å–ª—ñ–¥—É–≤–∞–Ω–Ω—è {case_id}")
        print("=" * 50)
        
        # –ï—Ç–∞–ø 1: –ê–Ω–∞–ª—ñ–∑ –ø–∞—Ç—Ç–µ—Ä–Ω—ñ–≤
        analysis_result = await self.analyze_patterns(investigation)
        
        # –ï—Ç–∞–ø 2: –†–æ–∑—à–∏—Ä–µ–Ω–∏–π –ø–æ—à—É–∫ –¥–æ–∫–∞–∑—ñ–≤
        await self.extended_evidence_search(investigation)
        
        # –ï—Ç–∞–ø 3: –ü–æ–±—É–¥–æ–≤–∞ –∫–∞—Ä—Ç–∏ –∑–≤'—è–∑–∫—ñ–≤
        network_map = await self.build_network_map(investigation)
        
        # –ï—Ç–∞–ø 4: –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –∑–≤—ñ—Ç—É
        final_report = await self.prepare_final_report(investigation, analysis_result, network_map)
        
        print(f"‚úÖ –†–æ–∑—Å–ª—ñ–¥—É–≤–∞–Ω–Ω—è {case_id} –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
        print(f"   üìä –í–ø–µ–≤–Ω–µ–Ω—ñ—Å—Ç—å: {investigation.confidence_score:.1%}")
        print(f"   üìÑ –î–æ–∫–∞–∑—ñ–≤ –∑—ñ–±—Ä–∞–Ω–æ: {investigation.evidence_count}")
        print(f"   ‚ö†Ô∏è –§—ñ–Ω–∞–ª—å–Ω–∏–π —Å—Ç–∞—Ç—É—Å: {investigation.status}")
        
        return final_report
    
    async def extended_evidence_search(self, investigation: Investigation):
        """–†–æ–∑—à–∏—Ä–µ–Ω–∏–π –ø–æ—à—É–∫ –¥–æ–∫–∞–∑—ñ–≤"""
        print(f"   üîç –†–æ–∑—à–∏—Ä–µ–Ω–∏–π –ø–æ—à—É–∫ –¥–æ–∫–∞–∑—ñ–≤...")
        
        # –°–∏–º—É–ª—è—Ü—ñ—è –ø–æ—à—É–∫—É –¥–æ–¥–∞—Ç–∫–æ–≤–∏—Ö –¥–æ–∫–∞–∑—ñ–≤
        additional_evidence = random.randint(2, 8)
        
        for i in range(additional_evidence):
            evidence_id = f"EV-{len(self.evidence_database) + 1:06d}"
            
            evidence_types = [
                'communication_records', 'travel_records', 'property_records',
                'corporate_filings', 'regulatory_reports', 'media_mentions'
            ]
            
            evidence = Evidence(
                evidence_id=evidence_id,
                case_id=investigation.case_id,
                evidence_type=random.choice(evidence_types),
                description=f"–î–æ–¥–∞—Ç–∫–æ–≤–∏–π –¥–æ–∫–∞–∑ #{i+1}",
                source="Extended Search",
                reliability=random.uniform(0.7, 0.95),
                timestamp=datetime.now()
            )
            
            self.evidence_database.append(evidence)
            investigation.evidence_count += 1
        
        await self.update_confidence_score(investigation)
        
        print(f"      üìÑ –ó–Ω–∞–π–¥–µ–Ω–æ {additional_evidence} –¥–æ–¥–∞—Ç–∫–æ–≤–∏—Ö –¥–æ–∫–∞–∑—ñ–≤")
    
    async def build_network_map(self, investigation: Investigation) -> Dict[str, Any]:
        """–ü–æ–±—É–¥–æ–≤–∞ –∫–∞—Ä—Ç–∏ –º–µ—Ä–µ–∂—ñ –∑–≤'—è–∑–∫—ñ–≤"""
        print(f"   üï∏Ô∏è –ü–æ–±—É–¥–æ–≤–∞ –∫–∞—Ä—Ç–∏ –∑–≤'—è–∑–∫—ñ–≤...")
        
        # –°–∏–º—É–ª—è—Ü—ñ—è –ø–æ–±—É–¥–æ–≤–∏ –º–µ—Ä–µ–∂—ñ
        entities = []
        connections = []
        
        # –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Å—É—Ç–Ω–æ—Å—Ç–µ–π
        entity_types = ['person', 'company', 'bank_account', 'property', 'government_official']
        
        for i in range(random.randint(5, 15)):
            entity = {
                'id': f"E{i+1:03d}",
                'type': random.choice(entity_types),
                'name': f"Entity_{i+1}",
                'risk_score': random.uniform(0.1, 1.0),
                'suspicious': random.random() < 0.3
            }
            entities.append(entity)
        
        # –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –∑–≤'—è–∑–∫—ñ–≤
        for i in range(len(entities)):
            for j in range(i+1, len(entities)):
                if random.random() < 0.2:  # 20% —à–∞–Ω—Å—É –Ω–∞ –∑–≤'—è–∑–æ–∫
                    connection = {
                        'from': entities[i]['id'],
                        'to': entities[j]['id'],
                        'type': random.choice(['financial', 'ownership', 'communication', 'family']),
                        'strength': random.uniform(0.1, 1.0)
                    }
                    connections.append(connection)
        
        network_map = {
            'entities': entities,
            'connections': connections,
            'analysis_timestamp': datetime.now().isoformat()
        }
        
        print(f"      üéØ –í–∏—è–≤–ª–µ–Ω–æ {len(entities)} —Å—É—Ç–Ω–æ—Å—Ç–µ–π —Ç–∞ {len(connections)} –∑–≤'—è–∑–∫—ñ–≤")
        
        return network_map
    
    async def prepare_final_report(self, investigation: Investigation, 
                                 analysis_result: Dict, network_map: Dict) -> Dict[str, Any]:
        """–ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ñ—ñ–Ω–∞–ª—å–Ω–æ–≥–æ –∑–≤—ñ—Ç—É"""
        print(f"   üìä –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ñ—ñ–Ω–∞–ª—å–Ω–æ–≥–æ –∑–≤—ñ—Ç—É...")
        
        report = {
            'investigation': {
                'case_id': investigation.case_id,
                'title': investigation.title,
                'status': investigation.status,
                'confidence_score': investigation.confidence_score,
                'evidence_count': investigation.evidence_count,
                'financial_impact': investigation.financial_impact,
                'duration_days': (datetime.now() - investigation.created_at).days
            },
            'analysis': analysis_result,
            'network': network_map,
            'summary': {
                'key_findings': [
                    f"–í–∏—è–≤–ª–µ–Ω–æ {len(analysis_result['patterns_detected'])} –ø—ñ–¥–æ–∑—Ä—ñ–ª–∏—Ö –ø–∞—Ç—Ç–µ—Ä–Ω—ñ–≤",
                    f"–ó—ñ–±—Ä–∞–Ω–æ {investigation.evidence_count} –¥–æ–∫–∞–∑—ñ–≤",
                    f"–Ü–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–æ–≤–∞–Ω–æ {len(network_map['entities'])} –ø–æ–≤'—è–∑–∞–Ω–∏—Ö —Å—É—Ç–Ω–æ—Å—Ç–µ–π",
                    f"–§—ñ–Ω–∞–Ω—Å–æ–≤–∏–π –≤–ø–ª–∏–≤: ${investigation.financial_impact:,.2f}"
                ],
                'risk_assessment': investigation.risk_level,
                'recommended_actions': analysis_result['recommendations']
            },
            'generated_at': datetime.now().isoformat(),
            'agent_signature': self.agent_id
        }
        
        return report

    def get_investigation_status(self, case_id: str) -> Dict[str, Any]:
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É —Ä–æ–∑—Å–ª—ñ–¥—É–≤–∞–Ω–Ω—è"""
        if case_id not in self.active_investigations:
            return {'error': f'–†–æ–∑—Å–ª—ñ–¥—É–≤–∞–Ω–Ω—è {case_id} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ'}
        
        investigation = self.active_investigations[case_id]
        
        return {
            'case_id': case_id,
            'status': investigation.status,
            'confidence': investigation.confidence_score,
            'evidence_count': investigation.evidence_count,
            'created': investigation.created_at.isoformat(),
            'updated': investigation.updated_at.isoformat()
        }

    async def demo_investigation(self):
        """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è –º–æ–∂–ª–∏–≤–æ—Å—Ç–µ–π –∞–≥–µ–Ω—Ç–∞"""
        print("üïµÔ∏è –î–ï–ú–û–ù–°–¢–†–ê–¶–Ü–Ø DEEP INVESTIGATOR AGENT")
        print("=" * 60)
        
        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–µ—Å—Ç–æ–≤–æ—ó –ø–æ–¥—ñ—ó
        trigger_event = {
            'type': 'suspicious_financial_network',
            'description': '–í–∏—è–≤–ª–µ–Ω–æ –ø—ñ–¥–æ–∑—Ä—ñ–ª—É –º–µ—Ä–µ–∂—É —Ñ—ñ–Ω–∞–Ω—Å–æ–≤–∏—Ö –ø–µ—Ä–µ–∫–∞–∑—ñ–≤',
            'amount': 5200000.0,
            'risk_level': 'high',
            'source': 'Banking Monitoring System'
        }
        
        # –ó–∞–ø—É—Å–∫ —Ä–æ–∑—Å–ª—ñ–¥—É–≤–∞–Ω–Ω—è
        investigation = await self.start_investigation(trigger_event)
        
        # –ó–∞—Ç—Ä–∏–º–∫–∞ –¥–ª—è —Ä–µ–∞–ª—ñ—Å—Ç–∏—á–Ω–æ—Å—Ç—ñ
        await asyncio.sleep(2)
        
        # –ü—Ä–æ–≤–µ–¥–µ–Ω–Ω—è –ø–æ–≤–Ω–æ–≥–æ —Ä–æ–∑—Å–ª—ñ–¥—É–≤–∞–Ω–Ω—è
        final_report = await self.conduct_investigation(investigation.case_id)
        
        print("\nüìã –§–Ü–ù–ê–õ–¨–ù–ò–ô –ó–í–Ü–¢:")
        print("=" * 30)
        print(f"–†–æ–∑—Å–ª—ñ–¥—É–≤–∞–Ω–Ω—è: {final_report['investigation']['case_id']}")
        print(f"–°—Ç–∞—Ç—É—Å: {final_report['investigation']['status']}")
        print(f"–í–ø–µ–≤–Ω–µ–Ω—ñ—Å—Ç—å: {final_report['investigation']['confidence_score']:.1%}")
        
        print(f"\nüîç –ö–ª—é—á–æ–≤—ñ –≤–∏—Å–Ω–æ–≤–∫–∏:")
        for finding in final_report['summary']['key_findings']:
            print(f"  ‚Ä¢ {finding}")
        
        print(f"\nüìù –†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω—ñ –¥—ñ—ó:")
        for action in final_report['summary']['recommended_actions'][:3]:
            print(f"  ‚Ä¢ {action}")
        
        return final_report

# –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è –∞–≥–µ–Ω—Ç–∞
async def main():
    agent = DeepInvestigatorAgent()
    await agent.demo_investigation()

if __name__ == "__main__":
    asyncio.run(main())
