#!/usr/bin/env python3
"""
AutoImproveAgent - –ê–≥–µ–Ω—Ç —Å–∞–º–æ–≤–¥–æ—Å–∫–æ–Ω–∞–ª–µ–Ω–Ω—è –∫–æ–¥—É –ø–ª–∞—Ç—Ñ–æ—Ä–º–∏
–ê–Ω–∞–ª—ñ–∑—É—î –∫–æ–¥–æ–≤—É –±–∞–∑—É —Ç–∞ –ø—Ä–æ–ø–æ–Ω—É—î –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è –∑–≥—ñ–¥–Ω–æ –∑ —Ç–µ—Ö–Ω—ñ—á–Ω–∏–º –∑–∞–≤–¥–∞–Ω–Ω—è–º
"""

import asyncio
import logging
import ast
import json
from datetime import datetime
from typing import Dict, List, Any
from dataclasses import dataclass
from pathlib import Path
import aiohttp
import aiofiles

logger = logging.getLogger(__name__)

@dataclass
class CodeIssue:
    file_path: str
    line_number: int
    issue_type: str
    severity: str
    description: str
    suggestion: str
    confidence: float

@dataclass
class CodeImprovement:
    file_path: str
    original_code: str
    improved_code: str
    description: str
    impact_score: float

class AutoImproveAgent:
    """
    –ê–≥–µ–Ω—Ç —Å–∞–º–æ–≤–¥–æ—Å–∫–æ–Ω–∞–ª–µ–Ω–Ω—è –∫–æ–¥—É –∑–≥—ñ–¥–Ω–æ –∑ —Ç–µ—Ö–Ω—ñ—á–Ω–∏–º –∑–∞–≤–¥–∞–Ω–Ω—è–º
    """

    def __init__(self):
        self.project_root = Path("/app")
        self.repo = None
        self.analysis_results = []
        self.improvements_made = []
        self.code_quality_metrics = {}

        # LLM –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É –∫–æ–¥—É (—á–µ—Ä–µ–∑ Model SDK)
        self.model_sdk_url = "http://modelsdk:3010/v1"

        # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∞–Ω–∞–ª—ñ–∑—É
        self.file_patterns = [
            "**/*.py", "**/*.js", "**/*.ts", "**/*.jsx", "**/*.tsx",
            "**/*.yaml", "**/*.yml", "**/*.json", "**/*.md"
        ]

        self.exclude_patterns = [
            "**/node_modules/**", "**/.git/**", "**/venv/**",
            "**/__pycache__/**", "**/dist/**", "**/build/**"
        ]

    async def initialize(self):
        """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î –∞–≥–µ–Ω—Ç —Å–∞–º–æ–≤–¥–æ—Å–∫–æ–Ω–∞–ª–µ–Ω–Ω—è"""
        logger.info("üöÄ Initializing AutoImprove Agent...")

        try:
            import git
            self.repo = git.Repo(self.project_root)
            logger.info(f"‚úÖ Git repository initialized: {self.repo.working_dir}")
        except (ImportError, git.InvalidGitRepositoryError):
            logger.warning("‚ö†Ô∏è Git not available or not a git repository, some features will be limited")
            self.repo = None

        await self.analyze_current_codebase()

    async def start_continuous_improvement(self):
        """–ó–∞–ø—É—Å–∫–∞—î —Ä–µ–∂–∏–º –ø–æ—Å—Ç—ñ–π–Ω–æ–≥–æ —Å–∞–º–æ–≤–¥–æ—Å–∫–æ–Ω–∞–ª–µ–Ω–Ω—è"""
        logger.info("üîÑ Starting continuous code improvement...")

        while True:
            try:
                # –ê–Ω–∞–ª—ñ–∑—É—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞–Ω –∫–æ–¥—É
                await self.analyze_current_codebase()

                # –®—É–∫–∞—î–º–æ –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ –¥–ª—è –ø–æ–∫—Ä–∞—â–µ–Ω—å
                improvements = await self.identify_improvements()

                # –ó–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è –∑ –≤–∏—Å–æ–∫–æ—é –¥–æ–≤—ñ—Ä–æ—é
                if improvements:
                    await self.apply_safe_improvements(improvements)

                # –ì–µ–Ω–µ—Ä–∏—Ä—É—î–º–æ –∑–≤—ñ—Ç
                await self.generate_improvement_report()

                # –ß–µ–∫–∞—î–º–æ –≥–æ–¥–∏–Ω—É –ø–µ—Ä–µ–¥ –Ω–∞—Å—Ç—É–ø–Ω–∏–º —Ü–∏–∫–ª–æ–º
                await asyncio.sleep(3600)

            except Exception as e:
                logger.error(f"Error in improvement cycle: {e}")
                await asyncio.sleep(300)  # 5 —Ö–≤–∏–ª–∏–Ω –ø—Ä–∏ –ø–æ–º–∏–ª—Ü—ñ

    async def analyze_current_codebase(self):
        """–ê–Ω–∞–ª—ñ–∑—É—î –ø–æ—Ç–æ—á–Ω—É –∫–æ–¥–æ–≤—É –±–∞–∑—É"""
        logger.info("üìä Analyzing current codebase...")

        self.analysis_results.clear()

        # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –≤—Å—ñ —Ñ–∞–π–ª–∏ –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É
        files_to_analyze = await self.find_files_to_analyze()

        # –ê–Ω–∞–ª—ñ–∑—É—î–º–æ –∫–æ–∂–µ–Ω —Ñ–∞–π–ª
        analysis_tasks = []
        for file_path in files_to_analyze[:50]:  # –û–±–º–µ–∂—É—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ñ–∞–π–ª—ñ–≤
            task = asyncio.create_task(self.analyze_file(file_path))
            analysis_tasks.append(task)

        await asyncio.gather(*analysis_tasks, return_exceptions=True)

        # –û–±—á–∏—Å–ª—é—î–º–æ –º–µ—Ç—Ä–∏–∫–∏ —è–∫–æ—Å—Ç—ñ –∫–æ–¥—É
        await self.calculate_code_quality_metrics()

        logger.info(f"‚úÖ Analyzed {len(files_to_analyze)} files, found {len(self.analysis_results)} issues")

    async def find_files_to_analyze(self) -> List[Path]:
        """–ó–Ω–∞—Ö–æ–¥–∏—Ç—å —Ñ–∞–π–ª–∏ –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É"""
        files = []

        for pattern in self.file_patterns:
            for file_path in self.project_root.rglob(pattern):
                if file_path.is_file():
                    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Ñ–∞–π–ª –Ω–µ –≤ exclude patterns
                    relative_path = file_path.relative_to(self.project_root)
                    if not any(relative_path.match(exclude) for exclude in self.exclude_patterns):
                        files.append(file_path)

        return files

    async def analyze_file(self, file_path: Path):
        """–ê–Ω–∞–ª—ñ–∑—É—î –æ–∫—Ä–µ–º–∏–π —Ñ–∞–π–ª"""
        try:
            async with aiofiles.open(file_path, 'r', encoding='utf-8') as f:
                content = await f.read()

            file_extension = file_path.suffix.lower()

            if file_extension == '.py':
                await self.analyze_python_file(file_path, content)
            elif file_extension in ['.js', '.ts', '.jsx', '.tsx']:
                await self.analyze_javascript_file(file_path, content)
            elif file_extension in ['.yaml', '.yml']:
                await self.analyze_yaml_file(file_path, content)
            elif file_extension == '.json':
                await self.analyze_json_file(file_path, content)

        except Exception as e:
            logger.error(f"Failed to analyze {file_path}: {e}")

    async def analyze_python_file(self, file_path: Path, content: str):
        """–ê–Ω–∞–ª—ñ–∑—É—î Python —Ñ–∞–π–ª"""
        issues = []

        try:
            # –ü–∞—Ä—Å–∏–º–æ AST –¥–ª—è —Å—Ç–∞—Ç–∏—á–Ω–æ–≥–æ –∞–Ω–∞–ª—ñ–∑—É
            tree = ast.parse(content)

            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å–∫–ª–∞–¥–Ω—ñ—Å—Ç—å —Ñ—É–Ω–∫—Ü—ñ–π
            for node in ast.walk(tree):
                if isinstance(node, ast.FunctionDef):
                    complexity = self.calculate_cyclomatic_complexity(node)
                    if complexity > 10:
                        issues.append(CodeIssue(
                            file_path=str(file_path),
                            line_number=node.lineno,
                            issue_type="high_complexity",
                            severity="warning",
                            description=f"Function {node.name} has high complexity ({complexity})",
                            suggestion="Consider breaking this function into smaller functions",
                            confidence=0.8
                        ))

                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –¥–æ–≤–≥—ñ —Ñ—É–Ω–∫—Ü—ñ—ó
                if isinstance(node, ast.FunctionDef):
                    if hasattr(node, 'end_lineno') and node.end_lineno:
                        lines = node.end_lineno - node.lineno
                        if lines > 50:
                            issues.append(CodeIssue(
                                file_path=str(file_path),
                                line_number=node.lineno,
                                issue_type="long_function",
                                severity="info",
                                description=f"Function {node.name} is {lines} lines long",
                                suggestion="Consider refactoring into smaller functions",
                                confidence=0.7
                            ))

            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ docstrings
            await self.check_docstrings(file_path, tree, content, issues)

            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å—Ç–∏–ª—å –∫–æ–¥—É
            await self.check_python_style(file_path, content, issues)

        except SyntaxError as e:
            issues.append(CodeIssue(
                file_path=str(file_path),
                line_number=e.lineno or 1,
                issue_type="syntax_error",
                severity="error",
                description=f"Syntax error: {e.msg}",
                suggestion="Fix the syntax error",
                confidence=1.0
            ))

        self.analysis_results.extend(issues)

    def calculate_cyclomatic_complexity(self, node: ast.FunctionDef) -> int:
        """–û–±—á–∏—Å–ª—é—î —Ü–∏–∫–ª–æ–º–∞—Ç–∏—á–Ω—É —Å–∫–ª–∞–¥–Ω—ñ—Å—Ç—å —Ñ—É–Ω–∫—Ü—ñ—ó"""
        complexity = 1  # –ë–∞–∑–æ–≤–∞ —Å–∫–ª–∞–¥–Ω—ñ—Å—Ç—å

        for child in ast.walk(node):
            if isinstance(child, (ast.If, ast.While, ast.For, ast.AsyncFor)):
                complexity += 1
            elif isinstance(child, ast.ExceptHandler):
                complexity += 1
            elif isinstance(child, ast.BoolOp):
                complexity += len(child.values) - 1

        return complexity

    async def check_docstrings(self, file_path: Path, tree: ast.AST, content: str, issues: List[CodeIssue]):
        """–ü–µ—Ä–µ–≤—ñ—Ä—è—î –Ω–∞—è–≤–Ω—ñ—Å—Ç—å docstrings"""
        lines = content.split('\n')

        for node in ast.walk(tree):
            if isinstance(node, (ast.FunctionDef, ast.ClassDef)):
                docstring = ast.get_docstring(node)
                if not docstring and not node.name.startswith('_'):
                    issues.append(CodeIssue(
                        file_path=str(file_path),
                        line_number=node.lineno,
                        issue_type="missing_docstring",
                        severity="info",
                        description=f"{type(node).__name__} {node.name} missing docstring",
                        suggestion="Add a descriptive docstring",
                        confidence=0.9
                    ))

    async def check_python_style(self, file_path: Path, content: str, issues: List[CodeIssue]):
        """–ü–µ—Ä–µ–≤—ñ—Ä—è—î —Å—Ç–∏–ª—å Python –∫–æ–¥—É"""
        lines = content.split('\n')

        for i, line in enumerate(lines, 1):
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –¥–æ–≤–∂–∏–Ω—É —Ä—è–¥–∫–∞
            if len(line) > 120:
                issues.append(CodeIssue(
                    file_path=str(file_path),
                    line_number=i,
                    issue_type="long_line",
                    severity="info",
                    description=f"Line too long ({len(line)} characters)",
                    suggestion="Split long line or use line continuation",
                    confidence=0.8
                ))

            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ trailing whitespace
            if line.rstrip() != line:
                issues.append(CodeIssue(
                    file_path=str(file_path),
                    line_number=i,
                    issue_type="trailing_whitespace",
                    severity="info",
                    description="Trailing whitespace",
                    suggestion="Remove trailing whitespace",
                    confidence=1.0
                ))

    async def analyze_javascript_file(self, file_path: Path, content: str):
        """–ê–Ω–∞–ª—ñ–∑—É—î JavaScript/TypeScript —Ñ–∞–π–ª"""
        issues = []
        lines = content.split('\n')

        for i, line in enumerate(lines, 1):
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ console.log (–Ω–µ –ø–æ–≤–∏–Ω–Ω–æ –±—É—Ç–∏ –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—ñ)
            if 'console.log' in line and not line.strip().startswith('//'):
                issues.append(CodeIssue(
                    file_path=str(file_path),
                    line_number=i,
                    issue_type="console_log",
                    severity="warning",
                    description="Console.log statement found",
                    suggestion="Remove console.log or use proper logging",
                    confidence=0.9
                ))

            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ var (–∫—Ä–∞—â–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ let/const)
            if line.strip().startswith('var '):
                issues.append(CodeIssue(
                    file_path=str(file_path),
                    line_number=i,
                    issue_type="var_usage",
                    severity="info",
                    description="Using 'var' instead of 'let' or 'const'",
                    suggestion="Use 'let' or 'const' instead of 'var'",
                    confidence=0.8
                ))

        self.analysis_results.extend(issues)

    async def analyze_yaml_file(self, file_path: Path, content: str):
        """–ê–Ω–∞–ª—ñ–∑—É—î YAML —Ñ–∞–π–ª"""
        issues = []

        try:
            import yaml
            yaml.safe_load(content)
        except yaml.YAMLError as e:
            issues.append(CodeIssue(
                file_path=str(file_path),
                line_number=getattr(e, 'problem_mark', {}).get('line', 1) + 1,
                issue_type="yaml_error",
                severity="error",
                description=f"YAML parsing error: {e}",
                suggestion="Fix YAML syntax",
                confidence=1.0
            ))

        self.analysis_results.extend(issues)

    async def analyze_json_file(self, file_path: Path, content: str):
        """–ê–Ω–∞–ª—ñ–∑—É—î JSON —Ñ–∞–π–ª"""
        issues = []

        try:
            json.loads(content)
        except json.JSONDecodeError as e:
            issues.append(CodeIssue(
                file_path=str(file_path),
                line_number=e.lineno,
                issue_type="json_error",
                severity="error",
                description=f"JSON parsing error: {e.msg}",
                suggestion="Fix JSON syntax",
                confidence=1.0
            ))

        self.analysis_results.extend(issues)

    async def identify_improvements(self) -> List[CodeImprovement]:
        """–Ü–¥–µ–Ω—Ç–∏—Ñ—ñ–∫—É—î –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ –¥–ª—è –ø–æ–∫—Ä–∞—â–µ–Ω—å"""
        improvements = []

        # –ì—Ä—É–ø—É—î–º–æ –ø—Ä–æ–±–ª–µ–º–∏ –∑–∞ —Ñ–∞–π–ª–∞–º–∏
        issues_by_file = {}
        for issue in self.analysis_results:
            if issue.file_path not in issues_by_file:
                issues_by_file[issue.file_path] = []
            issues_by_file[issue.file_path].append(issue)

        # –ì–µ–Ω–µ—Ä–∏—Ä—É—î–º–æ –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ —Ñ–∞–π–ª—É
        for file_path, issues in issues_by_file.items():
            file_improvements = await self.generate_file_improvements(file_path, issues)
            improvements.extend(file_improvements)

        return improvements

    async def generate_file_improvements(self, file_path: str, issues: List[CodeIssue]) -> List[CodeImprovement]:
        """–ì–µ–Ω–µ—Ä—É—î –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è –¥–ª—è —Ñ–∞–π–ª—É"""
        improvements = []

        try:
            # –ß–∏—Ç–∞—î–º–æ —Ñ–∞–π–ª
            async with aiofiles.open(file_path, 'r', encoding='utf-8') as f:
                content = await f.read()

            # –ì–µ–Ω–µ—Ä–∏—Ä—É—î–º–æ –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é LLM
            llm_improvements = await self.generate_llm_improvements(file_path, content, issues)
            improvements.extend(llm_improvements)

            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω—ñ –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è (–≤–∏—Å–æ–∫–∏–π —Ä—ñ–≤–µ–Ω—å –¥–æ–≤—ñ—Ä–∏)
            auto_improvements = await self.generate_automatic_improvements(file_path, content, issues)
            improvements.extend(auto_improvements)

        except Exception as e:
            logger.error(f"Failed to generate improvements for {file_path}: {e}")

        return improvements

    async def generate_llm_improvements(self, file_path: str, content: str, issues: List[CodeIssue]) -> List[CodeImprovement]:
        """–ì–µ–Ω–µ—Ä—É—î –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é LLM"""
        improvements = []

        try:
            # –§–æ—Ä–º—É—î–º–æ –ø—Ä–æ–º–ø—Ç –¥–ª—è LLM
            issues_description = "\n".join([
                f"Line {issue.line_number}: {issue.description} ({issue.issue_type})"
                for issue in issues[:10]  # –û–±–º–µ–∂—É—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º
            ])

            prompt = f"""
Analyze the following code and suggest improvements:

File: {file_path}
Issues found:
{issues_description}

Code:
```
{content[:2000]}  # –û–±–º–µ–∂—É—î–º–æ —Ä–æ–∑–º—ñ—Ä –∫–æ–¥—É
```

Please suggest specific code improvements that address these issues.
Focus on: code quality, performance, maintainability, and best practices.
Provide the improved code sections.
"""

            # –í–∏–∫–ª–∏–∫–∞—î–º–æ LLM —á–µ—Ä–µ–∑ Model SDK
            async with aiohttp.ClientSession() as session:
                response = await session.post(
                    f"{self.model_sdk_url}/chat/completions",
                    json={
                        "model": "microsoft/phi-4-reasoning",
                        "messages": [{"role": "user", "content": prompt}],
                        "max_tokens": 1000,
                        "temperature": 0.3
                    }
                )

                if response.status == 200:
                    result = await response.json()
                    suggestion = result['choices'][0]['message']['content']

                    # –ü–∞—Ä—Å–∏–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å LLM —Ç–∞ —Å—Ç–≤–æ—Ä—é—î–º–æ –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è
                    improvement = CodeImprovement(
                        file_path=file_path,
                        original_code=content[:500],  # –§—Ä–∞–≥–º–µ–Ω—Ç –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥—É
                        improved_code=suggestion[:500],  # –§—Ä–∞–≥–º–µ–Ω—Ç –ø–æ–∫—Ä–∞—â–µ–Ω–æ–≥–æ –∫–æ–¥—É
                        description="LLM-generated code improvements",
                        impact_score=0.6  # –ü–æ–º—ñ—Ä–Ω–∞ –¥–æ–≤—ñ—Ä–∞ –¥–æ LLM –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ–π
                    )
                    improvements.append(improvement)

        except Exception as e:
            logger.error(f"Failed to generate LLM improvements: {e}")

        return improvements

    async def generate_automatic_improvements(self, file_path: str, content: str, issues: List[CodeIssue]) -> List[CodeImprovement]:
        """–ì–µ–Ω–µ—Ä—É—î –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω—ñ –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è –∑ –≤–∏—Å–æ–∫–æ—é –¥–æ–≤—ñ—Ä–æ—é"""
        improvements = []

        lines = content.split('\n')
        modified_lines = lines.copy()
        changes_made = False

        for issue in issues:
            if issue.confidence >= 0.9:  # –¢—ñ–ª—å–∫–∏ –≤–∏—Å–æ–∫–æ–¥–æ–≤—ñ—Ä–µ–Ω—ñ –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è
                line_idx = issue.line_number - 1

                if 0 <= line_idx < len(modified_lines):
                    original_line = modified_lines[line_idx]

                    if issue.issue_type == "trailing_whitespace":
                        modified_lines[line_idx] = original_line.rstrip()
                        changes_made = True

                    elif issue.issue_type == "console_log" and "console.log" in original_line:
                        # –ö–æ–º–µ–Ω—Ç—É—î–º–æ console.log –∑–∞–º—ñ—Å—Ç—å –≤–∏–¥–∞–ª–µ–Ω–Ω—è
                        modified_lines[line_idx] = "// " + original_line
                        changes_made = True

        if changes_made:
            improved_content = '\n'.join(modified_lines)
            improvement = CodeImprovement(
                file_path=file_path,
                original_code=content,
                improved_code=improved_content,
                description="Automatic code style improvements",
                impact_score=0.9  # –í–∏—Å–æ–∫–∞ –¥–æ–≤—ñ—Ä–∞ –¥–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏—Ö –ø–æ–∫—Ä–∞—â–µ–Ω—å
            )
            improvements.append(improvement)

        return improvements

    async def apply_safe_improvements(self, improvements: List[CodeImprovement]):
        """–ó–∞—Å—Ç–æ—Å–æ–≤—É—î –±–µ–∑–ø–µ—á–Ω—ñ –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è –∑ –≤–∏—Å–æ–∫–∏–º —Ä—ñ–≤–Ω–µ–º –¥–æ–≤—ñ—Ä–∏"""
        applied_count = 0

        for improvement in improvements:
            if improvement.impact_score >= 0.8:  # –¢—ñ–ª—å–∫–∏ –≤–∏—Å–æ–∫–æ–¥–æ–≤—ñ—Ä–µ–Ω—ñ –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è
                try:
                    await self.apply_improvement(improvement)
                    applied_count += 1

                    self.improvements_made.append({
                        'timestamp': datetime.now().isoformat(),
                        'file': improvement.file_path,
                        'description': improvement.description,
                        'impact_score': improvement.impact_score
                    })

                except Exception as e:
                    logger.error(f"Failed to apply improvement to {improvement.file_path}: {e}")

        if applied_count > 0:
            logger.info(f"‚úÖ Applied {applied_count} code improvements")

            # –°—Ç–≤–æ—Ä—é—î–º–æ commit —è–∫—â–æ —î git repo
            if self.repo:
                await self.create_improvement_commit(applied_count)

    async def apply_improvement(self, improvement: CodeImprovement):
        """–ó–∞—Å—Ç–æ—Å–æ–≤—É—î –∫–æ–Ω–∫—Ä–µ—Ç–Ω–µ –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è"""
        # –°—Ç–≤–æ—Ä—é—î–º–æ –±–µ–∫–∞–ø –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª—É
        backup_path = Path(improvement.file_path + '.bak')

        try:
            # –ë–µ–∫–∞–ø–∏–º–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π —Ñ–∞–π–ª
            async with aiofiles.open(improvement.file_path, 'r', encoding='utf-8') as f:
                original_content = await f.read()

            async with aiofiles.open(backup_path, 'w', encoding='utf-8') as f:
                await f.write(original_content)

            # –ó–∞–ø–∏—Å—É—î–º–æ –ø–æ–∫—Ä–∞—â–µ–Ω–∏–π –∫–æ–¥
            async with aiofiles.open(improvement.file_path, 'w', encoding='utf-8') as f:
                await f.write(improvement.improved_code)

            logger.info(f"üìù Applied improvement to {improvement.file_path}")

        except Exception as e:
            # –í—ñ–¥–Ω–æ–≤–ª—é—î–º–æ –∑ –±–µ–∫–∞–ø—É –ø—Ä–∏ –ø–æ–º–∏–ª—Ü—ñ
            if backup_path.exists():
                async with aiofiles.open(backup_path, 'r', encoding='utf-8') as f:
                    original_content = await f.read()

                async with aiofiles.open(improvement.file_path, 'w', encoding='utf-8') as f:
                    await f.write(original_content)

            raise e
        finally:
            # –í–∏–¥–∞–ª—è—î–º–æ –±–µ–∫–∞–ø
            if backup_path.exists():
                backup_path.unlink()

    async def create_improvement_commit(self, changes_count: int):
        """–°—Ç–≤–æ—Ä—é—î commit –∑ –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è–º–∏"""
        try:
            # –î–æ–¥–∞—î–º–æ –≤—Å—ñ –∑–º—ñ–Ω–µ–Ω—ñ —Ñ–∞–π–ª–∏
            self.repo.git.add('.')

            # –°—Ç–≤–æ—Ä—é—î–º–æ commit
            commit_message = f"ü§ñ AutoImprove: Applied {changes_count} code improvements\n\n" \
                           f"- Automated code style fixes\n" \
                           f"- Performance optimizations\n" \
                           f"- Best practices implementation\n\n" \
                           f"Generated by AutoImproveAgent at {datetime.now().isoformat()}"

            self.repo.index.commit(commit_message)
            logger.info(f"üìù Created improvement commit: {changes_count} changes")

        except Exception as e:
            logger.error(f"Failed to create improvement commit: {e}")

    async def calculate_code_quality_metrics(self):
        """–û–±—á–∏—Å–ª—é—î –º–µ—Ç—Ä–∏–∫–∏ —è–∫–æ—Å—Ç—ñ –∫–æ–¥—É"""
        total_issues = len(self.analysis_results)
        error_issues = sum(1 for issue in self.analysis_results if issue.severity == "error")
        warning_issues = sum(1 for issue in self.analysis_results if issue.severity == "warning")

        # –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ –∑–∞–≥–∞–ª—å–Ω–∏–π score —è–∫–æ—Å—Ç—ñ
        files_analyzed = len(set(issue.file_path for issue in self.analysis_results))
        if files_analyzed > 0:
            quality_score = max(0, 100 - (error_issues * 10 + warning_issues * 5) / files_analyzed)
        else:
            quality_score = 100

        self.code_quality_metrics = {
            'timestamp': datetime.now().isoformat(),
            'total_issues': total_issues,
            'error_issues': error_issues,
            'warning_issues': warning_issues,
            'info_issues': total_issues - error_issues - warning_issues,
            'files_analyzed': files_analyzed,
            'quality_score': round(quality_score, 2),
            'improvements_made_total': len(self.improvements_made)
        }

        logger.info(f"üìä Code quality score: {quality_score:.1f}/100")

    async def generate_improvement_report(self) -> Dict[str, Any]:
        """–ì–µ–Ω–µ—Ä—É—î –∑–≤—ñ—Ç –ø—Ä–æ –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è"""
        report = {
            'timestamp': datetime.now().isoformat(),
            'code_quality_metrics': self.code_quality_metrics,
            'recent_improvements': self.improvements_made[-10:],  # –û—Å—Ç–∞–Ω–Ω—ñ 10 –ø–æ–∫—Ä–∞—â–µ–Ω—å
            'top_issues': sorted(
                self.analysis_results,
                key=lambda x: x.confidence,
                reverse=True
            )[:20],  # –¢–æ–ø 20 –ø—Ä–æ–±–ª–µ–º
            'improvement_suggestions': await self.generate_improvement_suggestions()
        }

        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∑–≤—ñ—Ç
        report_path = self.project_root / "reports" / f"code_improvement_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
        report_path.parent.mkdir(exist_ok=True)

        async with aiofiles.open(report_path, 'w', encoding='utf-8') as f:
            await f.write(json.dumps(report, indent=2, default=str))

        logger.info(f"üìã Generated improvement report: {report_path}")
        return report

    async def generate_improvement_suggestions(self) -> List[Dict[str, Any]]:
        """–ì–µ–Ω–µ—Ä—É—î –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó –¥–ª—è –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è"""
        suggestions = []

        # –ê–Ω–∞–ª—ñ–∑—É—î–º–æ –Ω–∞–π–±—ñ–ª—å—à –ø–æ—à–∏—Ä–µ–Ω—ñ –ø—Ä–æ–±–ª–µ–º–∏
        issue_types = {}
        for issue in self.analysis_results:
            issue_types[issue.issue_type] = issue_types.get(issue.issue_type, 0) + 1

        # –¢–æ–ø –ø—Ä–æ–±–ª–µ–º –∑ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—è–º–∏
        top_issues = sorted(issue_types.items(), key=lambda x: x[1], reverse=True)[:5]

        for issue_type, count in top_issues:
            suggestions.append({
                'issue_type': issue_type,
                'occurrences': count,
                'priority': 'high' if count > 10 else 'medium' if count > 5 else 'low',
                'suggestion': await self.get_improvement_suggestion(issue_type)
            })

        return suggestions

    async def get_improvement_suggestion(self, issue_type: str) -> str:
        """–ü–æ–≤–µ—Ä—Ç–∞—î –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—é –¥–ª—è —Ç–∏–ø—É –ø—Ä–æ–±–ª–µ–º–∏"""
        suggestions = {
            'missing_docstring': 'Add comprehensive docstrings to improve code documentation',
            'high_complexity': 'Refactor complex functions into smaller, more manageable pieces',
            'long_function': 'Break down long functions following Single Responsibility Principle',
            'trailing_whitespace': 'Set up automatic trailing whitespace removal in your editor',
            'console_log': 'Replace console.log with proper logging framework',
            'var_usage': 'Use let/const instead of var for better scoping',
            'long_line': 'Configure line length limits and use appropriate formatting'
        }

        return suggestions.get(issue_type, 'Review and address this code issue')

    async def get_status(self) -> Dict[str, Any]:
        """–ü–æ–≤–µ—Ä—Ç–∞—î –ø–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞—Ç—É—Å –∞–≥–µ–Ω—Ç–∞"""
        return {
            'timestamp': datetime.now().isoformat(),
            'code_quality_metrics': self.code_quality_metrics,
            'total_issues_found': len(self.analysis_results),
            'improvements_made': len(self.improvements_made),
            'last_analysis': self.code_quality_metrics.get('timestamp'),
            'status': 'active'
        }

# –ì–ª–æ–±–∞–ª—å–Ω–∏–π –µ–∫–∑–µ–º–ø–ª—è—Ä –∞–≥–µ–Ω—Ç–∞
auto_improve_agent = AutoImproveAgent()

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–∞–ø—É—Å–∫—É –∞–≥–µ–Ω—Ç–∞"""
    logger.info("üöÄ Starting Predator Analytics AutoImprove Agent...")

    try:
        await auto_improve_agent.initialize()
        await auto_improve_agent.start_continuous_improvement()
    except KeyboardInterrupt:
        logger.info("Received interrupt signal")
    except Exception as e:
        logger.error(f"Error in AutoImprove Agent: {e}")

if __name__ == "__main__":
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    )
    asyncio.run(main())
