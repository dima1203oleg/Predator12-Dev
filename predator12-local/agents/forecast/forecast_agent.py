#!/usr/bin/env python3
"""
üìà Forecast Agent - Advanced Time Series Forecasting
–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î ensemble –º–µ—Ç–æ–¥–∏ –∑ –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∏–º–∏ –º–æ–¥–µ–ª—è–º–∏
"""

import asyncio
import aiohttp
import json
import pandas as pd
import numpy as np
from datetime import datetime, timedelta
from typing import Dict, List, Any, Optional, Tuple
from dataclasses import dataclass
import structlog
import os

logger = structlog.get_logger(__name__)

@dataclass
class ForecastRequest:
    dataset_id: str
    target_column: str
    forecast_horizon: int
    confidence_intervals: List[float]
    algorithms: List[str]

@dataclass
class ForecastResult:
    forecast_values: List[float]
    confidence_lower: List[float]
    confidence_upper: List[float]
    accuracy_metrics: Dict[str, float]
    algorithm_used: str
    model_performance: Dict[str, Any]

class ForecastModelSelector:
    """–Ü–Ω—Ç–µ–ª–µ–∫—Ç—É–∞–ª—å–Ω–∏–π –≤–∏–±—ñ—Ä –º–æ–¥–µ–ª–µ–π –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑—É–≤–∞–Ω–Ω—è"""

    def __init__(self):
        # –°–ø–µ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω—ñ –º–æ–¥–µ–ª—ñ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑—É–≤–∞–Ω–Ω—è
        self.time_series_models = {
            "primary": "meta/meta-llama-3.1-70b-instruct",      # –î–æ–≤–≥–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è TS
            "secondary": "mistral/mixtral-8x22b-instruct",       # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∏–π –∞–Ω–∞–ª—ñ–∑
            "pattern_detection": "qwen/qwen2.5-32b-instruct"    # –í–∏—è–≤–ª–µ–Ω–Ω—è –ø–∞—Ç—Ç–µ—Ä–Ω—ñ–≤
        }

        self.seasonality_models = {
            "advanced": "microsoft/phi-3-medium-128k-instruct",  # –°–∫–ª–∞–¥–Ω–∞ —Å–µ–∑–æ–Ω–Ω—ñ—Å—Ç—å
            "basic": "qwen/qwen2.5-14b-instruct"                 # –ë–∞–∑–æ–≤–∞ —Å–µ–∑–æ–Ω–Ω—ñ—Å—Ç—å
        }

        self.scenario_models = {
            "what_if": "microsoft/phi-3-medium-4k-instruct",     # –°—Ü–µ–Ω–∞—Ä—ñ—ó "—â–æ —è–∫—â–æ"
            "sensitivity": "qwen/qwen2.5-14b-instruct",          # –ê–Ω–∞–ª—ñ–∑ —á—É—Ç–ª–∏–≤–æ—Å—Ç—ñ
            "monte_carlo": "meta/meta-llama-3.1-8b-instruct"     # –ú–æ–Ω—Ç–µ-–ö–∞—Ä–ª–æ
        }

    def select_for_time_series(self, data_points: int, complexity: float) -> str:
        """–í–∏–±—ñ—Ä –º–æ–¥–µ–ª—ñ –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É —á–∞—Å–æ–≤–∏—Ö —Ä—è–¥—ñ–≤"""
        if data_points > 10000 and complexity > 0.8:
            return self.time_series_models["primary"]
        elif complexity > 0.6:
            return self.time_series_models["secondary"]
        else:
            return self.time_series_models["pattern_detection"]

    def select_for_seasonality(self, seasonal_patterns: int) -> str:
        """–í–∏–±—ñ—Ä –º–æ–¥–µ–ª—ñ –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç—ñ"""
        if seasonal_patterns > 2:
            return self.seasonality_models["advanced"]
        else:
            return self.seasonality_models["basic"]

    def select_for_scenario(self, scenario_type: str) -> str:
        """–í–∏–±—ñ—Ä –º–æ–¥–µ–ª—ñ –¥–ª—è —Å—Ü–µ–Ω–∞—Ä–Ω–æ–≥–æ –º–æ–¥–µ–ª—é–≤–∞–Ω–Ω—è"""
        return self.scenario_models.get(scenario_type, self.scenario_models["what_if"])

class ForecastAgent:
    """AI-powered –∞–≥–µ–Ω—Ç –ø—Ä–æ–≥–Ω–æ–∑—É–≤–∞–Ω–Ω—è –∑ ensemble –º–µ—Ç–æ–¥–∞–º–∏"""

    def __init__(self):
        self.model_selector = ForecastModelSelector()
        self.sdk_base_url = os.getenv('MODEL_SDK_BASE_URL', 'http://modelsdk:3010/v1')
        self.algorithms = ["Prophet", "ARIMA", "LSTM", "Transformer", "N-BEATS"]
        self.session: Optional[aiohttp.ClientSession] = None

    async def get_session(self) -> aiohttp.ClientSession:
        """–û—Ç—Ä–∏–º–∞—Ç–∏ HTTP —Å–µ—Å—ñ—é"""
        if self.session is None or self.session.closed:
            self.session = aiohttp.ClientSession(timeout=aiohttp.ClientTimeout(total=60))
        return self.session

    async def query_model(self, model_name: str, messages: List[Dict[str, str]]) -> str:
        """–ó–∞–ø–∏—Ç –¥–æ –º–æ–¥–µ–ª—ñ —á–µ—Ä–µ–∑ SDK"""
        try:
            session = await self.get_session()
            payload = {
                "model": model_name,
                "messages": messages,
                "max_tokens": 4000,
                "temperature": 0.1  # –ù–∏–∑—å–∫–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –¥–ª—è —Ç–æ—á–Ω–æ—Å—Ç—ñ
            }

            async with session.post(f"{self.sdk_base_url}/chat/completions", json=payload) as resp:
                if resp.status == 200:
                    data = await resp.json()
                    return data['choices'][0]['message']['content']
                else:
                    logger.warning(f"Model query failed: {resp.status}")
                    return "Model unavailable"

        except Exception as e:
            logger.error(f"Error querying model {model_name}: {e}")
            return "Error in model query"

    async def detect_seasonality(self, data: List[float]) -> Dict[str, Any]:
        """AI-powered –¥–µ—Ç–µ–∫—Ü—ñ—è —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç—ñ"""
        try:
            # –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–∏—Ö –¥–ª—è AI –∞–Ω–∞–ª—ñ–∑—É
            data_stats = {
                'length': len(data),
                'mean': np.mean(data),
                'std': np.std(data),
                'min': np.min(data),
                'max': np.max(data)
            }

            # –°–ø—Ä–æ—â–µ–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ –∞–≤—Ç–æ–∫–æ—Ä–µ–ª—è—Ü—ñ—ó (mock)
            seasonal_patterns = 0
            if len(data) > 52:  # –†—ñ—á–Ω–∞ —Å–µ–∑–æ–Ω–Ω—ñ—Å—Ç—å
                seasonal_patterns += 1
            if len(data) > 12:  # –ú—ñ—Å—è—á–Ω–∞ —Å–µ–∑–æ–Ω–Ω—ñ—Å—Ç—å
                seasonal_patterns += 1
            if len(data) > 7:   # –¢–∏–∂–Ω–µ–≤–∞ —Å–µ–∑–æ–Ω–Ω—ñ—Å—Ç—å
                seasonal_patterns += 1

            model = self.model_selector.select_for_seasonality(seasonal_patterns)

            messages = [
                {"role": "system", "content": "You are a time series analysis expert. Detect seasonality patterns and trends."},
                {"role": "user", "content": f"Time series data statistics: {json.dumps(data_stats)}. Data length: {len(data)} points. Identify seasonal patterns and trends."}
            ]

            ai_analysis = await self.query_model(model, messages)

            return {
                'seasonal_patterns_detected': seasonal_patterns,
                'data_statistics': data_stats,
                'ai_analysis': ai_analysis,
                'recommended_algorithms': self._recommend_algorithms(seasonal_patterns, len(data))
            }

        except Exception as e:
            logger.error(f"Seasonality detection failed: {e}")
            return {'error': str(e)}

    def _recommend_algorithms(self, seasonal_patterns: int, data_length: int) -> List[str]:
        """–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—è –∞–ª–≥–æ—Ä–∏—Ç–º—ñ–≤ –Ω–∞ –æ—Å–Ω–æ–≤—ñ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –¥–∞–Ω–∏—Ö"""
        recommendations = []

        if seasonal_patterns > 0:
            recommendations.append("Prophet")
        if data_length > 100:
            recommendations.append("LSTM")
        if seasonal_patterns <= 1:
            recommendations.append("ARIMA")
        if data_length > 1000:
            recommendations.append("Transformer")

        return recommendations[:3]  # –ú–∞–∫—Å–∏–º—É–º 3 –∞–ª–≥–æ—Ä–∏—Ç–º–∏ –¥–ª—è ensemble

    async def generate_forecast(self, request: ForecastRequest) -> ForecastResult:
        """–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –ø—Ä–æ–≥–Ω–æ–∑—É –∑ ensemble –º–µ—Ç–æ–¥–∞–º–∏"""
        try:
            logger.info(f"Generating forecast for dataset {request.dataset_id}")

            # Mock –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö
            mock_data = np.random.normal(100, 15, 365).tolist()  # –†—ñ—á–Ω—ñ –¥–∞–Ω—ñ

            # AI –∞–Ω–∞–ª—ñ–∑ –¥–∞–Ω–∏—Ö —Ç–∞ –≤–∏–±—ñ—Ä —Å—Ç—Ä–∞—Ç–µ–≥—ñ—ó
            seasonality_info = await self.detect_seasonality(mock_data)
            complexity = min(0.9, len(mock_data) / 1000)

            model = self.model_selector.select_for_time_series(len(mock_data), complexity)

            # –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É –¥–ª—è AI
            context = {
                'target_column': request.target_column,
                'data_length': len(mock_data),
                'forecast_horizon': request.forecast_horizon,
                'seasonality': seasonality_info,
                'algorithms_available': request.algorithms or self.algorithms
            }

            messages = [
                {"role": "system", "content": "You are a forecasting expert. Analyze time series and recommend the best forecasting approach."},
                {"role": "user", "content": f"Time series forecasting task: {json.dumps(context, indent=2)}. Recommend the best algorithm and parameters."}
            ]

            ai_recommendation = await self.query_model(model, messages)

            # Mock –≥–µ–Ω–µ—Ä–∞—Ü—ñ—è –ø—Ä–æ–≥–Ω–æ–∑—É (–≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç—ñ —Ç—É—Ç –±—É–≤ –±–∏ ML –∞–ª–≥–æ—Ä–∏—Ç–º)
            forecast_values = []
            confidence_lower = []
            confidence_upper = []

            last_value = mock_data[-1]
            for i in range(request.forecast_horizon):
                # –ü—Ä–æ—Å—Ç–∏–π –ª—ñ–Ω—ñ–π–Ω–∏–π —Ç—Ä–µ–Ω–¥ –∑ —à—É–º–æ–º
                trend_component = 0.1 * i
                seasonal_component = 5 * np.sin(2 * np.pi * i / 30)  # –ú—ñ—Å—è—á–Ω–∞ —Å–µ–∑–æ–Ω–Ω—ñ—Å—Ç—å
                noise = np.random.normal(0, 2)

                forecast = last_value + trend_component + seasonal_component + noise

                forecast_values.append(forecast)
                confidence_lower.append(forecast - 5)
                confidence_upper.append(forecast + 5)

            # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –º–µ—Ç—Ä–∏–∫ —Ç–æ—á–Ω–æ—Å—Ç—ñ (mock)
            accuracy_metrics = {
                'mape': np.random.uniform(5, 15),      # Mean Absolute Percentage Error
                'rmse': np.random.uniform(2, 8),       # Root Mean Square Error
                'mae': np.random.uniform(1, 5),        # Mean Absolute Error
                'r2_score': np.random.uniform(0.7, 0.95)  # R-squared
            }

            result = ForecastResult(
                forecast_values=forecast_values,
                confidence_lower=confidence_lower,
                confidence_upper=confidence_upper,
                accuracy_metrics=accuracy_metrics,
                algorithm_used="Ensemble (Prophet + LSTM)",
                model_performance={
                    'ai_model_used': model,
                    'ai_recommendation': ai_recommendation,
                    'seasonality_detected': seasonality_info,
                    'training_time_seconds': np.random.uniform(10, 30)
                }
            )

            logger.info(f"Forecast generated successfully for dataset {request.dataset_id}")
            return result

        except Exception as e:
            logger.error(f"Forecast generation failed: {e}")
            raise

    async def what_if_analysis(self, base_forecast: ForecastResult, scenarios: List[Dict[str, Any]]) -> Dict[str, Any]:
        """–°—Ü–µ–Ω–∞—Ä–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ "—â–æ —è–∫—â–æ" """
        try:
            logger.info(f"Running what-if analysis with {len(scenarios)} scenarios")

            model = self.model_selector.select_for_scenario("what_if")

            scenario_results = {}

            for i, scenario in enumerate(scenarios):
                scenario_name = scenario.get('name', f'scenario_{i+1}')

                messages = [
                    {"role": "system", "content": "You are a scenario modeling expert. Analyze how external factors affect forecasts."},
                    {"role": "user", "content": f"Base forecast: {base_forecast.forecast_values[:5]}... Scenario parameters: {scenario}. How would this scenario change the forecast?"}
                ]

                ai_analysis = await self.query_model(model, messages)

                # Mock –º–æ–¥–∏—Ñ—ñ–∫–∞—Ü—ñ—è –ø—Ä–æ–≥–Ω–æ–∑—É –Ω–∞ –æ—Å–Ω–æ–≤—ñ —Å—Ü–µ–Ω–∞—Ä—ñ—é
                impact_factor = scenario.get('impact_factor', 1.0)
                modified_forecast = [v * impact_factor for v in base_forecast.forecast_values]

                scenario_results[scenario_name] = {
                    'modified_forecast': modified_forecast,
                    'impact_factor': impact_factor,
                    'ai_analysis': ai_analysis,
                    'confidence_change': scenario.get('confidence_impact', 0.0)
                }

            return {
                'base_forecast': base_forecast.forecast_values,
                'scenarios': scenario_results,
                'analysis_model': model,
                'timestamp': datetime.utcnow().isoformat()
            }

        except Exception as e:
            logger.error(f"What-if analysis failed: {e}")
            return {'error': str(e)}

    async def close(self):
        """–ó–∞–∫—Ä–∏—Ç–∏ HTTP —Å–µ—Å—ñ—é"""
        if self.session and not self.session.closed:
            await self.session.close()

async def main():
    """–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è ForecastAgent"""
    print("üìà FORECAST AGENT DEMO")
    print("=" * 50)

    agent = ForecastAgent()

    try:
        # –¢–µ—Å—Ç–æ–≤–∏–π –∑–∞–ø–∏—Ç –Ω–∞ –ø—Ä–æ–≥–Ω–æ–∑—É–≤–∞–Ω–Ω—è
        request = ForecastRequest(
            dataset_id="sales_data_2024",
            target_column="revenue",
            forecast_horizon=30,
            confidence_intervals=[0.8, 0.95],
            algorithms=["Prophet", "LSTM"]
        )

        print("üîÆ Generating forecast...")
        forecast = await agent.generate_forecast(request)

        print(f"‚úÖ Forecast generated using: {forecast.algorithm_used}")
        print(f"üìä Accuracy metrics: MAPE={forecast.accuracy_metrics['mape']:.1f}%, R¬≤={forecast.accuracy_metrics['r2_score']:.3f}")
        print(f"üéØ First 5 forecast values: {forecast.forecast_values[:5]}")

        # –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è what-if —Å—Ü–µ–Ω–∞—Ä—ñ—ó–≤
        scenarios = [
            {'name': 'economic_growth', 'impact_factor': 1.2, 'description': 'Economic growth scenario'},
            {'name': 'market_decline', 'impact_factor': 0.8, 'description': 'Market decline scenario'}
        ]

        print("\nüé≠ Running what-if analysis...")
        what_if_results = await agent.what_if_analysis(forecast, scenarios)

        print(f"üìà Scenarios analyzed: {len(what_if_results.get('scenarios', {}))}")
        for scenario_name in what_if_results.get('scenarios', {}):
            print(f"  - {scenario_name}")

        print("‚úÖ Forecast Agent –ø—Ä–∞—Ü—é—î –∫–æ—Ä–µ–∫—Ç–Ω–æ!")

    finally:
        await agent.close()

if __name__ == "__main__":
    asyncio.run(main())
