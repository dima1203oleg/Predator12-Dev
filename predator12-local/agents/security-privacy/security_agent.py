#!/usr/bin/env python3
"""
SecurityAgent - –ê–≥–µ–Ω—Ç –±–µ–∑–ø–µ–∫–∏ —Ç–∞ –∞—É–¥–∏—Ç—É
–ö–æ–Ω—Ç—Ä–æ–ª—é—î –¥–æ—Å—Ç—É–ø –¥–æ PII –¥–∞–Ω–∏—Ö, –º–æ–Ω—ñ—Ç–æ—Ä–∏—Ç—å –ø—ñ–¥–æ–∑—Ä—ñ–ª—É –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å —Ç–∞ –∑–∞–±–µ–∑–ø–µ—á—É—î –±–µ–∑–ø–µ–∫—É
"""

import asyncio
import logging
import re
import hashlib
import json
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Any, Set
from dataclasses import dataclass
from enum import Enum

# Conditional imports –∑ proper error handling
try:
    import aiohttp
except ImportError:
    aiohttp = None

try:
    import aiofiles
except ImportError:
    aiofiles = None

try:
    import jwt
except ImportError:
    jwt = None

try:
    import asyncpg
except ImportError:
    asyncpg = None

logger = logging.getLogger(__name__)

class SecurityLevel(Enum):
    PUBLIC = "public"
    INTERNAL = "internal"
    CONFIDENTIAL = "confidential"
    RESTRICTED = "restricted"
    TOP_SECRET = "top_secret"

class PIIType(Enum):
    EMAIL = "email"
    PHONE = "phone"
    NAME = "name"
    ID_NUMBER = "id_number"
    CREDIT_CARD = "credit_card"
    ADDRESS = "address"
    PASSPORT = "passport"
    TAX_ID = "tax_id"
    BANK_ACCOUNT = "bank_account"

@dataclass
class SecurityIncident:
    id: str
    timestamp: datetime
    incident_type: str
    severity: str
    source_ip: str
    user_id: Optional[str]
    description: str
    evidence: Dict[str, Any]
    status: str = "open"

@dataclass
class PIIDetection:
    field_name: str
    pii_type: PIIType
    original_value: str
    masked_value: str
    confidence: float
    location: str

class SecurityAgent:
    """
    –ê–≥–µ–Ω—Ç –±–µ–∑–ø–µ–∫–∏ —Ç–∞ –∞—É–¥–∏—Ç—É –∑–≥—ñ–¥–Ω–æ –∑ —Ç–µ—Ö–Ω—ñ—á–Ω–∏–º –∑–∞–≤–¥–∞–Ω–Ω—è–º
    """

    def __init__(self):
        self.pii_patterns = self._load_pii_patterns()
        self.security_incidents: List[SecurityIncident] = []
        self.pii_audit_log: List[Dict[str, Any]] = []
        self.blocked_ips: Set[str] = set()
        self.failed_login_attempts: Dict[str, int] = {}

        # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
        self.max_failed_logins = 5
        self.pii_salt = "predator-pii-salt-2024"  # –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω—ñ –∑ .env
        self.keycloak_url = "http://keycloak:8080"
        self.postgres_url = "postgresql://postgres:postgres@db:5432/predator11"

        # –ö–µ—à —Ä–æ–ª–µ–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –¥–ª—è —à–≤–∏–¥–∫–æ–≥–æ –¥–æ—Å—Ç—É–ø—É
        self.user_roles_cache: Dict[str, List[str]] = {}

    def _load_pii_patterns(self) -> Dict[PIIType, List[str]]:
        """–ó–∞–≤–∞–Ω—Ç–∞–∂—É—î –ø–∞—Ç—Ç–µ—Ä–Ω–∏ –¥–ª—è –≤–∏—è–≤–ª–µ–Ω–Ω—è PII"""
        return {
            PIIType.EMAIL: [
                r'\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,}\b'
            ],
            PIIType.PHONE: [
                r'\+?3?8?0\d{2}[\s\-]?\d{3}[\s\-]?\d{2}[\s\-]?\d{2}',  # Ukrainian
                r'\+?1?\d{3}[\s\-]?\d{3}[\s\-]?\d{4}',  # US
                r'\b\d{3}[\s\-]?\d{3}[\s\-]?\d{4}\b'
            ],
            PIIType.NAME: [
                r'\b[–ê-–Ø–á–Ü–Ñ“ê][–∞-—è—ó—ñ—î“ë]+\s+[–ê-–Ø–á–Ü–Ñ“ê][–∞-—è—ó—ñ—î“ë]+\b',  # Ukrainian names
                r'\b[A-Z][a-z]+\s+[A-Z][a-z]+\b'  # English names
            ],
            PIIType.ID_NUMBER: [
                r'\b\d{10}\b',  # Ukrainian tax number
                r'\b\d{9}\b',   # US SSN format
                r'\b\d{2}\s?\d{2}\s?\d{6}\b'  # Ukrainian passport
            ],
            PIIType.CREDIT_CARD: [
                r'\b4\d{3}[\s\-]?\d{4}[\s\-]?\d{4}[\s\-]?\d{4}\b',  # Visa
                r'\b5\d{3}[\s\-]?\d{4}[\s\-]?\d{4}[\s\-]?\d{4}\b',  # MasterCard
            ],
            PIIType.ADDRESS: [
                r'\b\d+\s+[–ê-–Ø–∞-—è—ó—ñ—î“ëA-Za-z\s,\.]+\s+\d{5}\b'
            ],
            PIIType.BANK_ACCOUNT: [
                r'\bUA\d{2}\s?\d{4}\s?\d{4}\s?\d{4}\s?\d{4}\s?\d{4}\s?\d{4}\b',  # Ukrainian IBAN
                r'\b\d{16,20}\b'  # Generic bank account
            ]
        }

    async def initialize(self):
        """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î SecurityAgent"""
        logger.info("üîí Initializing Security Agent...")

        # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —ñ—Å–Ω—É—é—á—ñ —ñ–Ω—Ü–∏–¥–µ–Ω—Ç–∏ –∑ –ë–î
        await self.load_security_incidents()

        # –ó–∞–ø—É—Å–∫–∞—î–º–æ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –±–µ–∑–ø–µ–∫–∏
        asyncio.create_task(self.start_security_monitoring())

        logger.info("‚úÖ Security Agent initialized successfully")

    async def load_security_incidents(self):
        """–ó–∞–≤–∞–Ω—Ç–∞–∂—É—î —ñ–Ω—Ü–∏–¥–µ–Ω—Ç–∏ –±–µ–∑–ø–µ–∫–∏ –∑ –ë–î"""
        try:
            import asyncpg

            conn = await asyncpg.connect(self.postgres_url)

            # –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–∞–±–ª–∏—Ü—é —è–∫—â–æ –Ω–µ —ñ—Å–Ω—É—î
            await conn.execute("""
                CREATE TABLE IF NOT EXISTS security_incidents (
                    id VARCHAR PRIMARY KEY,
                    timestamp TIMESTAMP,
                    incident_type VARCHAR,
                    severity VARCHAR,
                    source_ip VARCHAR,
                    user_id VARCHAR,
                    description TEXT,
                    evidence JSONB,
                    status VARCHAR DEFAULT 'open'
                )
            """)

            # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ —ñ–Ω—Ü–∏–¥–µ–Ω—Ç–∏
            incidents = await conn.fetch("""
                SELECT * FROM security_incidents 
                WHERE timestamp > NOW() - INTERVAL '7 days'
                ORDER BY timestamp DESC
                LIMIT 1000
            """)

            for incident in incidents:
                self.security_incidents.append(SecurityIncident(
                    id=incident['id'],
                    timestamp=incident['timestamp'],
                    incident_type=incident['incident_type'],
                    severity=incident['severity'],
                    source_ip=incident['source_ip'],
                    user_id=incident['user_id'],
                    description=incident['description'],
                    evidence=incident['evidence'],
                    status=incident['status']
                ))

            await conn.close()

            logger.info(f"üìä Loaded {len(self.security_incidents)} recent security incidents")

        except Exception as e:
            logger.error(f"Failed to load security incidents: {e}")

    async def start_security_monitoring(self):
        """–ó–∞–ø—É—Å–∫–∞—î –ø–æ—Å—Ç—ñ–π–Ω–∏–π –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –±–µ–∑–ø–µ–∫–∏"""
        logger.info("üëÅÔ∏è Starting continuous security monitoring...")

        while True:
            try:
                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø—ñ–¥–æ–∑—Ä—ñ–ª—É –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å
                await self.check_suspicious_activity()

                # –ê–Ω–∞–ª—ñ–∑—É—î–º–æ –ª–æ–≥–∏ –¥–æ—Å—Ç—É–ø—É
                await self.analyze_access_logs()

                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ blocked IPs
                await self.cleanup_blocked_ips()

                # –û–Ω–æ–≤–ª—é—î–º–æ –∫–µ—à —Ä–æ–ª–µ–π
                await self.update_user_roles_cache()

                await asyncio.sleep(60)  # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ–∂–Ω—É —Ö–≤–∏–ª–∏–Ω—É

            except Exception as e:
                logger.error(f"Error in security monitoring: {e}")
                await asyncio.sleep(30)

    async def validate_access_request(self, user_token: str, resource: str, action: str) -> Dict[str, Any]:
        """–í–∞–ª—ñ–¥—É—î –∑–∞–ø–∏—Ç –Ω–∞ –¥–æ—Å—Ç—É–ø –¥–æ —Ä–µ—Å—É—Ä—Å—É"""
        try:
            # –î–µ–∫–æ–¥—É—î–º–æ JWT —Ç–æ–∫–µ–Ω
            user_info = await self.decode_user_token(user_token)
            if not user_info:
                return {"allowed": False, "reason": "Invalid token"}

            user_id = user_info.get('sub')
            user_roles = user_info.get('realm_access', {}).get('roles', [])

            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏–π
            if await self.is_user_blocked(user_id):
                await self.log_security_incident(
                    "blocked_user_access_attempt",
                    "warning",
                    user_info.get('ip', 'unknown'),
                    user_id,
                    f"Blocked user {user_id} attempted to access {resource}"
                )
                return {"allowed": False, "reason": "User is blocked"}

            # –í–∏–∑–Ω–∞—á–∞—î–º–æ —Ä—ñ–≤–µ–Ω—å –±–µ–∑–ø–µ–∫–∏ —Ä–µ—Å—É—Ä—Å—É
            resource_security_level = await self.get_resource_security_level(resource)

            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø—É
            access_allowed = await self.check_rbac_permissions(user_roles, resource, action)

            if access_allowed:
                # –õ–æ–≥—É—î–º–æ —É—Å–ø—ñ—à–Ω–∏–π –¥–æ—Å—Ç—É–ø
                await self.log_access_attempt(user_id, resource, action, True)
                return {
                    "allowed": True,
                    "user_id": user_id,
                    "roles": user_roles,
                    "security_level": resource_security_level
                }
            else:
                # –õ–æ–≥—É—î–º–æ –Ω–µ–≤–¥–∞–ª–∏–π –¥–æ—Å—Ç—É–ø
                await self.log_access_attempt(user_id, resource, action, False)
                await self.log_security_incident(
                    "unauthorized_access_attempt",
                    "warning",
                    user_info.get('ip', 'unknown'),
                    user_id,
                    f"User {user_id} attempted unauthorized access to {resource}"
                )
                return {"allowed": False, "reason": "Insufficient permissions"}

        except Exception as e:
            logger.error(f"Error validating access request: {e}")
            return {"allowed": False, "reason": "Validation error"}

    async def decode_user_token(self, token: str) -> Optional[Dict[str, Any]]:
        """–î–µ–∫–æ–¥—É—î JWT —Ç–æ–∫–µ–Ω –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
        try:
            # –û—Ç—Ä–∏–º—É—î–º–æ –ø—É–±–ª—ñ—á–Ω–∏–π –∫–ª—é—á –≤—ñ–¥ Keycloak
            async with aiohttp.ClientSession() as session:
                async with session.get(f"{self.keycloak_url}/realms/predator11/protocol/openid-connect/certs") as response:
                    if response.status == 200:
                        keys_data = await response.json()
                        # –î–ª—è —Å–ø—Ä–æ—â–µ–Ω–Ω—è –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ø–µ—Ä—à–∏–π –∫–ª—é—á
                        # –£ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—ñ –ø–æ—Ç—Ä—ñ–±–Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–∞ –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—è –∑–∞ kid

                        # –î–µ–∫–æ–¥—É—î–º–æ —Ç–æ–∫–µ–Ω –±–µ–∑ –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—ó
                        # –£ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—ñ –û–ë–û–í'–Ø–ó–ö–û–í–û –≤–µ—Ä–∏—Ñ—ñ–∫—É–≤–∞—Ç–∏ –ø—ñ–¥–ø–∏—Å!
                        decoded = jwt.decode(token, options={"verify_signature": False})
                        return decoded

            return None

        except Exception as e:
            logger.error(f"Failed to decode token: {e}")
            return None

    async def is_user_blocked(self, user_id: str) -> bool:
        """–ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á"""
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≤ –∫–µ—à—ñ —Ç–∞ –ë–î
        try:
            import asyncpg

            conn = await asyncpg.connect(self.postgres_url)

            result = await conn.fetchval("""
                SELECT blocked FROM user_security_status 
                WHERE user_id = $1 AND blocked = true
            """, user_id)

            await conn.close()
            return result is not None

        except Exception:
            return False

    async def get_resource_security_level(self, resource: str) -> SecurityLevel:
        """–í–∏–∑–Ω–∞—á–∞—î —Ä—ñ–≤–µ–Ω—å –±–µ–∑–ø–µ–∫–∏ —Ä–µ—Å—É—Ä—Å—É"""
        # –ü—Ä–∞–≤–∏–ª–∞ –¥–ª—è –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è —Ä—ñ–≤–Ω—è –±–µ–∑–ø–µ–∫–∏
        if 'pii' in resource.lower() or 'personal' in resource.lower():
            return SecurityLevel.RESTRICTED
        elif 'financial' in resource.lower() or 'payment' in resource.lower():
            return SecurityLevel.CONFIDENTIAL
        elif 'admin' in resource.lower() or 'system' in resource.lower():
            return SecurityLevel.RESTRICTED
        elif 'internal' in resource.lower():
            return SecurityLevel.INTERNAL
        else:
            return SecurityLevel.PUBLIC

    async def check_rbac_permissions(self, user_roles: List[str], resource: str, action: str) -> bool:
        """–ü–µ—Ä–µ–≤—ñ—Ä—è—î RBAC –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø—É"""
        # –ú–∞—Ç—Ä–∏—Ü—è –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø—É –∑–≥—ñ–¥–Ω–æ –∑ –¢–ó
        permissions_matrix = {
            'admin': ['*'],  # –ü–æ–≤–Ω—ñ –ø—Ä–∞–≤–∞
            'security_officer': ['audit/*', 'pii/view', 'logs/*'],
            'data_analyst': ['data/read', 'analysis/*', 'dashboards/*'],
            'viewer': ['dashboards/view', 'reports/view']
        }

        # –°–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ –ø—Ä–∞–≤–∞ –¥–ª—è PII –¥–∞–Ω–∏—Ö
        pii_permissions = {
            'admin': True,
            'security_officer': True,
            'pii_viewer': True  # –°–ø–µ—Ü—ñ–∞–ª—å–Ω–∞ —Ä–æ–ª—å –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É PII
        }

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –¥–æ—Å—Ç—É–ø –¥–æ PII
        if 'pii' in resource.lower() and action == 'read':
            return any(role in pii_permissions for role in user_roles)

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∑–∞–≥–∞–ª—å–Ω—ñ –ø—Ä–∞–≤–∞
        for role in user_roles:
            allowed_resources = permissions_matrix.get(role, [])

            if '*' in allowed_resources:
                return True

            for allowed_resource in allowed_resources:
                if allowed_resource.endswith('*'):
                    # Wildcard match
                    prefix = allowed_resource[:-1]
                    if resource.startswith(prefix):
                        return True
                elif resource == allowed_resource:
                    return True

        return False

    async def detect_and_mask_pii(self, data: Dict[str, Any], user_has_pii_access: bool = False) -> Dict[str, Any]:
        """–í–∏—è–≤–ª—è—î —Ç–∞ –º–∞—Å–∫—É—î PII –¥–∞–Ω—ñ"""
        masked_data = data.copy()
        detections = []

        for field_name, field_value in data.items():
            if not isinstance(field_value, str):
                continue

            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–æ–∂–µ–Ω —Ç–∏–ø PII
            for pii_type, patterns in self.pii_patterns.items():
                for pattern in patterns:
                    matches = re.finditer(pattern, field_value, re.IGNORECASE)

                    for match in matches:
                        original_value = match.group(0)

                        if user_has_pii_access:
                            # –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –º–∞—î –¥–æ—Å—Ç—É–ø –¥–æ PII - –Ω–µ –º–∞—Å–∫—É—î–º–æ
                            masked_value = original_value
                        else:
                            # –ú–∞—Å–∫—É—î–º–æ –¥–∞–Ω—ñ
                            masked_value = await self.mask_pii_value(original_value, pii_type)

                            # –ó–∞–º—ñ–Ω—é—î–º–æ –≤ –¥–∞–Ω–∏—Ö
                            masked_data[field_name] = field_value.replace(original_value, masked_value)

                        detection = PIIDetection(
                            field_name=field_name,
                            pii_type=pii_type,
                            original_value=original_value,
                            masked_value=masked_value,
                            confidence=0.9,  # –í–∏—Å–æ–∫–∏–π —Ä—ñ–≤–µ–Ω—å –¥–æ–≤—ñ—Ä–∏ –¥–ª—è regex
                            location=f"field:{field_name}"
                        )
                        detections.append(detection)

                        # –õ–æ–≥—É—î–º–æ –≤–∏—è–≤–ª–µ–Ω–Ω—è PII
                        await self.log_pii_detection(detection, user_has_pii_access)

        return {
            'data': masked_data,
            'pii_detections': [
                {
                    'field': d.field_name,
                    'type': d.pii_type.value,
                    'masked': d.masked_value,
                    'confidence': d.confidence
                } for d in detections
            ],
            'has_pii': len(detections) > 0
        }

    async def mask_pii_value(self, value: str, pii_type: PIIType) -> str:
        """–ú–∞—Å–∫—É—î PII –∑–Ω–∞—á–µ–Ω–Ω—è"""
        if pii_type == PIIType.EMAIL:
            # email@domain.com -> e***@d***.com
            parts = value.split('@')
            if len(parts) == 2:
                username = parts[0][0] + '*' * (len(parts[0]) - 1) if len(parts[0]) > 1 else '*'
                domain_parts = parts[1].split('.')
                domain = domain_parts[0][0] + '*' * (len(domain_parts[0]) - 1) if len(domain_parts[0]) > 1 else '*'
                return f"{username}@{domain}.{domain_parts[-1]}"

        elif pii_type == PIIType.PHONE:
            # +380501234567 -> +38050***4567
            if len(value) > 6:
                return value[:6] + '*' * (len(value) - 9) + value[-3:] if len(value) > 9 else value[:3] + '*' * (len(value) - 3)

        elif pii_type == PIIType.NAME:
            # –Ü–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤ -> –Ü*** –ü***
            parts = value.split()
            return ' '.join([part[0] + '*' * (len(part) - 1) if len(part) > 1 else '*' for part in parts])

        elif pii_type == PIIType.ID_NUMBER:
            # 1234567890 -> 123***7890
            if len(value) > 6:
                return value[:3] + '*' * (len(value) - 6) + value[-3:]

        elif pii_type == PIIType.CREDIT_CARD:
            # 4111111111111111 -> 4111 **** **** 1111
            if len(value) >= 12:
                return value[:4] + ' **** **** ' + value[-4:]

        # –ó–∞–≥–∞–ª—å–Ω–µ –º–∞—Å–∫—É–≤–∞–Ω–Ω—è –¥–ª—è —ñ–Ω—à–∏—Ö —Ç–∏–ø—ñ–≤
        if len(value) <= 2:
            return '*' * len(value)
        elif len(value) <= 4:
            return value[0] + '*' * (len(value) - 1)
        else:
            return value[:2] + '*' * (len(value) - 4) + value[-2:]

    async def log_pii_detection(self, detection: PIIDetection, user_has_access: bool):
        """–õ–æ–≥—É—î –≤–∏—è–≤–ª–µ–Ω–Ω—è PII"""
        log_entry = {
            'timestamp': datetime.now().isoformat(),
            'field_name': detection.field_name,
            'pii_type': detection.pii_type.value,
            'confidence': detection.confidence,
            'location': detection.location,
            'user_has_access': user_has_access,
            'masked': not user_has_access
        }

        self.pii_audit_log.append(log_entry)

        # –û–±–º–µ–∂—É—î–º–æ —Ä–æ–∑–º—ñ—Ä –ª–æ–≥-—Ñ–∞–π–ª—É –≤ –ø–∞–º'—è—Ç—ñ
        if len(self.pii_audit_log) > 10000:
            self.pii_audit_log = self.pii_audit_log[-5000:]

        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ –ë–î –¥–ª—è –ø–æ—Å—Ç—ñ–π–Ω–æ–≥–æ –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è
        await self.save_pii_audit_log(log_entry)

    async def save_pii_audit_log(self, log_entry: Dict[str, Any]):
        """–ó–±–µ—Ä—ñ–≥–∞—î –ª–æ–≥ PII –≤ –ë–î"""
        try:
            import asyncpg

            conn = await asyncpg.connect(self.postgres_url)

            # –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–∞–±–ª–∏—Ü—é —è–∫—â–æ –Ω–µ —ñ—Å–Ω—É—î
            await conn.execute("""
                CREATE TABLE IF NOT EXISTS pii_audit_log (
                    id SERIAL PRIMARY KEY,
                    timestamp TIMESTAMP,
                    field_name VARCHAR,
                    pii_type VARCHAR,
                    confidence FLOAT,
                    location VARCHAR,
                    user_has_access BOOLEAN,
                    masked BOOLEAN
                )
            """)

            # –í—Å—Ç–∞–≤–ª—è—î–º–æ –∑–∞–ø–∏—Å
            await conn.execute("""
                INSERT INTO pii_audit_log 
                (timestamp, field_name, pii_type, confidence, location, user_has_access, masked)
                VALUES ($1, $2, $3, $4, $5, $6, $7)
            """,
                datetime.fromisoformat(log_entry['timestamp'].replace('Z', '+00:00')),
                log_entry['field_name'],
                log_entry['pii_type'],
                log_entry['confidence'],
                log_entry['location'],
                log_entry['user_has_access'],
                log_entry['masked']
            )

            await conn.close()

        except Exception as e:
            logger.error(f"Failed to save PII audit log: {e}")

    async def log_access_attempt(self, user_id: str, resource: str, action: str, success: bool):
        """–õ–æ–≥—É—î —Å–ø—Ä–æ–±–∏ –¥–æ—Å—Ç—É–ø—É"""
        access_log = {
            'timestamp': datetime.now().isoformat(),
            'user_id': user_id,
            'resource': resource,
            'action': action,
            'success': success,
            'ip_address': 'unknown'  # –í —Ä–µ–∞–ª—å–Ω—ñ–π —Å–∏—Å—Ç–µ–º—ñ –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏ –∑ request
        }

        # –Ø–∫—â–æ –Ω–µ–≤–¥–∞—á–∞ - –≤—ñ–¥—Å–ª—ñ–¥–∫–æ–≤—É—î–º–æ –¥–ª—è –±–ª–æ–∫—É–≤–∞–Ω–Ω—è
        if not success:
            self.failed_login_attempts[user_id] = self.failed_login_attempts.get(user_id, 0) + 1

            if self.failed_login_attempts[user_id] >= self.max_failed_logins:
                await self.block_user(user_id, f"Too many failed access attempts: {self.failed_login_attempts[user_id]}")
        else:
            # –°–∫–∏–¥–∞—î–º–æ –ª—ñ—á–∏–ª—å–Ω–∏–∫ –ø—Ä–∏ —É—Å–ø—ñ—à–Ω–æ–º—É –¥–æ—Å—Ç—É–ø—ñ
            self.failed_login_attempts.pop(user_id, None)

    async def log_security_incident(self, incident_type: str, severity: str, source_ip: str,
                                  user_id: Optional[str], description: str, evidence: Dict[str, Any] = None):
        """–õ–æ–≥—É—î —ñ–Ω—Ü–∏–¥–µ–Ω—Ç –±–µ–∑–ø–µ–∫–∏"""
        incident_id = hashlib.md5(f"{datetime.now().isoformat()}-{incident_type}-{source_ip}".encode()).hexdigest()[:16]

        incident = SecurityIncident(
            id=incident_id,
            timestamp=datetime.now(),
            incident_type=incident_type,
            severity=severity,
            source_ip=source_ip,
            user_id=user_id,
            description=description,
            evidence=evidence or {}
        )

        self.security_incidents.append(incident)

        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ –ë–î
        await self.save_security_incident(incident)

        # –ù–∞–¥—Å–∏–ª–∞—î–º–æ –∞–ª–µ—Ä—Ç –ø—Ä–∏ –∫—Ä–∏—Ç–∏—á–Ω–∏—Ö —ñ–Ω—Ü–∏–¥–µ–Ω—Ç–∞—Ö
        if severity in ['critical', 'high']:
            await self.send_security_alert(incident)

        logger.warning(f"üö® Security incident: {incident_type} - {description}")

    async def save_security_incident(self, incident: SecurityIncident):
        """–ó–±–µ—Ä—ñ–≥–∞—î —ñ–Ω—Ü–∏–¥–µ–Ω—Ç –±–µ–∑–ø–µ–∫–∏ –≤ –ë–î"""
        try:
            import asyncpg

            conn = await asyncpg.connect(self.postgres_url)

            await conn.execute("""
                INSERT INTO security_incidents 
                (id, timestamp, incident_type, severity, source_ip, user_id, description, evidence, status)
                VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9)
                ON CONFLICT (id) DO NOTHING
            """,
                incident.id,
                incident.timestamp,
                incident.incident_type,
                incident.severity,
                incident.source_ip,
                incident.user_id,
                incident.description,
                json.dumps(incident.evidence),
                incident.status
            )

            await conn.close()

        except Exception as e:
            logger.error(f"Failed to save security incident: {e}")

    async def send_security_alert(self, incident: SecurityIncident):
        """–ù–∞–¥—Å–∏–ª–∞—î –∞–ª–µ—Ä—Ç –ø—Ä–æ —ñ–Ω—Ü–∏–¥–µ–Ω—Ç –±–µ–∑–ø–µ–∫–∏"""
        try:
            # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –≤ Alertmanager
            alert_data = [{
                'labels': {
                    'alertname': 'SecurityIncident',
                    'severity': incident.severity,
                    'incident_type': incident.incident_type,
                    'source_ip': incident.source_ip
                },
                'annotations': {
                    'description': incident.description,
                    'incident_id': incident.id
                },
                'startsAt': incident.timestamp.isoformat() + 'Z'
            }]

            async with aiohttp.ClientSession() as session:
                await session.post('http://alertmanager:9093/api/v1/alerts', json=alert_data)

            logger.info(f"üö® Security alert sent for incident {incident.id}")

        except Exception as e:
            logger.error(f"Failed to send security alert: {e}")

    async def block_user(self, user_id: str, reason: str):
        """–ë–ª–æ–∫—É—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
        try:
            import asyncpg

            conn = await asyncpg.connect(self.postgres_url)

            # –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–∞–±–ª–∏—Ü—é —è–∫—â–æ –Ω–µ —ñ—Å–Ω—É—î
            await conn.execute("""
                CREATE TABLE IF NOT EXISTS user_security_status (
                    user_id VARCHAR PRIMARY KEY,
                    blocked BOOLEAN DEFAULT false,
                    blocked_at TIMESTAMP,
                    blocked_reason TEXT,
                    blocked_until TIMESTAMP
                )
            """)

            # –ë–ª–æ–∫—É—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            await conn.execute("""
                INSERT INTO user_security_status (user_id, blocked, blocked_at, blocked_reason)
                VALUES ($1, true, $2, $3)
                ON CONFLICT (user_id) 
                DO UPDATE SET blocked = true, blocked_at = $2, blocked_reason = $3
            """, user_id, datetime.now(), reason)

            await conn.close()

            # –õ–æ–≥—É—î–º–æ —ñ–Ω—Ü–∏–¥–µ–Ω—Ç –±–ª–æ–∫—É–≤–∞–Ω–Ω—è
            await self.log_security_incident(
                "user_blocked",
                "high",
                "system",
                user_id,
                f"User {user_id} blocked: {reason}"
            )

            logger.warning(f"üö´ User {user_id} has been blocked: {reason}")

        except Exception as e:
            logger.error(f"Failed to block user {user_id}: {e}")

    async def check_suspicious_activity(self):
        """–ü–µ—Ä–µ–≤—ñ—Ä—è—î –ø—ñ–¥–æ–∑—Ä—ñ–ª—É –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å"""
        # –ê–Ω–∞–ª—ñ–∑—É—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ –Ω–µ–≤–¥–∞–ª—ñ —Å–ø—Ä–æ–±–∏ –≤—Ö–æ–¥—É
        suspicious_users = [
            user_id for user_id, count in self.failed_login_attempts.items()
            if count >= 3
        ]

        for user_id in suspicious_users:
            await self.log_security_incident(
                "suspicious_login_pattern",
                "medium",
                "unknown",
                user_id,
                f"User {user_id} has {self.failed_login_attempts[user_id]} failed login attempts"
            )

    async def analyze_access_logs(self):
        """–ê–Ω–∞–ª—ñ–∑—É—î –ª–æ–≥–∏ –¥–æ—Å—Ç—É–ø—É –¥–ª—è –≤–∏—è–≤–ª–µ–Ω–Ω—è –∞–Ω–æ–º–∞–ª—ñ–π"""
        # –¢—É—Ç –±–∏ –±—É–≤ –∞–Ω–∞–ª—ñ–∑ –ø–∞—Ç–µ—Ä–Ω—ñ–≤ –¥–æ—Å—Ç—É–ø—É, –∞–ª–µ –¥–ª—è –¥–µ–º–æ –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å
        current_hour = datetime.now().replace(minute=0, second=0, microsecond=0)

        # –í —Ä–µ–∞–ª—å–Ω—ñ–π —Å–∏—Å—Ç–µ–º—ñ –∞–Ω–∞–ª—ñ–∑—É–≤–∞–ª–∏ –± –ª–æ–≥–∏ –∑ —Ñ–∞–π–ª—ñ–≤ –∞–±–æ –ë–î
        logger.debug("üîç Analyzing access logs for anomalies...")

    async def cleanup_blocked_ips(self):
        """–û—á–∏—â–∞—î –∑–∞—Å—Ç–∞—Ä—ñ–ª—ñ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω—ñ IP"""
        # –í —Ä–µ–∞–ª—å–Ω—ñ–π —Å–∏—Å—Ç–µ–º—ñ —Ç—É—Ç –±—É–ª–∞ –± –ª–æ–≥—ñ–∫–∞ —Ä–æ–∑–±–ª–æ–∫—É–≤–∞–Ω–Ω—è IP —á–µ—Ä–µ–∑ –ø–µ–≤–Ω–∏–π —á–∞—Å
        pass

    async def update_user_roles_cache(self):
        """–û–Ω–æ–≤–ª—é—î –∫–µ—à —Ä–æ–ª–µ–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤"""
        try:
            # –í —Ä–µ–∞–ª—å–Ω—ñ–π —Å–∏—Å—Ç–µ–º—ñ —Ç—É—Ç –±–∏ –±—É–≤ –∑–∞–ø–∏—Ç –¥–æ Keycloak API
            # –∞–±–æ –ë–î –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–µ—à—É —Ä–æ–ª–µ–π
            pass

        except Exception as e:
            logger.error(f"Failed to update user roles cache: {e}")

    async def get_pii_audit_report(self, start_date: datetime, end_date: datetime) -> Dict[str, Any]:
        """–ì–µ–Ω–µ—Ä—É—î –∑–≤—ñ—Ç –ø—Ä–æ –¥–æ—Å—Ç—É–ø –¥–æ PII"""
        try:
            import asyncpg

            conn = await asyncpg.connect(self.postgres_url)

            # –û—Ç—Ä–∏–º—É—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É PII –¥–æ—Å—Ç—É–ø—ñ–≤
            pii_stats = await conn.fetch("""
                SELECT pii_type, COUNT(*) as detections, 
                       SUM(CASE WHEN user_has_access THEN 1 ELSE 0 END) as authorized_access,
                       SUM(CASE WHEN masked THEN 1 ELSE 0 END) as masked_instances
                FROM pii_audit_log 
                WHERE timestamp BETWEEN $1 AND $2
                GROUP BY pii_type
            """, start_date, end_date)

            await conn.close()

            return {
                'period': {
                    'start': start_date.isoformat(),
                    'end': end_date.isoformat()
                },
                'pii_statistics': [
                    {
                        'pii_type': row['pii_type'],
                        'total_detections': row['detections'],
                        'authorized_access': row['authorized_access'],
                        'masked_instances': row['masked_instances']
                    } for row in pii_stats
                ],
                'total_pii_detections': sum(row['detections'] for row in pii_stats),
                'compliance_rate': sum(row['masked_instances'] for row in pii_stats) / max(sum(row['detections'] for row in pii_stats), 1) * 100
            }

        except Exception as e:
            logger.error(f"Failed to generate PII audit report: {e}")
            return {'error': str(e)}

    async def get_security_status(self) -> Dict[str, Any]:
        """–ü–æ–≤–µ—Ä—Ç–∞—î –ø–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞—Ç—É—Å –±–µ–∑–ø–µ–∫–∏"""
        recent_incidents = [
            incident for incident in self.security_incidents
            if incident.timestamp > datetime.now() - timedelta(hours=24)
        ]

        return {
            'timestamp': datetime.now().isoformat(),
            'security_level': 'HIGH' if len(recent_incidents) > 5 else 'NORMAL',
            'incidents_last_24h': len(recent_incidents),
            'blocked_users': len([i for i in recent_incidents if i.incident_type == 'user_blocked']),
            'pii_detections_today': len([log for log in self.pii_audit_log if log['timestamp'] > (datetime.now() - timedelta(days=1)).isoformat()]),
            'failed_login_attempts': len(self.failed_login_attempts),
            'status': 'active'
        }

# –ì–ª–æ–±–∞–ª—å–Ω–∏–π –µ–∫–∑–µ–º–ø–ª—è—Ä –∞–≥–µ–Ω—Ç–∞
security_agent = SecurityAgent()

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–∞–ø—É—Å–∫—É –∞–≥–µ–Ω—Ç–∞"""
    logger.info("üöÄ Starting Predator Analytics Security Agent...")

    try:
        await security_agent.initialize()
        logger.info("üîí Security Agent is active and monitoring...")

        # –¢—Ä–∏–º–∞—î–º–æ –∞–≥–µ–Ω—Ç –∑–∞–ø—É—â–µ–Ω–∏–º
        while True:
            await asyncio.sleep(60)

    except KeyboardInterrupt:
        logger.info("Received interrupt signal")
    except Exception as e:
        logger.error(f"Error in Security Agent: {e}")

if __name__ == "__main__":
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    )
    asyncio.run(main())
