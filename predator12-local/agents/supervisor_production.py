#!/usr/bin/env python3
"""
üè≠ –ü–†–û–î–ê–ö–®–ù SUPERVISOR v4.0 
–ö–æ–Ω–∫—É—Ä—Å–Ω–∞ —Å–∏—Å—Ç–µ–º–∞ –∑ –∞—Ä–±—ñ—Ç—Ä–∞–∂–µ–º —Ç–∞ —Ç–µ—Ä–º–∞–ª—å–Ω–∏–º –∑–∞—Ö–∏—Å—Ç–æ–º –¥–ª—è 21 –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–æ—ó –º–æ–¥–µ–ª—ñ
"""

import argparse
import asyncio
import time
import yaml
import json
import random
import hashlib
from dataclasses import dataclass, field
from typing import Dict, List, Any, Optional, Tuple
from enum import Enum
import logging
import structlog
import aiohttp
from concurrent.futures import ThreadPoolExecutor, as_completed
from datetime import datetime, timedelta

# Structured logging setup
logger = structlog.get_logger(__name__)
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)

class TaskType(Enum):
    """–¢–∏–ø–∏ –∑–∞–≤–¥–∞–Ω—å –¥–ª—è –∞–≥–µ–Ω—Ç—ñ–≤"""
    CRITICAL_ORCHESTRATION = "critical_orchestration"
    CRITICAL_ROUTING = "critical_routing" 
    CRITICAL_PLANNING = "critical_planning"
    HIGH_LOAD_ANALYSIS = "high_load_analysis"
    REAL_TIME_DETECTION = "real_time_detection"
    PREDICTIVE_ANALYTICS = "predictive_analytics"
    CODE_GENERATION = "code_generation_healing"
    SYSTEM_DIAGNOSTICS = "system_diagnostics"
    FAST_PROCESSING = "fast_processing"
    DATA_TRANSFORMATION = "data_transformation"
    INDEXING_SEARCH = "indexing_search"
    EMBEDDINGS = "embeddings_vectors"
    WEB_INTELLIGENCE = "web_intelligence"
    GRAPH_ANALYSIS = "graph_analysis"
    SIMULATION = "simulation_modeling"
    DATA_GENERATION = "data_generation"
    DOCUMENT_GENERATION = "document_generation"
    FINANCIAL_ANALYSIS = "financial_analysis"
    PRIVACY_PROTECTION = "privacy_protection"
    SECURITY_TESTING = "security_testing"
    COMPLIANCE_MONITORING = "compliance_monitoring"
    PERFORMANCE_OPTIMIZATION = "performance_optimization"
    SELF_OPTIMIZATION = "self_optimization"
    DECISION_ARBITRATION = "decision_arbitration"
    USER_ASSISTANCE = "user_assistance"
    SCHEMA_ANALYSIS = "schema_analysis"

class CompetitionResult(Enum):
    """–†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –∫–æ–Ω–∫—É—Ä—Å—É –º–æ–¥–µ–ª–µ–π"""
    WINNER = "winner"
    RUNNER_UP = "runner_up"
    FAILED = "failed"
    TIMEOUT = "timeout"
    ARBITRATION_NEEDED = "arbitration_needed"

@dataclass
class ThermalStatus:
    """–¢–µ—Ä–º–∞–ª—å–Ω–∏–π —Å—Ç–∞—Ç—É—Å –∞–≥–µ–Ω—Ç–∞/–º–æ–¥–µ–ª—ñ"""
    temperature: float = 0.0  # 0.0 - 1.0
    load_percentage: float = 0.0
    requests_per_minute: int = 0
    cooldown_until: Optional[datetime] = None
    status: str = "normal"  # normal, warning, critical, emergency

@dataclass 
class CompetitionEntry:
    """–ó–∞–ø–∏—Å —É—á–∞—Å–Ω–∏–∫–∞ –∫–æ–Ω–∫—É—Ä—Å—É"""
    model_id: str
    agent_id: str
    response: Optional[str] = None
    latency_ms: float = 0.0
    quality_score: float = 0.0
    error: Optional[str] = None
    status: CompetitionResult = CompetitionResult.FAILED
    timestamp: datetime = field(default_factory=datetime.now)

@dataclass
class ArbitrationDecision:
    """–†—ñ—à–µ–Ω–Ω—è –∞—Ä–±—ñ—Ç—Ä–∞–∂–∞"""
    winner_model: str
    confidence: float
    reasoning: str
    timestamp: datetime = field(default_factory=datetime.now)
    arbiter_model: str = ""

class ProductionSupervisor:
    """üè≠ –ü—Ä–æ–¥–∞–∫—à–Ω —Å—É–ø–µ—Ä–≤—ñ–∑–æ—Ä –∑ –∫–æ–Ω–∫—É—Ä—Å–Ω–æ—é —Å–∏—Å—Ç–µ–º–æ—é"""
    
    def __init__(self, config_path: str = "/Users/dima/Documents/Predator11/agents/registry.yaml",
                 policies_path: str = "/Users/dima/Documents/Predator11/agents/policies.yaml"):
        self.config_path = config_path
        self.policies_path = policies_path
        self.agents = {}
        self.models = {}
        self.policies = {}
        
        # Thermal monitoring
        self.thermal_status: Dict[str, ThermalStatus] = {}
        
        # Competition tracking
        self.competition_history: List[CompetitionEntry] = []
        self.arbitration_history: List[ArbitrationDecision] = []
        
        # Performance metrics
        self.metrics = {
            "total_requests": 0,
            "successful_competitions": 0,
            "arbitrations_needed": 0,
            "thermal_events": 0,
            "failovers": 0,
            "cost_saved": 0.0  # –ó–∞–≤–∂–¥–∏ 0 –¥–ª—è –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∏—Ö –º–æ–¥–µ–ª–µ–π
        }
        
        self.load_configuration()
        self.initialize_thermal_monitoring()
        
    def load_configuration(self):
        """–ó–∞–≤–∞–Ω—Ç–∞–∂—É—î –ø—Ä–æ–¥–∞–∫—à–Ω –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é"""
        try:
            # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ registry
            with open(self.config_path, 'r', encoding='utf-8') as f:
                registry = yaml.safe_load(f)
                
            self.agents = registry.get("agents", {})
            self.models = registry.get("llm_profiles", {})
            
            # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –ø–æ–ª—ñ—Ç–∏–∫–∏
            with open(self.policies_path, 'r', encoding='utf-8') as f:
                self.policies = yaml.safe_load(f)
            
            logger.info("üè≠ –ü—Ä–æ–¥–∞–∫—à–Ω –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ", 
                       agents=len(self.agents), models=len(self.models))
                       
        except Exception as e:
            logger.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó", error=str(e))
            raise
    
    def initialize_thermal_monitoring(self):
        """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î —Å–∏—Å—Ç–µ–º—É —Ç–µ—Ä–º–∞–ª—å–Ω–æ–≥–æ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É"""
        for agent_id in self.agents.keys():
            self.thermal_status[agent_id] = ThermalStatus()
            
        for model_id in self.get_all_available_models():
            self.thermal_status[f"model_{model_id}"] = ThermalStatus()
    
    def get_all_available_models(self) -> List[str]:
        """–ü–æ–≤–µ—Ä—Ç–∞—î —Å–ø–∏—Å–æ–∫ –≤—Å—ñ—Ö –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –º–æ–¥–µ–ª–µ–π"""
        models = set()
        for agent_config in self.agents.values():
            if "competition_models" in agent_config:
                models.update(agent_config["competition_models"])
            if "fallback_chain" in agent_config:
                models.update(agent_config["fallback_chain"])
            if "emergency_pool" in agent_config:
                models.update(agent_config["emergency_pool"])
        return list(models)
    
    def update_thermal_status(self, entity_id: str, load_increase: float = 0.1):
        """–û–Ω–æ–≤–ª—é—î —Ç–µ—Ä–º–∞–ª—å–Ω–∏–π —Å—Ç–∞—Ç—É—Å"""
        if entity_id not in self.thermal_status:
            self.thermal_status[entity_id] = ThermalStatus()
            
        status = self.thermal_status[entity_id]
        status.load_percentage = min(1.0, status.load_percentage + load_increase)
        status.requests_per_minute += 1
        
        # –í–∏–∑–Ω–∞—á–∞—î–º–æ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É –Ω–∞ –æ—Å–Ω–æ–≤—ñ –Ω–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
        status.temperature = status.load_percentage * 0.8 + random.uniform(0.0, 0.2)
        
        # –í–∏–∑–Ω–∞—á–∞—î–º–æ —Å—Ç–∞—Ç—É—Å
        if status.temperature >= 0.95:
            status.status = "emergency"
            status.cooldown_until = datetime.now() + timedelta(minutes=5)
            self.metrics["thermal_events"] += 1
        elif status.temperature >= 0.85:
            status.status = "critical"
        elif status.temperature >= 0.70:
            status.status = "warning"
        else:
            status.status = "normal"
            
        # –ü—Ä–∏—Ä–æ–¥–Ω–µ –æ—Ö–æ–ª–æ–¥–∂–µ–Ω–Ω—è
        if status.cooldown_until and datetime.now() > status.cooldown_until:
            status.temperature *= 0.9
            status.load_percentage *= 0.9
            if status.temperature < 0.7:
                status.cooldown_until = None
    
    def is_entity_available(self, entity_id: str) -> bool:
        """–ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ –¥–æ—Å—Ç—É–ø–Ω–∞ —Å—É—Ç–Ω—ñ—Å—Ç—å (–∞–≥–µ–Ω—Ç/–º–æ–¥–µ–ª—å)"""
        if entity_id not in self.thermal_status:
            return True
            
        status = self.thermal_status[entity_id]
        
        # –ó–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–≥—Ä—ñ–≤
        if status.cooldown_until and datetime.now() < status.cooldown_until:
            return False
            
        # –ö—Ä–∏—Ç–∏—á–Ω–∏–π –ø–µ—Ä–µ–≥—Ä—ñ–≤
        if status.temperature >= 0.95:
            return False
            
        return True
    
    def get_available_competition_models(self, agent_id: str) -> List[str]:
        """–ü–æ–≤–µ—Ä—Ç–∞—î –¥–æ—Å—Ç—É–ø–Ω—ñ –º–æ–¥–µ–ª—ñ –¥–ª—è –∫–æ–Ω–∫—É—Ä—Å—É"""
        if agent_id not in self.agents:
            return []
            
        agent_config = self.agents[agent_id]
        competition_models = agent_config.get("competition_models", [])
        
        # –§—ñ–ª—å—Ç—Ä—É—î–º–æ –¥–æ—Å—Ç—É–ø–Ω—ñ –º–æ–¥–µ–ª—ñ
        available = []
        for model in competition_models:
            if self.is_entity_available(f"model_{model}"):
                available.append(model)
                
        # –Ø–∫—â–æ –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç—ñ–≤, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ fallback
        if not available:
            fallback_chain = agent_config.get("fallback_chain", [])
            for model in fallback_chain:
                if self.is_entity_available(f"model_{model}"):
                    available.append(model)
                    if len(available) >= 2:  # –ú—ñ–Ω—ñ–º—É–º –¥–ª—è –∫–æ–Ω–∫—É—Ä—Å—É
                        break
        
        return available[:3]  # –ú–∞–∫—Å–∏–º—É–º 3 –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∏
    
    async def run_model_competition(self, agent_id: str, task: str, 
                                  task_type: TaskType) -> CompetitionEntry:
        """üèÜ –ó–∞–ø—É—Å–∫–∞—î –∫–æ–Ω–∫—É—Ä—Å –º—ñ–∂ –º–æ–¥–µ–ª—è–º–∏"""
        
        available_models = self.get_available_competition_models(agent_id)
        
        if not available_models:
            logger.warning("‚ö†Ô∏è –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –º–æ–¥–µ–ª–µ–π –¥–ª—è –∫–æ–Ω–∫—É—Ä—Å—É", agent=agent_id)
            return CompetitionEntry(model_id="", agent_id=agent_id, 
                                  status=CompetitionResult.FAILED)
        
        logger.info("üèÜ –ó–∞–ø—É—Å–∫–∞—é –∫–æ–Ω–∫—É—Ä—Å –º–æ–¥–µ–ª–µ–π", 
                   agent=agent_id, competitors=len(available_models))
        
        # –ó–∞–ø—É—Å–∫–∞—î–º–æ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç—ñ–≤ –ø–∞—Ä–∞–ª–µ–ª—å–Ω–æ
        competitors = []
        start_time = time.time()
        
        with ThreadPoolExecutor(max_workers=len(available_models)) as executor:
            futures = {}
            
            for model_id in available_models:
                future = executor.submit(self._evaluate_model, model_id, task, task_type)
                futures[future] = model_id
            
            # –ó–±–∏—Ä–∞—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –∑ —Ç–∞–π–º–∞—É—Ç–æ–º
            timeout = self.policies.get("competition_system", {}).get("timeout_seconds", 30)
            
            for future in as_completed(futures, timeout=timeout):
                model_id = futures[future]
                try:
                    result = future.result()
                    entry = CompetitionEntry(
                        model_id=model_id,
                        agent_id=agent_id,
                        response=result.get("response", ""),
                        latency_ms=(time.time() - start_time) * 1000,
                        quality_score=result.get("quality_score", 0.0),
                        status=CompetitionResult.WINNER if result.get("success") else CompetitionResult.FAILED
                    )
                    competitors.append(entry)
                    
                except Exception as e:
                    logger.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç—ñ", model=model_id, error=str(e))
                    competitors.append(CompetitionEntry(
                        model_id=model_id,
                        agent_id=agent_id,
                        error=str(e),
                        status=CompetitionResult.FAILED
                    ))
        
        # –í–∏–±–∏—Ä–∞—î–º–æ –ø–µ—Ä–µ–º–æ–∂—Ü—è
        winner = await self._select_competition_winner(competitors, agent_id)
        
        # –û–Ω–æ–≤–ª—é—î–º–æ —Ç–µ—Ä–º–∞–ª—å–Ω–∏–π —Å—Ç–∞—Ç—É—Å
        for competitor in competitors:
            self.update_thermal_status(f"model_{competitor.model_id}")
        
        self.competition_history.append(winner)
        self.metrics["successful_competitions"] += 1
        
        return winner
    
    def _evaluate_model(self, model_id: str, task: str, task_type: TaskType) -> Dict[str, Any]:
        """–û—Ü—ñ–Ω—é—î –æ–¥–Ω—É –º–æ–¥–µ–ª—å (—Å–∏–º—É–ª—è—Ü—ñ—è)"""
        
        # –°–∏–º—É–ª—é—î–º–æ –≤–∏–∫–ª–∏–∫ –º–æ–¥–µ–ª—ñ
        time.sleep(random.uniform(0.5, 3.0))  # –°–∏–º—É–ª—è—Ü—ñ—è –ª–∞—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—ñ
        
        # –û—Ü—ñ–Ω—é—î–º–æ —è–∫—ñ—Å—Ç—å –Ω–∞ –æ—Å–Ω–æ–≤—ñ —Ç–∏–ø—É –∑–∞–≤–¥–∞–Ω–Ω—è —ñ –º–æ–¥–µ–ª—ñ
        quality_score = self._calculate_quality_score(model_id, task_type)
        
        # –°–∏–º—É–ª—é—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
        response = f"Model {model_id} response to: {task[:50]}..."
        
        return {
            "success": quality_score > 0.5,
            "response": response,
            "quality_score": quality_score
        }
    
    def _calculate_quality_score(self, model_id: str, task_type: TaskType) -> float:
        """–†–æ–∑—Ä–∞—Ö–æ–≤—É—î –æ—Ü—ñ–Ω–∫—É —è–∫–æ—Å—Ç—ñ –¥–ª—è –º–æ–¥–µ–ª—ñ —Ç–∞ —Ç–∏–ø—É –∑–∞–≤–¥–∞–Ω–Ω—è"""
        
        # –ë–∞–∑–æ–≤–∞ –æ—Ü—ñ–Ω–∫–∞ –º–æ–¥–µ–ª—ñ
        base_scores = {
            "ai21-labs/ai21-jamba-1.5-large": 0.95,
            "mistralai/mixtral-8x7b-instruct-v0.1": 0.90,
            "meta-llama/meta-llama-3-70b-instruct": 0.88,
            "cohere/command-r-plus-08-2024": 0.85,
            "meta-llama/meta-llama-3-8b-instruct": 0.80,
            "microsoft/phi-3-small-128k-instruct": 0.78,
            "qwen/qwen2.5-32b-instruct": 0.82,
            "mistralai/codestral-latest": 0.85,
            "google/gemma-2-27b-it": 0.75
        }
        
        base_score = base_scores.get(model_id, 0.70)
        
        # –ú–æ–¥–∏—Ñ—ñ–∫–∞—Ç–æ—Ä–∏ –¥–ª—è —Ç–∏–ø—ñ–≤ –∑–∞–≤–¥–∞–Ω—å
        task_modifiers = {
            TaskType.CODE_GENERATION: {
                "mistralai/codestral-latest": 0.15,
                "ai21-labs/ai21-jamba-1.5-large": 0.10
            },
            TaskType.FAST_PROCESSING: {
                "meta-llama/llama-3.2-1b-instruct": 0.20,
                "qwen/qwen2.5-3b-instruct": 0.15
            },
            TaskType.CRITICAL_ORCHESTRATION: {
                "ai21-labs/ai21-jamba-1.5-large": 0.12,
                "mistralai/mixtral-8x7b-instruct-v0.1": 0.10
            }
        }
        
        modifier = task_modifiers.get(task_type, {}).get(model_id, 0.0)
        final_score = min(1.0, base_score + modifier + random.uniform(-0.05, 0.05))
        
        return final_score
    
    async def _select_competition_winner(self, competitors: List[CompetitionEntry], 
                                       agent_id: str) -> CompetitionEntry:
        """–í–∏–±–∏—Ä–∞—î –ø–µ—Ä–µ–º–æ–∂—Ü—è –∫–æ–Ω–∫—É—Ä—Å—É –∞–±–æ –∑–∞–ø—É—Å–∫–∞—î –∞—Ä–±—ñ—Ç—Ä–∞–∂"""
        
        # –§—ñ–ª—å—Ç—Ä—É—î–º–æ —É—Å–ø—ñ—à–Ω—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏
        successful = [c for c in competitors if c.status != CompetitionResult.FAILED]
        
        if not successful:
            logger.error("‚ùå –í—Å—ñ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∏ –ø—Ä–æ–≤–∞–ª–∏–ª–∏ –∑–∞–≤–¥–∞–Ω–Ω—è", agent=agent_id)
            return competitors[0] if competitors else CompetitionEntry(
                model_id="", agent_id=agent_id, status=CompetitionResult.FAILED)
        
        # –°–æ—Ä—Ç—É—î–º–æ –∑–∞ —è–∫—ñ—Å—Ç—é —Ç–∞ —à–≤–∏–¥–∫—ñ—Å—Ç—é
        successful.sort(key=lambda x: (-x.quality_score, x.latency_ms))
        
        winner = successful[0]
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –ø–æ—Ç—Ä—ñ–±–µ–Ω –∞—Ä–±—ñ—Ç—Ä–∞–∂
        if len(successful) > 1:
            runner_up = successful[1]
            score_diff = winner.quality_score - runner_up.quality_score
            
            # –ê—Ä–±—ñ—Ç—Ä–∞–∂ –ø–æ—Ç—Ä—ñ–±–µ–Ω —è–∫—â–æ —Ä—ñ–∑–Ω–∏—Ü—è –º–∞–ª–∞
            if score_diff < 0.1:
                logger.info("‚öñÔ∏è –ó–∞–ø—É—Å–∫–∞—é –∞—Ä–±—ñ—Ç—Ä–∞–∂", winner=winner.model_id, 
                           runner_up=runner_up.model_id)
                
                arbitration = await self._run_arbitration(winner, runner_up, agent_id)
                if arbitration:
                    self.arbitration_history.append(arbitration)
                    # –ó–º—ñ–Ω—é—î–º–æ –ø–µ—Ä–µ–º–æ–∂—Ü—è —è–∫—â–æ –∞—Ä–±—ñ—Ç—Ä —Ç–∞–∫ –≤–∏—Ä—ñ—à–∏–≤
                    if arbitration.winner_model == runner_up.model_id:
                        winner = runner_up
        
        winner.status = CompetitionResult.WINNER
        logger.info("üèÜ –ü–µ—Ä–µ–º–æ–∂–µ—Ü—å –∫–æ–Ω–∫—É—Ä—Å—É", winner=winner.model_id, 
                   score=winner.quality_score, latency=f"{winner.latency_ms:.1f}ms")
        
        return winner
    
    async def _run_arbitration(self, contestant1: CompetitionEntry, 
                             contestant2: CompetitionEntry, agent_id: str) -> Optional[ArbitrationDecision]:
        """–ó–∞–ø—É—Å–∫–∞—î –∞—Ä–±—ñ—Ç—Ä–∞–∂ –º—ñ–∂ –¥–≤–æ–º–∞ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞–º–∏"""
        
        if agent_id not in self.agents:
            return None
            
        arbiter_model = self.agents[agent_id].get("arbiter_model")
        if not arbiter_model or not self.is_entity_available(f"model_{arbiter_model}"):
            logger.warning("‚ö†Ô∏è –ê—Ä–±—ñ—Ç—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π", arbiter=arbiter_model)
            return None
        
        # –°–∏–º—É–ª—è—Ü—ñ—è –∞—Ä–±—ñ—Ç—Ä–∞–∂–Ω–æ–≥–æ —Ä—ñ—à–µ–Ω–Ω—è
        arbiter_choice = random.choice([contestant1.model_id, contestant2.model_id])
        confidence = random.uniform(0.6, 0.9)
        reasoning = f"–ê—Ä–±—ñ—Ç—Ä –≤–∏–±—Ä–∞–≤ {arbiter_choice} –∑ confidence {confidence:.2f}"
        
        self.metrics["arbitrations_needed"] += 1
        
        return ArbitrationDecision(
            winner_model=arbiter_choice,
            confidence=confidence,
            reasoning=reasoning,
            arbiter_model=arbiter_model
        )
    
    async def handle_agent_request(self, agent_id: str, task: str, 
                                 task_type: TaskType = TaskType.CRITICAL_ORCHESTRATION) -> Dict[str, Any]:
        """ü§ñ –û–±—Ä–æ–±–ª—è—î –∑–∞–ø–∏—Ç –≤—ñ–¥ –∞–≥–µ–Ω—Ç–∞"""
        
        self.metrics["total_requests"] += 1
        
        logger.info("üì® –ù–æ–≤–∏–π –∑–∞–ø–∏—Ç –≤—ñ–¥ –∞–≥–µ–Ω—Ç–∞", agent=agent_id, task_type=task_type.value)
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –¥–æ—Å—Ç—É–ø–Ω—ñ—Å—Ç—å –∞–≥–µ–Ω—Ç–∞
        if not self.is_entity_available(agent_id):
            logger.warning("üå°Ô∏è –ê–≥–µ–Ω—Ç –ø–µ—Ä–µ–≥—Ä—ñ—Ç–∏–π, –∞–∫—Ç–∏–≤—É—é emergency", agent=agent_id)
            return await self._handle_emergency_fallback(agent_id, task, task_type)
        
        # –ó–∞–ø—É—Å–∫–∞—î–º–æ –∫–æ–Ω–∫—É—Ä—Å –º–æ–¥–µ–ª–µ–π
        competition_result = await self.run_model_competition(agent_id, task, task_type)
        
        if competition_result.status == CompetitionResult.FAILED:
            logger.error("‚ùå –ö–æ–Ω–∫—É—Ä—Å –ø—Ä–æ–≤–∞–ª–µ–Ω–∏–π, fallback", agent=agent_id)
            return await self._handle_emergency_fallback(agent_id, task, task_type)
        
        # –û–Ω–æ–≤–ª—é—î–º–æ —Ç–µ—Ä–º–∞–ª—å–Ω–∏–π —Å—Ç–∞—Ç—É—Å –∞–≥–µ–Ω—Ç–∞
        self.update_thermal_status(agent_id)
        
        return {
            "success": True,
            "response": competition_result.response,
            "winner_model": competition_result.model_id,
            "quality_score": competition_result.quality_score,
            "latency_ms": competition_result.latency_ms,
            "thermal_status": self.thermal_status[agent_id].status
        }
    
    async def _handle_emergency_fallback(self, agent_id: str, task: str, 
                                       task_type: TaskType) -> Dict[str, Any]:
        """üÜò –û–±—Ä–æ–±–ª—è—î –∞–≤–∞—Ä—ñ–π–Ω–∏–π fallback"""
        
        if agent_id not in self.agents:
            return {"success": False, "error": "Agent not found"}
        
        emergency_pool = self.agents[agent_id].get("emergency_pool", [])
        
        for model_id in emergency_pool:
            if self.is_entity_available(f"model_{model_id}"):
                logger.info("üÜò –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é emergency –º–æ–¥–µ–ª—å", model=model_id)
                
                # –°–∏–º—É–ª—è—Ü—ñ—è emergency –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
                result = self._evaluate_model(model_id, task, task_type)
                self.update_thermal_status(f"model_{model_id}")
                self.metrics["failovers"] += 1
                
                return {
                    "success": result["success"],
                    "response": result["response"],
                    "emergency_model": model_id,
                    "quality_score": result["quality_score"],
                    "is_emergency": True
                }
        
        logger.error("üö® –í—Å—ñ emergency –º–æ–¥–µ–ª—ñ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ!", agent=agent_id)
        return {
            "success": False,
            "error": "All emergency models unavailable",
            "agent": agent_id
        }
    
    def get_system_status(self) -> Dict[str, Any]:
        """üìä –ü–æ–≤–µ—Ä—Ç–∞—î —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º–∏"""
        
        # –†–∞—Ö—É—î–º–æ —Ç–µ—Ä–º–∞–ª—å–Ω—ñ —Å—Ç–∞—Ç—É—Å–∏
        thermal_counts = {"normal": 0, "warning": 0, "critical": 0, "emergency": 0}
        for status in self.thermal_status.values():
            thermal_counts[status.status] += 1
        
        # –û—Å—Ç–∞–Ω–Ω—ñ –∫–æ–Ω–∫—É—Ä—Å–∏
        recent_competitions = len([c for c in self.competition_history 
                                 if c.timestamp > datetime.now() - timedelta(minutes=5)])
        
        return {
            "timestamp": datetime.now().isoformat(),
            "agents_count": len(self.agents),
            "available_models": len([m for m in self.get_all_available_models() 
                                   if self.is_entity_available(f"model_{m}")]),
            "thermal_status": thermal_counts,
            "metrics": self.metrics,
            "recent_competitions": recent_competitions,
            "arbitrations_count": len(self.arbitration_history),
            "system_health": "healthy" if thermal_counts["emergency"] == 0 else "degraded"
        }
    
    def run_thermal_maintenance(self):
        """üå°Ô∏è –ó–∞–ø—É—Å–∫–∞—î —Ç–µ—Ä–º–∞–ª—å–Ω–µ –æ–±—Å–ª—É–≥–æ–≤—É–≤–∞–Ω–Ω—è"""
        logger.info("üå°Ô∏è –ó–∞–ø—É—Å–∫–∞—é —Ç–µ—Ä–º–∞–ª—å–Ω–µ –æ–±—Å–ª—É–≥–æ–≤—É–≤–∞–Ω–Ω—è...")
        
        cooled_entities = 0
        for entity_id, status in self.thermal_status.items():
            if status.temperature > 0.1:
                # –ü—Ä–∏—Ä–æ–¥–Ω–µ –æ—Ö–æ–ª–æ–¥–∂–µ–Ω–Ω—è
                status.temperature *= 0.95
                status.load_percentage *= 0.90
                status.requests_per_minute = max(0, status.requests_per_minute - 5)
                
                # –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å
                if status.temperature < 0.7 and status.status in ["warning", "critical"]:
                    status.status = "normal"
                    cooled_entities += 1
        
        logger.info("‚ùÑÔ∏è –¢–µ—Ä–º–∞–ª—å–Ω–µ –æ–±—Å–ª—É–≥–æ–≤—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ", cooled=cooled_entities)

# CLI —Ç–∞ –æ—Å–Ω–æ–≤–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó
def main():
    parser = argparse.ArgumentParser(description="üè≠ Predator Nexus Production Supervisor")
    parser.add_argument("--config", default="/Users/dima/Documents/Predator11/agents/registry.yaml",
                       help="–®–ª—è—Ö –¥–æ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó")
    parser.add_argument("--policies", default="/Users/dima/Documents/Predator11/agents/policies.yaml", 
                       help="–®–ª—è—Ö –¥–æ –ø–æ–ª—ñ—Ç–∏–∫")
    parser.add_argument("--mode", choices=["interactive", "daemon", "test"], default="interactive",
                       help="–†–µ–∂–∏–º —Ä–æ–±–æ—Ç–∏")
    
    args = parser.parse_args()
    
    supervisor = ProductionSupervisor(args.config, args.policies)
    
    if args.mode == "test":
        # –¢–µ—Å—Ç–æ–≤–∏–π —Ä–µ–∂–∏–º
        asyncio.run(test_supervisor(supervisor))
    elif args.mode == "daemon":
        # Daemon —Ä–µ–∂–∏–º
        run_daemon(supervisor)
    else:
        # –Ü–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∏–π —Ä–µ–∂–∏–º
        run_interactive(supervisor)

async def test_supervisor(supervisor: ProductionSupervisor):
    """üß™ –¢–µ—Å—Ç—É—î supervisor"""
    print("üß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ø—Ä–æ–¥–∞–∫—à–Ω supervisor...")
    
    # –¢–µ—Å—Ç 1: –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º–∏
    status = supervisor.get_system_status()
    print(f"üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º–∏: {json.dumps(status, indent=2)}")
    
    # –¢–µ—Å—Ç 2: –ö–æ–Ω–∫—É—Ä—Å –¥–ª—è –∫—Ä–∏—Ç–∏—á–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞
    result = await supervisor.handle_agent_request(
        "ChiefOrchestrator", 
        "–ü—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–π –ø–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞–Ω —Å–∏—Å—Ç–µ–º–∏ —Ç–∞ –Ω–∞–¥–∞–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó",
        TaskType.CRITICAL_ORCHESTRATION
    )
    print(f"üèÜ –†–µ–∑—É–ª—å—Ç–∞—Ç –∫–æ–Ω–∫—É—Ä—Å—É: {json.dumps(result, indent=2)}")
    
    # –¢–µ—Å—Ç 3: –®–≤–∏–¥–∫–∏–π –∞–≥–µ–Ω—Ç
    result = await supervisor.handle_agent_request(
        "DatasetIngest",
        "–û–±—Ä–æ–±–∏ –≤–µ–ª–∏–∫–∏–π –¥–∞—Ç–∞—Å–µ—Ç —à–≤–∏–¥–∫–æ",
        TaskType.FAST_PROCESSING
    )
    print(f"‚ö° –®–≤–∏–¥–∫–∏–π –ø—Ä–æ—Ü–µ—Å–∏–Ω–≥: {json.dumps(result, indent=2)}")
    
    # –¢–µ—Å—Ç 4: –¢–µ—Ä–º–∞–ª—å–Ω–µ –æ–±—Å–ª—É–≥–æ–≤—É–≤–∞–Ω–Ω—è  
    supervisor.run_thermal_maintenance()
    
    print("‚úÖ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

def run_daemon(supervisor: ProductionSupervisor):
    """üîÑ –ó–∞–ø—É—Å–∫–∞—î supervisor —è–∫ daemon"""
    print("üîÑ –ó–∞–ø—É—Å–∫ supervisor —è–∫ daemon...")
    
    while True:
        try:
            # –¢–µ—Ä–º–∞–ª—å–Ω–µ –æ–±—Å–ª—É–≥–æ–≤—É–≤–∞–Ω–Ω—è –∫–æ–∂–Ω—ñ 30 —Å–µ–∫—É–Ω–¥
            supervisor.run_thermal_maintenance()
            
            # –í–∏–≤–æ–¥–∏–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            status = supervisor.get_system_status()
            logger.info("üìä –°–∏—Å—Ç–µ–º–Ω–∏–π —Å—Ç–∞—Ç—É—Å", **status)
            
            time.sleep(30)
            
        except KeyboardInterrupt:
            logger.info("üëã –ó—É–ø–∏–Ω–∫–∞ supervisor...")
            break
        except Exception as e:
            logger.error("‚ùå –ü–æ–º–∏–ª–∫–∞ daemon", error=str(e))
            time.sleep(5)

def run_interactive(supervisor: ProductionSupervisor):
    """üí¨ –Ü–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∏–π —Ä–µ–∂–∏–º"""
    print("üí¨ –Ü–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∏–π —Ä–µ–∂–∏–º Predator Nexus Production Supervisor")
    print("–ö–æ–º–∞–Ω–¥–∏: status, test, thermal, quit")
    
    while True:
        try:
            cmd = input("\n> ").strip().lower()
            
            if cmd == "quit" or cmd == "exit":
                break
            elif cmd == "status":
                status = supervisor.get_system_status()
                print(json.dumps(status, indent=2))
            elif cmd == "test":
                asyncio.run(test_supervisor(supervisor))
            elif cmd == "thermal":
                supervisor.run_thermal_maintenance()
                print("üå°Ô∏è –¢–µ—Ä–º–∞–ª—å–Ω–µ –æ–±—Å–ª—É–≥–æ–≤—É–≤–∞–Ω–Ω—è –≤–∏–∫–æ–Ω–∞–Ω–æ")
            else:
                print("‚ùì –ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞. –î–æ—Å—Ç—É–ø–Ω—ñ: status, test, thermal, quit")
                
        except KeyboardInterrupt:
            break
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")

if __name__ == "__main__":
    main()
