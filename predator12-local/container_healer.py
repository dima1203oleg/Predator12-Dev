#!/usr/bin/env python3
"""
üõ†Ô∏è Container Healer for Predator11
- –û—á—ñ–∫—É—î –∑–∞–ø—É—Å–∫ Docker –¥–µ–º–æ–Ω–∞ (–¥–æ 10 —Ö–≤)
- –ü—ñ–¥–Ω—ñ–º–∞—î –≤–µ—Å—å —Å—Ç–µ–∫ (docker compose/up -d –∑ –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è–º –∫–æ–º–∞–Ω–¥–∏)
- –í–∏–∑–Ω–∞—á–∞—î –ø—Ä–æ–±–ª–µ–º–Ω—ñ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏ (Restarting/Created/Exited/unhealthy)
- –ó–∞—Å—Ç–æ—Å–æ–≤—É—î —Ç–æ—á–∫–æ–≤—ñ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∏ —Ç–∞ –∑–±—ñ—Ä –ª–æ–≥—ñ–≤
- –ü–∏—à–µ –¥–µ—Ç–∞–ª—å–Ω–∏–π –∑–≤—ñ—Ç —É logs/container_healer.log
- macOS: –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫ Docker Desktop
- OpenSearch: –∞–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü—ñ—è –º—ñ–Ω—ñ–º–∞–ª—å–Ω–æ–≥–æ config/jvm.options –ø—Ä–∏ –≤—ñ–¥—Å—É—Ç–Ω–æ—Å—Ç—ñ
- –ü–æ–µ—Ç–∞–ø–Ω–∏–π –ø—ñ–¥–π–æ–º —ñ –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è health –¥–ª—è –∫—Ä–∏—Ç–∏—á–Ω–∏—Ö —Å–µ—Ä–≤—ñ—Å—ñ–≤
"""
import subprocess
import time
import logging
import os
from datetime import datetime
from pathlib import Path
import shutil
import sys
from typing import Optional, Tuple, List, Dict, Union

BASE = Path('/Users/dima/Documents/Predator11')
LOGS_DIR = BASE / 'logs'
LOGS_DIR.mkdir(parents=True, exist_ok=True)
HEAL_LOG = LOGS_DIR / 'container_healer.log'

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler(HEAL_LOG, encoding='utf-8'),
        logging.StreamHandler()
    ]
)
log = logging.getLogger('healer')

COMPOSE_FILES = ['docker-compose.yml']

PROBLEM_PATTERNS = ('Restarting', 'Created', 'Exited', 'unhealthy')

SERVICES_PRIORITY = [
    'db', 'redis', 'opensearch', 'qdrant', 'minio',
    'modelsdk', 'backend', 'worker', 'scheduler', 'agent-supervisor',
    'frontend', 'loki', 'tempo', 'prometheus', 'grafana'
]

COMPOSE_CMD = None  # –±—É–¥–µ –≤–∏–∑–Ω–∞—á–µ–Ω–æ –¥–∏–Ω–∞–º—ñ—á–Ω–æ


def sh(cmd: str, cwd: Optional[Path] = None, timeout: Optional[int] = None) -> Tuple[int, str, str]:
    proc = subprocess.Popen(cmd, cwd=str(cwd) if cwd else None, shell=True,
                            stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
    try:
        out, err = proc.communicate(timeout=timeout)
    except subprocess.TimeoutExpired:
        proc.kill()
        out, err = proc.communicate()
    return proc.returncode, out, err


def open_docker_desktop():
    """–°–ø—Ä–æ–±–∞ –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫—É Docker Desktop –Ω–∞ macOS"""
    if sys.platform == 'darwin':
        log.info('–ü—Ä–æ–±—É—é –∑–∞–ø—É—Å—Ç–∏—Ç–∏ Docker Desktop...')
        sh('open -a "Docker Desktop"')


def wait_docker_ready(max_wait_sec=600, interval=5) -> bool:
    log.info('–û—á—ñ–∫—É—é –≥–æ—Ç–æ–≤–Ω—ñ—Å—Ç—å Docker –¥–µ–º–æ–Ω–∞... (–¥–æ %s —Å–µ–∫)', max_wait_sec)
    open_docker_desktop()
    waited = 0
    while waited < max_wait_sec:
        code, _, _ = sh('docker info >/dev/null 2>&1 && echo OK || echo NO')
        code2, _, _ = sh('docker info >/dev/null 2>&1')
        if code2 == 0:
            log.info('Docker READY')
            return True
        time.sleep(interval)
        waited += interval
        log.info('Docker –≤—Å–µ —â–µ STARTING... (%ss)', waited)
    log.error('Docker –Ω–µ —Å—Ç–∞–≤ –≥–æ—Ç–æ–≤–∏–º –∑–∞ %s —Å–µ–∫', max_wait_sec)
    return False


def detect_compose_cmd() -> str:
    """–í–∏–∑–Ω–∞—á–∞—î, —á–∏–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—å: 'docker compose' —á–∏ 'docker-compose'"""
    # –ü—Ä–æ–±—É—î–º–æ docker compose
    code, _, _ = sh('docker compose version >/dev/null 2>&1 && echo OK || echo NO')
    if code == 0:
        return 'docker compose'
    # –§–æ–ª–±–µ–∫ –Ω–∞ docker-compose
    code2, _, _ = sh('docker-compose version >/dev/null 2>&1 && echo OK || echo NO')
    if code2 == 0:
        return 'docker-compose'
    # –Ø–∫—â–æ –∂–æ–¥–Ω–æ–≥–æ –Ω–µ–º–∞—î ‚Äî –ª–æ–≥ —ñ raise
    log.error('–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –Ω—ñ "docker compose", –Ω—ñ "docker-compose" —É PATH')
    raise RuntimeError('compose command not found')


def build_compose_files_arg() -> str:
    files = []
    for f in COMPOSE_FILES:
        if (BASE / f).exists():
            files.append(f'-f {f}')
    # –î–æ–¥–∞—î–º–æ override, —è–∫—â–æ —ñ—Å–Ω—É—î
    if (BASE / 'docker-compose.override.yml').exists():
        files.append('-f docker-compose.override.yml')
    return ' '.join(files)


def compose_up_detached(services: Optional[List[str]] = None, timeout: int = 300) -> None:
    files_arg = build_compose_files_arg()
    svc_arg = '' if not services else ' ' + ' '.join(services)
    cmd = f'{COMPOSE_CMD} {files_arg} up -d{svc_arg}'
    code, out, err = sh(cmd, cwd=BASE, timeout=timeout)
    if code == 0:
        log.info('%s: OK', cmd)
    else:
        log.error('%s: FAIL\n%s\n%s', cmd, out, err)


def list_containers() -> List[Dict]:
    code, out, err = sh('docker ps -a --format "{{.Names}}|{{.Image}}|{{.Status}}"')
    if code != 0:
        log.error('–ù–µ –≤–¥–∞—î—Ç—å—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ–≤: %s', err)
        return []
    items: List[Dict] = []
    for line in out.strip().splitlines():
        parts = line.split('|')
        if len(parts) != 3:
            continue
        items.append({'name': parts[0], 'image': parts[1], 'status': parts[2]})
    return items


def is_problem(status: str) -> bool:
    return any(p in status for p in PROBLEM_PATTERNS)


def inspect_health(name: str) -> str:
    """–ü–æ–≤–µ—Ä—Ç–∞—î Health.Status –∞–±–æ 'none' —è–∫—â–æ –Ω–µ–º–∞—î healthcheck."""
    code, out, _ = sh(f'docker inspect --format "{{{{.State.Health.Status}}}}" {name}')
    if code != 0:
        return 'none'
    val = out.strip()
    return val if val else 'none'


def wait_services_healthy(names: List[str], timeout_sec: int = 180, interval: int = 5) -> None:
    start = time.time()
    pending = set(names)
    log.info('–û—á—ñ–∫—É—é –∑–¥–æ—Ä–æ–≤ º—è —Å–µ—Ä–≤—ñ—Å—ñ–≤ %s (–¥–æ %ss)...', names, timeout_sec)
    while pending and (time.time() - start) < timeout_sec:
        done: List[str] = []
        for n in pending:
            status = inspect_health(n)
            # –Ø–∫—â–æ –Ω–µ–º–∞—î healthcheck ‚Äî –ø—Ä–∏–π–º–∞—î–º–æ Up —è–∫ –û–ö
            code, psout, _ = sh(f'docker ps --filter name={n} --format "{{{{.Status}}}}"')
            psstat = psout.strip()
            if status == 'healthy' or (status == 'none' and psstat.startswith('Up')):
                log.info('%s healthy (%s / %s)', n, status, psstat)
                done.append(n)
            else:
                log.debug('%s still %s (%s)', n, status, psstat)
        for n in done:
            pending.discard(n)
        if pending:
            time.sleep(interval)
    if pending:
        log.warning('–ù–µ –≤—Å—ñ —Å–µ—Ä–≤—ñ—Å–∏ —Å—Ç–∞–ª–∏ healthy –≤—á–∞—Å–Ω–æ: %s', list(pending))


def restart_service(name: str) -> None:
    log.info('–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ %s ...', name)
    code, out, err = sh(f'docker restart {name}', timeout=60)
    if code == 0:
        log.info('–ü–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω–æ %s', name)
    else:
        log.error('–ù–µ –≤–¥–∞–ª–æ—Å—è –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–∏ %s: %s', name, err)


def collect_logs(name: str, lines=200) -> None:
    log_path = LOGS_DIR / f'{name}.log'
    code, out, err = sh(f'docker logs --tail {lines} {name}')
    with open(log_path, 'w', encoding='utf-8') as f:
        f.write(out or '')
        if err:
            f.write('\n[stderr]\n')
            f.write(err)
    log.info('–õ–æ–≥–∏ %s –∑–±–µ—Ä–µ–∂–µ–Ω–æ —É %s', name, log_path)


def ensure_opensearch_config():
    """–ê–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü—ñ—è –º—ñ–Ω—ñ–º–∞–ª—å–Ω–æ–≥–æ config/jvm.options –¥–ª—è OpenSearch, —è–∫—â–æ –≤—ñ–¥—Å—É—Ç–Ω—ñ–π."""
    cfg_dir = BASE / 'observability' / 'opensearch' / 'config'
    cfg_dir.mkdir(parents=True, exist_ok=True)
    jvm = cfg_dir / 'jvm.options'
    if not jvm.exists():
        jvm.write_text("""
-Xms512m
-Xmx512m
-XX:+UseG1GC
-XX:+AlwaysPreTouch
-XX:+HeapDumpOnOutOfMemoryError
""".strip()+"\n", encoding='utf-8')
        log.info('–°—Ç–≤–æ—Ä–µ–Ω–æ –º—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π OpenSearch jvm.options —É %s', jvm)


def heal_once() -> dict:
    report = {'problems': [], 'fixed': [], 'left': []}
    items = list_containers()
    if not items:
        return report
    # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è
    priority_index = {svc: i for i, svc in enumerate(SERVICES_PRIORITY)}
    items_sorted = sorted(items, key=lambda x: priority_index.get(x['name'], 999))
    for it in items_sorted:
        name, status = it['name'], it['status']
        if is_problem(status):
            report['problems'].append((name, status))
            collect_logs(name)
            restart_service(name)
            time.sleep(3)
            # –ø–æ–≤—Ç–æ—Ä–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞
            items2 = list_containers()
            new_status = next((j['status'] for j in items2 if j['name'] == name), status)
            if not is_problem(new_status):
                report['fixed'].append((name, status + ' -> ' + new_status))
            else:
                report['left'].append((name, new_status))
    return report


def staged_bringup():
    """–ü–æ–µ—Ç–∞–ø–Ω–∏–π –ø—ñ–¥–π–æ–º —Å–µ—Ä–≤—ñ—Å—ñ–≤ —ñ–∑ –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è–º health."""
    global COMPOSE_CMD
    COMPOSE_CMD = detect_compose_cmd()

    # 0) –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ OpenSearch –∫–æ–Ω—Ñ—ñ–≥—ñ–≤ (—É–Ω–∏–∫–Ω—É—Ç–∏ NoSuchFileException)
    ensure_opensearch_config()

    # 1) –ë–∞–∑–∏/–∫–µ—à/—Å—Ö–æ–≤–∏—â–∞
    core: List[str] = ['db', 'redis', 'minio', 'qdrant', 'opensearch']
    compose_up_detached(core)
    wait_services_healthy(core, timeout_sec=240)

    # 2) Model SDK (–∑–∞ –ø–æ—Ç—Ä–µ–±–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–Ω–∏–π)
    compose_up_detached(['modelsdk'])
    time.sleep(10)

    # 3) Backend
    compose_up_detached(['backend'])
    wait_services_healthy(['predator11-backend-1'], timeout_sec=180)

    # 4) Worker/Scheduler/Supervisor
    compose_up_detached(['worker', 'scheduler', 'agent-supervisor'])
    time.sleep(10)

    # 5) –°–ø–æ—Å—Ç–µ—Ä–µ–∂—É–≤–∞–Ω—ñ—Å—Ç—å —Ç–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥
    compose_up_detached(['prometheus', 'grafana', 'loki', 'tempo', 'frontend', 'opensearch-dashboards'])
    time.sleep(10)


def main():
    log.info('=== CONTAINER HEALER START ===')
    log.info('Time: %s', datetime.now().isoformat())

    if not wait_docker_ready():
        log.error('–ü–µ—Ä–µ—Ä–∏–≤–∞—é: Docker –Ω–µ –≥–æ—Ç–æ–≤–∏–π')
        return

    # –ü–æ–µ—Ç–∞–ø–Ω–∏–π –ø—ñ–¥–π–æ–º –∑–∞–º—ñ—Å—Ç—å –æ–¥–Ω–æ–≥–æ –≤–µ–ª–∏–∫–æ–≥–æ up -d
    try:
        staged_bringup()
    except Exception as e:
        log.error('–ü–æ–º–∏–ª–∫–∞ staged_bringup: %s', e)

    # –•–≤–∏–ª—è –ª—ñ–∫—É–≤–∞–Ω–Ω—è ‚Ññ1
    report = heal_once()
    log.info('–ó–Ω–∞–π–¥–µ–Ω–æ –ø—Ä–æ–±–ª–µ–º: %s, –í–∏–ø—Ä–∞–≤–ª–µ–Ω–æ: %s, –ó–∞–ª–∏—à–∏–ª–æ—Å—å: %s',
             len(report['problems']), len(report['fixed']), len(report['left']))

    # –•–≤–∏–ª—è –ª—ñ–∫—É–≤–∞–Ω–Ω—è ‚Ññ2 —á–µ—Ä–µ–∑ 20 —Å–µ–∫
    time.sleep(20)
    report2 = heal_once()
    log.info('–ü–æ–≤—Ç–æ—Ä–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ ‚Äî –ó–Ω–∞–π–¥–µ–Ω–æ –ø—Ä–æ–±–ª–µ–º: %s, –í–∏–ø—Ä–∞–≤–ª–µ–Ω–æ: %s, –ó–∞–ª–∏—à–∏–ª–æ—Å—å: %s',
             len(report2['problems']), len(report2['fixed']), len(report2['left']))

    log.info('=== CONTAINER HEALER DONE ===')


if __name__ == '__main__':
    main()
