#!/usr/bin/env python3
"""
üé§ Voice Providers API - Backend –¥–ª—è –∫–µ—Ä—É–≤–∞–Ω–Ω—è TTS/STT –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞–º–∏
–ß–∞—Å—Ç–∏–Ω–∞ Premium FREE Voice System Predator12 Nexus Core V5.2

–§—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª:
- –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è/–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ñ–≤
- –ö–µ—Ä—É–≤–∞–Ω–Ω—è API –∫–ª—é—á–∞–º–∏ (–∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–æ)
- –í–∞–ª—ñ–¥–∞—Ü—ñ—è —Ç–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ñ–≤
- –Ü—Å—Ç–æ—Ä—ñ—è –∑–º—ñ–Ω –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å
- –¶–µ–Ω—Ç—Ä–∞–ª—ñ–∑–æ–≤–∞–Ω–µ –ª–æ–≥—É–≤–∞–Ω–Ω—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è
"""

from fastapi import APIRouter, HTTPException, Depends, Security, BackgroundTasks
from fastapi.security import HTTPBearer, HTTPAuthorizationCredentials
from pydantic import BaseModel, Field
from typing import Dict, List, Optional, Any, Literal
from datetime import datetime, timedelta
import json
import os
import logging
from cryptography.fernet import Fernet
import asyncio
import aiohttp
from pathlib import Path

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Ä–æ—É—Ç–µ—Ä–∞
router = APIRouter(
    prefix="/api/voice-providers",
    tags=["voice-providers"],
    responses={404: {"description": "Not found"}}
)

# Security
security = HTTPBearer()

# –ú–æ–¥–µ–ª—ñ –¥–∞–Ω–∏—Ö
class ProviderConfig(BaseModel):
    id: str
    name: str
    category: Literal["tts", "stt"]
    type: Literal["free", "freemium", "paid"]
    status: Literal["available", "configured", "error", "disabled"]
    api_key: Optional[str] = None
    model: Optional[str] = None
    region: Optional[str] = None
    endpoint: Optional[str] = None
    quality: int = Field(ge=1, le=5)
    speed: int = Field(ge=1, le=5)
    languages: List[str]
    description: str
    features: List[str]
    limits: Optional[Dict[str, str]] = None
    pricing: Optional[Dict[str, Any]] = None
    documentation: Optional[str] = None
    test_phrase: Optional[str] = None
    last_tested: Optional[datetime] = None
    usage_count: int = 0
    created_at: datetime = Field(default_factory=datetime.now)
    updated_at: datetime = Field(default_factory=datetime.now)

class ProviderTest(BaseModel):
    provider_id: str
    test_type: Literal["tts", "stt"]
    text: Optional[str] = None
    audio_url: Optional[str] = None
    language: str = "uk-UA"

class ProviderUsage(BaseModel):
    provider_id: str
    timestamp: datetime
    operation: Literal["tts", "stt"]
    success: bool
    duration_ms: int
    error_message: Optional[str] = None

class VoiceSettings(BaseModel):
    default_tts_provider: str = "coqui_tts"
    default_stt_provider: str = "faster_whisper"
    fallback_enabled: bool = True
    fallback_order: List[str] = ["api", "local", "browser"]
    auto_switch_on_error: bool = True
    usage_analytics: bool = True
    language_preference: str = "uk-UA"
    quality_preference: Literal["speed", "quality", "balanced"] = "balanced"

# –®–∏—Ñ—Ä—É–≤–∞–Ω–Ω—è –¥–ª—è API –∫–ª—é—á—ñ–≤
def get_encryption_key() -> bytes:
    """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–ª—é—á–∞ —à–∏—Ñ—Ä—É–≤–∞–Ω–Ω—è –∑ –∑–º—ñ–Ω–Ω–æ—ó —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ –∞–±–æ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ"""
    key_file = Path("voice_encryption.key")

    if key_file.exists():
        return key_file.read_bytes()
    else:
        key = Fernet.generate_key()
        key_file.write_bytes(key)
        logger.warning("üîê –°—Ç–≤–æ—Ä–µ–Ω–æ –Ω–æ–≤–∏–π –∫–ª—é—á —à–∏—Ñ—Ä—É–≤–∞–Ω–Ω—è –¥–ª—è API –∫–ª—é—á—ñ–≤")
        return key

ENCRYPTION_KEY = get_encryption_key()
cipher_suite = Fernet(ENCRYPTION_KEY)

def encrypt_api_key(api_key: str) -> str:
    """–ó–∞—à–∏—Ñ—Ä—É–≤–∞—Ç–∏ API –∫–ª—é—á"""
    if not api_key:
        return ""
    return cipher_suite.encrypt(api_key.encode()).decode()

def decrypt_api_key(encrypted_key: str) -> str:
    """–†–æ–∑—à–∏—Ñ—Ä—É–≤–∞—Ç–∏ API –∫–ª—é—á"""
    if not encrypted_key:
        return ""
    try:
        return cipher_suite.decrypt(encrypted_key.encode()).decode()
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ä–æ–∑—à–∏—Ñ—Ä—É–≤–∞–Ω–Ω—è API –∫–ª—é—á–∞: {e}")
        return ""

# –ó–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö
VOICE_CONFIG_DIR = Path("voice_configs")
VOICE_CONFIG_DIR.mkdir(exist_ok=True)

PROVIDERS_FILE = VOICE_CONFIG_DIR / "providers.json"
SETTINGS_FILE = VOICE_CONFIG_DIR / "settings.json"
USAGE_FILE = VOICE_CONFIG_DIR / "usage.json"

# –î–µ—Ñ–æ–ª—Ç–Ω—ñ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∏ (FREE & FREEMIUM)
DEFAULT_PROVIDERS = [
    {
        "id": "coqui_tts",
        "name": "Coqui TTS (Local)",
        "category": "tts",
        "type": "free",
        "status": "available",
        "quality": 5,
        "speed": 3,
        "languages": ["uk-UA", "en-US", "ru-RU"],
        "description": "–õ–æ–∫–∞–ª—å–Ω–∏–π open-source TTS –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—ó –º–æ–≤–∏",
        "features": ["–û—Ñ–ª–∞–π–Ω —Ä–æ–±–æ—Ç–∞", "–í–∏—Å–æ–∫–∞ —è–∫—ñ—Å—Ç—å", "–ú—É–ª—å—Ç–∏–º–æ–≤–Ω—ñ—Å—Ç—å", "–ö–∞—Å—Ç–æ–º—ñ–∑–∞—Ü—ñ—è –≥–æ–ª–æ—Å—É"],
        "limits": {"free": "–ù–µ–æ–±–º–µ–∂–µ–Ω–æ (–ª–æ–∫–∞–ª—å–Ω–æ)"},
        "pricing": {"free": True},
        "test_phrase": "–ü—Ä–∏–≤—ñ—Ç! –¶–µ —Ç–µ—Å—Ç –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–∏–Ω—Ç–µ–∑—É.",
        "usage_count": 0
    },
    {
        "id": "gtts",
        "name": "Google Text-to-Speech",
        "category": "tts",
        "type": "free",
        "status": "available",
        "quality": 4,
        "speed": 5,
        "languages": ["uk-UA", "en-US", "ru-RU", "de-DE", "fr-FR"],
        "description": "–ë–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∏–π Google TTS —Å–µ—Ä–≤—ñ—Å",
        "features": ["–®–≤–∏–¥–∫–∞ —Ä–æ–±–æ—Ç–∞", "–Ø–∫—ñ—Å–Ω—ñ –≥–æ–ª–æ—Å–∏", "–ë–∞–≥–∞—Ç–æ –º–æ–≤"],
        "limits": {"free": "–ë–µ–∑ –ª—ñ–º—ñ—Ç—É (–ø—Ä–∏ —Ä–æ–∑—É–º–Ω–æ–º—É –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—ñ)"},
        "pricing": {"free": True},
        "test_phrase": "–ü—Ä–∏–≤—ñ—Ç! –¶–µ —Ç–µ—Å—Ç –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–∏–Ω—Ç–µ–∑—É.",
        "usage_count": 0
    },
    {
        "id": "pyttsx3",
        "name": "pyttsx3 (System TTS)",
        "category": "tts",
        "type": "free",
        "status": "available",
        "quality": 3,
        "speed": 4,
        "languages": ["uk-UA", "en-US"],
        "description": "–°–∏—Å—Ç–µ–º–Ω–∏–π TTS –¥–≤–∏–∂–æ–∫",
        "features": ["–û—Ñ–ª–∞–π–Ω —Ä–æ–±–æ—Ç–∞", "–°–∏—Å—Ç–µ–º–Ω–∞ —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è", "–®–≤–∏–¥–∫—ñ—Å—Ç—å"],
        "limits": {"free": "–ù–µ–æ–±–º–µ–∂–µ–Ω–æ"},
        "pricing": {"free": True},
        "test_phrase": "–ü—Ä–∏–≤—ñ—Ç! –¶–µ —Ç–µ—Å—Ç –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–∏–Ω—Ç–µ–∑—É.",
        "usage_count": 0
    },
    {
        "id": "faster_whisper",
        "name": "Faster Whisper (Local)",
        "category": "stt",
        "type": "free",
        "status": "available",
        "quality": 5,
        "speed": 4,
        "languages": ["uk-UA", "en-US", "ru-RU", "de-DE", "fr-FR"],
        "description": "–û–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–∞ –≤–µ—Ä—Å—ñ—è OpenAI Whisper",
        "features": ["–û—Ñ–ª–∞–π–Ω —Ä–æ–±–æ—Ç–∞", "–í–∏—Å–æ–∫–∞ —Ç–æ—á–Ω—ñ—Å—Ç—å", "–®–≤–∏–¥–∫—ñ—Å—Ç—å", "–ú—É–ª—å—Ç–∏–º–æ–≤–Ω—ñ—Å—Ç—å"],
        "limits": {"free": "–ù–µ–æ–±–º–µ–∂–µ–Ω–æ (–ª–æ–∫–∞–ª—å–Ω–æ)"},
        "pricing": {"free": True},
        "test_phrase": "–°–∫–∞–∂—ñ—Ç—å –±—É–¥—å-—â–æ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –∞–±–æ –∞–Ω–≥–ª—ñ–π—Å—å–∫–æ—é",
        "usage_count": 0
    },
    {
        "id": "whisper",
        "name": "OpenAI Whisper",
        "category": "stt",
        "type": "free",
        "status": "available",
        "quality": 5,
        "speed": 3,
        "languages": ["uk-UA", "en-US", "ru-RU", "de-DE", "fr-FR", "es-ES"],
        "description": "–û—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π Whisper –≤—ñ–¥ OpenAI",
        "features": ["–û—Ñ–ª–∞–π–Ω —Ä–æ–±–æ—Ç–∞", "–ù–∞–π–≤–∏—â–∞ —Ç–æ—á–Ω—ñ—Å—Ç—å", "99 –º–æ–≤ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏"],
        "limits": {"free": "–ù–µ–æ–±–º–µ–∂–µ–Ω–æ (–ª–æ–∫–∞–ª—å–Ω–æ)"},
        "pricing": {"free": True},
        "test_phrase": "–°–∫–∞–∂—ñ—Ç—å –±—É–¥—å-—â–æ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –∞–±–æ –∞–Ω–≥–ª—ñ–π—Å—å–∫–æ—é",
        "usage_count": 0
    },
    {
        "id": "vosk",
        "name": "Vosk (Lightweight STT)",
        "category": "stt",
        "type": "free",
        "status": "available",
        "quality": 4,
        "speed": 5,
        "languages": ["uk-UA", "en-US", "ru-RU"],
        "description": "–õ–µ–≥–∫–∏–π –æ—Ñ–ª–∞–π–Ω —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞—á –º–æ–≤–ª–µ–Ω–Ω—è",
        "features": ["–û—Ñ–ª–∞–π–Ω —Ä–æ–±–æ—Ç–∞", "–ú–∞–ª–∏–π —Ä–æ–∑–º—ñ—Ä", "–®–≤–∏–¥–∫—ñ—Å—Ç—å", "–†–µ–∞–ª-—Ç–∞–π–º"],
        "limits": {"free": "–ù–µ–æ–±–º–µ–∂–µ–Ω–æ (–ª–æ–∫–∞–ª—å–Ω–æ)"},
        "pricing": {"free": True},
        "test_phrase": "–°–∫–∞–∂—ñ—Ç—å –±—É–¥—å-—â–æ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –∞–±–æ –∞–Ω–≥–ª—ñ–π—Å—å–∫–æ—é",
        "usage_count": 0
    }
]

# Utility —Ñ—É–Ω–∫—Ü—ñ—ó
def load_providers() -> List[Dict]:
    """–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ñ–≤"""
    if PROVIDERS_FILE.exists():
        try:
            with open(PROVIDERS_FILE, 'r', encoding='utf-8') as f:
                return json.load(f)
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ñ–≤: {e}")

    # –°—Ç–≤–æ—Ä–∏—Ç–∏ –¥–µ—Ñ–æ–ª—Ç–Ω—ñ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∏
    save_providers(DEFAULT_PROVIDERS)
    return DEFAULT_PROVIDERS

def save_providers(providers: List[Dict]) -> None:
    """–ó–±–µ—Ä–µ–≥—Ç–∏ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ñ–≤"""
    try:
        # –®–∏—Ñ—Ä—É—î–º–æ API –∫–ª—é—á—ñ –ø–µ—Ä–µ–¥ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è–º
        for provider in providers:
            if provider.get('api_key'):
                provider['api_key'] = encrypt_api_key(provider['api_key'])

        with open(PROVIDERS_FILE, 'w', encoding='utf-8') as f:
            json.dump(providers, f, ensure_ascii=False, indent=2, default=str)

        logger.info(f"‚úÖ –ó–±–µ—Ä–µ–∂–µ–Ω–æ {len(providers)} –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ñ–≤")
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ñ–≤: {e}")
        raise HTTPException(status_code=500, detail=f"–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è: {e}")

def load_settings() -> Dict:
    """–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –≥–ª–æ–±–∞–ª—å–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è"""
    default_settings = VoiceSettings().dict()

    if SETTINGS_FILE.exists():
        try:
            with open(SETTINGS_FILE, 'r', encoding='utf-8') as f:
                return {**default_settings, **json.load(f)}
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å: {e}")

    return default_settings

def save_settings(settings: Dict) -> None:
    """–ó–±–µ—Ä–µ–≥—Ç–∏ –≥–ª–æ–±–∞–ª—å–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è"""
    try:
        with open(SETTINGS_FILE, 'w', encoding='utf-8') as f:
            json.dump(settings, f, ensure_ascii=False, indent=2)
        logger.info("‚úÖ –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–æ")
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å: {e}")
        raise HTTPException(status_code=500, detail=f"–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è: {e}")

def log_usage(usage: ProviderUsage) -> None:
    """–õ–æ–≥—É–≤–∞–Ω–Ω—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞"""
    try:
        usage_data = []
        if USAGE_FILE.exists():
            with open(USAGE_FILE, 'r', encoding='utf-8') as f:
                usage_data = json.load(f)

        usage_data.append(usage.dict())

        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ç—ñ–ª—å–∫–∏ –æ—Å—Ç–∞–Ω–Ω—ñ 1000 –∑–∞–ø–∏—Å—ñ–≤
        if len(usage_data) > 1000:
            usage_data = usage_data[-1000:]

        with open(USAGE_FILE, 'w', encoding='utf-8') as f:
            json.dump(usage_data, f, ensure_ascii=False, indent=2, default=str)
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ª–æ–≥—É–≤–∞–Ω–Ω—è: {e}")

# API Endpoints

@router.get("/providers", response_model=List[ProviderConfig])
async def get_providers():
    """–û—Ç—Ä–∏–º–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –≤—Å—ñ—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ñ–≤"""
    try:
        providers_data = load_providers()

        # –†–æ–∑—à–∏—Ñ—Ä–æ–≤—É—î–º–æ API –∫–ª—é—á—ñ –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
        for provider in providers_data:
            if provider.get('api_key'):
                provider['api_key'] = decrypt_api_key(provider['api_key'])

        providers = [ProviderConfig(**provider) for provider in providers_data]
        logger.info(f"üìã –ü–æ–≤–µ—Ä–Ω—É—Ç–æ {len(providers)} –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ñ–≤")
        return providers
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ñ–≤: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@router.post("/providers", response_model=ProviderConfig)
async def create_provider(provider: ProviderConfig):
    """–°—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–∏–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä"""
    try:
        providers = load_providers()

        # –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —É–Ω—ñ–∫–∞–ª—å–Ω—ñ—Å—Ç—å ID
        if any(p['id'] == provider.id for p in providers):
            raise HTTPException(status_code=400, detail=f"–ü—Ä–æ–≤–∞–π–¥–µ—Ä –∑ ID '{provider.id}' –≤–∂–µ —ñ—Å–Ω—É—î")

        provider_dict = provider.dict()
        provider_dict['created_at'] = datetime.now()
        provider_dict['updated_at'] = datetime.now()

        providers.append(provider_dict)
        save_providers(providers)

        logger.info(f"‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä: {provider.name}")
        return provider
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@router.put("/providers/{provider_id}", response_model=ProviderConfig)
async def update_provider(provider_id: str, provider: ProviderConfig):
    """–û–Ω–æ–≤–∏—Ç–∏ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞"""
    try:
        providers = load_providers()

        # –ó–Ω–∞–π—Ç–∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä
        provider_index = None
        for i, p in enumerate(providers):
            if p['id'] == provider_id:
                provider_index = i
                break

        if provider_index is None:
            raise HTTPException(status_code=404, detail=f"–ü—Ä–æ–≤–∞–π–¥–µ—Ä '{provider_id}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")

        provider_dict = provider.dict()
        provider_dict['updated_at'] = datetime.now()

        providers[provider_index] = provider_dict
        save_providers(providers)

        logger.info(f"‚úÖ –û–Ω–æ–≤–ª–µ–Ω–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä: {provider.name}")
        return provider
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@router.delete("/providers/{provider_id}")
async def delete_provider(provider_id: str):
    """–í–∏–¥–∞–ª–∏—Ç–∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä"""
    try:
        providers = load_providers()

        # –ó–Ω–∞–π—Ç–∏ —ñ –≤–∏–¥–∞–ª–∏—Ç–∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä
        updated_providers = [p for p in providers if p['id'] != provider_id]

        if len(updated_providers) == len(providers):
            raise HTTPException(status_code=404, detail=f"–ü—Ä–æ–≤–∞–π–¥–µ—Ä '{provider_id}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")

        save_providers(updated_providers)

        logger.info(f"üóëÔ∏è –í–∏–¥–∞–ª–µ–Ω–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä: {provider_id}")
        return {"message": f"–ü—Ä–æ–≤–∞–π–¥–µ—Ä '{provider_id}' –≤–∏–¥–∞–ª–µ–Ω–æ"}
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@router.post("/providers/{provider_id}/test")
async def test_provider(provider_id: str, test_data: ProviderTest):
    """–¢–µ—Å—Ç—É–≤–∞—Ç–∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä"""
    try:
        providers = load_providers()

        # –ó–Ω–∞–π—Ç–∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä
        provider = None
        for p in providers:
            if p['id'] == provider_id:
                provider = p
                break

        if not provider:
            raise HTTPException(status_code=404, detail=f"–ü—Ä–æ–≤–∞–π–¥–µ—Ä '{provider_id}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")

        start_time = datetime.now()
        success = False
        error_message = None

        try:
            # –°–∏–º—É–ª—è—Ü—ñ—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è (—É —Ä–µ–∞–ª—å–Ω–æ—Å—Ç—ñ —Ç—É—Ç –±—É–¥–µ API –≤–∏–∫–ª–∏–∫)
            await asyncio.sleep(0.5)  # –Ü–º—ñ—Ç–∞—Ü—ñ—è –∑–∞–ø–∏—Ç—É

            if test_data.test_type == "tts" and test_data.text:
                # –¢–µ—Å—Ç TTS
                result = f"‚úÖ TTS —Ç–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω–æ: '{test_data.text[:50]}...'"
                success = True
            elif test_data.test_type == "stt" and test_data.audio_url:
                # –¢–µ—Å—Ç STT
                result = f"‚úÖ STT —Ç–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω–æ: —Ä–æ–∑–ø—ñ–∑–Ω–∞–Ω–æ —Ç–µ–∫—Å—Ç –∑ –∞—É–¥—ñ–æ"
                success = True
            else:
                raise ValueError("–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω—ñ –¥–∞–Ω—ñ –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è")

        except Exception as e:
            error_message = str(e)
            result = f"‚ùå –¢–µ—Å—Ç –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–æ: {error_message}"

        duration_ms = int((datetime.now() - start_time).total_seconds() * 1000)

        # –õ–æ–≥—É–≤–∞–Ω–Ω—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è
        usage = ProviderUsage(
            provider_id=provider_id,
            timestamp=datetime.now(),
            operation=test_data.test_type,
            success=success,
            duration_ms=duration_ms,
            error_message=error_message
        )
        log_usage(usage)

        # –û–Ω–æ–≤–ª–µ–Ω–Ω—è last_tested
        for p in providers:
            if p['id'] == provider_id:
                p['last_tested'] = datetime.now()
                break
        save_providers(providers)

        return {
            "provider_id": provider_id,
            "test_type": test_data.test_type,
            "success": success,
            "result": result,
            "duration_ms": duration_ms,
            "timestamp": datetime.now()
        }

    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@router.get("/settings", response_model=VoiceSettings)
async def get_settings():
    """–û—Ç—Ä–∏–º–∞—Ç–∏ –≥–ª–æ–±–∞–ª—å–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≥–æ–ª–æ—Å–æ–≤–æ—ó —Å–∏—Å—Ç–µ–º–∏"""
    try:
        settings = load_settings()
        return VoiceSettings(**settings)
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@router.put("/settings", response_model=VoiceSettings)
async def update_settings(settings: VoiceSettings):
    """–û–Ω–æ–≤–∏—Ç–∏ –≥–ª–æ–±–∞–ª—å–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è"""
    try:
        save_settings(settings.dict())
        logger.info("‚úÖ –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –æ–Ω–æ–≤–ª–µ–Ω–æ")
        return settings
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@router.get("/usage/stats")
async def get_usage_stats():
    """–û—Ç—Ä–∏–º–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ñ–≤"""
    try:
        if not USAGE_FILE.exists():
            return {"total_requests": 0, "providers": {}, "success_rate": 0}

        with open(USAGE_FILE, 'r', encoding='utf-8') as f:
            usage_data = json.load(f)

        stats = {
            "total_requests": len(usage_data),
            "providers": {},
            "success_rate": 0,
            "last_24h": 0,
            "tts_requests": 0,
            "stt_requests": 0
        }

        successful_requests = 0
        last_24h_time = datetime.now() - timedelta(days=1)

        for entry in usage_data:
            provider_id = entry['provider_id']

            if provider_id not in stats["providers"]:
                stats["providers"][provider_id] = {
                    "total": 0,
                    "success": 0,
                    "errors": 0,
                    "avg_duration": 0
                }

            stats["providers"][provider_id]["total"] += 1

            if entry['success']:
                successful_requests += 1
                stats["providers"][provider_id]["success"] += 1
            else:
                stats["providers"][provider_id]["errors"] += 1

            # –ü—ñ–¥—Ä–∞—Ö—É–Ω–æ–∫ –∑–∞ —Ç–∏–ø–∞–º–∏
            if entry['operation'] == 'tts':
                stats["tts_requests"] += 1
            elif entry['operation'] == 'stt':
                stats["stt_requests"] += 1

            # –ü—ñ–¥—Ä–∞—Ö—É–Ω–æ–∫ –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ 24 –≥–æ–¥–∏–Ω–∏
            entry_time = datetime.fromisoformat(entry['timestamp'].replace('Z', '+00:00'))
            if entry_time > last_24h_time:
                stats["last_24h"] += 1

        if usage_data:
            stats["success_rate"] = round(successful_requests / len(usage_data) * 100, 2)

        return stats

    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@router.post("/usage/log")
async def log_provider_usage(usage: ProviderUsage):
    """–õ–æ–≥—É–≤–∞–Ω–Ω—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞"""
    try:
        log_usage(usage)
        return {"message": "–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –∑–∞–ª–æ–≥–æ–≤–∞–Ω–æ"}
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ª–æ–≥—É–≤–∞–Ω–Ω—è: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@router.get("/health")
async def health_check():
    """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤'—è Voice Providers API"""
    try:
        providers = load_providers()
        settings = load_settings()

        return {
            "status": "healthy",
            "timestamp": datetime.now(),
            "providers_count": len(providers),
            "config_files": {
                "providers": PROVIDERS_FILE.exists(),
                "settings": SETTINGS_FILE.exists(),
                "usage": USAGE_FILE.exists()
            },
            "encryption": "enabled"
        }
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ health check: {e}")
        return {
            "status": "unhealthy",
            "error": str(e),
            "timestamp": datetime.now()
        }

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É
@router.on_event("startup")
async def startup_event():
    """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É —Å–µ—Ä–≤–µ—Ä–∞"""
    logger.info("üé§ –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è Voice Providers API...")

    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ–π–Ω–∏—Ö —Ñ–∞–π–ª—ñ–≤ —è–∫—â–æ —ó—Ö –Ω–µ–º–∞—î
    if not PROVIDERS_FILE.exists():
        save_providers(DEFAULT_PROVIDERS)
        logger.info("‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ –¥–µ—Ñ–æ–ª—Ç–Ω—ñ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∏")

    if not SETTINGS_FILE.exists():
        save_settings(VoiceSettings().dict())
        logger.info("‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ –¥–µ—Ñ–æ–ª—Ç–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è")

    logger.info("üéâ Voice Providers API –≥–æ—Ç–æ–≤–∏–π –¥–æ —Ä–æ–±–æ—Ç–∏!")
