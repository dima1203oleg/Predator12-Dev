"""
Data Governance Manager - –î–µ–ª—å—Ç–∞-—Ä–µ–≤—ñ–∑—ñ—è 1.2
Data lineage, –∫–∞—Ç–∞–ª–æ–≥, PII —Ä–µ—î—Å—Ç—Ä, retention –ø–æ–ª–∏—Ç–∏–∫–∏
"""

import logging
import uuid
from datetime import datetime, timedelta
from enum import Enum
from typing import Any, Dict, List, Optional

logger = logging.getLogger(__name__)


class DataClassification(Enum):
    """–ö–ª–∞—Å–∏—Ñ—ñ–∫–∞—Ü—ñ—è –¥–∞–Ω–∏—Ö"""

    PUBLIC = "public"
    INTERNAL = "internal"
    CONFIDENTIAL = "confidential"
    RESTRICTED = "restricted"
    PII = "pii"


class PIIType(Enum):
    """–¢–∏–ø–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏—Ö –¥–∞–Ω–∏—Ö"""

    NAME = "name"
    EMAIL = "email"
    PHONE = "phone"
    ADDRESS = "address"
    PASSPORT = "passport"
    TAX_ID = "tax_id"
    BANK_ACCOUNT = "bank_account"
    IP_ADDRESS = "ip_address"


class DataLineageEvent:
    """–ü–æ–¥—ñ—ó –ª—ñ–Ω—ñ—ó –¥–∞–Ω–∏—Ö"""

    def __init__(
        self,
        event_id: str,
        source_entity: str,
        target_entity: str,
        operation: str,
        timestamp: datetime,
        metadata: Dict[str, Any] = None,
    ):
        self.event_id = event_id
        self.source_entity = source_entity
        self.target_entity = target_entity
        self.operation = operation
        self.timestamp = timestamp
        self.metadata = metadata or {}


class PIIField:
    """–ü–æ–ª–µ –∑ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏–º–∏ –¥–∞–Ω–∏–º–∏"""

    def __init__(
        self,
        field_path: str,
        pii_type: PIIType,
        classification: DataClassification,
        mask_pattern: str = "*****",
        retention_days: Optional[int] = None,
    ):
        self.field_path = field_path
        self.pii_type = pii_type
        self.classification = classification
        self.mask_pattern = mask_pattern
        self.retention_days = retention_days


class DataCatalogEntry:
    """–ó–∞–ø–∏—Å –≤ –∫–∞—Ç–∞–ª–æ–∑—ñ –¥–∞–Ω–∏—Ö"""

    def __init__(
        self,
        entity_id: str,
        entity_name: str,
        entity_type: str,  # table, index, dataset, model
        schema: Dict[str, Any],
        classification: DataClassification,
        pii_fields: List[PIIField] = None,
        retention_policy: Optional[str] = None,
        tags: List[str] = None,
        description: str = "",
    ):
        self.entity_id = entity_id
        self.entity_name = entity_name
        self.entity_type = entity_type
        self.schema = schema
        self.classification = classification
        self.pii_fields = pii_fields or []
        self.retention_policy = retention_policy
        self.tags = tags or []
        self.description = description
        self.created_at = datetime.now()
        self.updated_at = datetime.now()


class DataGovernanceManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –¥–∞–Ω–∏–º–∏"""

    def __init__(self):
        self.catalog: Dict[str, DataCatalogEntry] = {}
        self.lineage_events: List[DataLineageEvent] = []
        self.pii_registry: Dict[str, List[PIIField]] = {}
        self.retention_policies: Dict[str, Dict[str, Any]] = {}

        # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ñ PII –ø–æ–ª—è –¥–ª—è –º–∏—Ç–Ω–∏—Ö –¥–∞–Ω–∏—Ö
        self._initialize_pii_registry()

        # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ñ retention –ø–æ–ª—ñ—Ç–∏–∫–∏
        self._initialize_retention_policies()

    def _initialize_pii_registry(self):
        """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Ä–µ—î—Å—Ç—Ä—É PII –ø–æ–ª—ñ–≤"""

        # –ú–∏—Ç–Ω—ñ –¥–µ–∫–ª–∞—Ä–∞—Ü—ñ—ó
        customs_pii = [
            PIIField(
                "declarant.name", PIIType.NAME, DataClassification.PII, "***MASKED***", 2555
            ),  # 7 —Ä–æ–∫—ñ–≤
            PIIField(
                "declarant.email", PIIType.EMAIL, DataClassification.PII, "****@*****.***", 2555
            ),
            PIIField(
                "declarant.phone", PIIType.PHONE, DataClassification.PII, "+38*********", 2555
            ),
            PIIField(
                "declarant.address",
                PIIType.ADDRESS,
                DataClassification.PII,
                "***MASKED_ADDRESS***",
                2555,
            ),
            PIIField(
                "declarant.passport_number",
                PIIType.PASSPORT,
                DataClassification.RESTRICTED,
                "**CLASSIFIED**",
                2555,
            ),
            PIIField(
                "declarant.tax_id", PIIType.TAX_ID, DataClassification.PII, "**MASKED**", 2555
            ),
            PIIField(
                "bank_details.account_number",
                PIIType.BANK_ACCOUNT,
                DataClassification.RESTRICTED,
                "**CLASSIFIED**",
                2555,
            ),
        ]

        # –ü–æ–¥–∞—Ç–∫–æ–≤—ñ –¥–∞–Ω—ñ
        tax_pii = [
            PIIField(
                "taxpayer.name", PIIType.NAME, DataClassification.PII, "***MASKED***", 1825
            ),  # 5 —Ä–æ–∫—ñ–≤
            PIIField("taxpayer.tin", PIIType.TAX_ID, DataClassification.PII, "**MASKED**", 1825),
            PIIField(
                "contact.email", PIIType.EMAIL, DataClassification.PII, "****@*****.***", 1825
            ),
            PIIField("contact.phone", PIIType.PHONE, DataClassification.PII, "+38*********", 1825),
        ]

        # OSINT –¥–∞–Ω—ñ
        osint_pii = [
            PIIField(
                "author.username", PIIType.NAME, DataClassification.CONFIDENTIAL, "***USER***", 90
            ),  # 3 –º—ñ—Å—è—Ü—ñ
            PIIField(
                "metadata.ip_address",
                PIIType.IP_ADDRESS,
                DataClassification.INTERNAL,
                "XXX.XXX.XXX.XXX",
                30,
            ),
            PIIField(
                "content.phone_numbers", PIIType.PHONE, DataClassification.PII, "+XX*********", 90
            ),
        ]

        self.pii_registry = {
            "customs_declarations": customs_pii,
            "tax_data": tax_pii,
            "osint_data": osint_pii,
        }

    def _initialize_retention_policies(self):
        """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è retention –ø–æ–ª—ñ—Ç–∏–∫"""
        self.retention_policies = {
            "customs_legal": {
                "description": "–ú–∏—Ç–Ω—ñ –¥–∞–Ω—ñ - –∑–∞–∫–æ–Ω–Ω—ñ –≤–∏–º–æ–≥–∏",
                "retention_period_days": 2555,  # 7 —Ä–æ–∫—ñ–≤
                "archive_after_days": 1095,  # 3 —Ä–æ–∫–∏ - –≤ –∞—Ä—Ö—ñ–≤
                "delete_after_days": 2555,  # 7 —Ä–æ–∫—ñ–≤ - –≤–∏–¥–∞–ª–µ–Ω–Ω—è
                "applies_to": ["customs_declarations", "customs_payments", "customs_certificates"],
            },
            "tax_legal": {
                "description": "–ü–æ–¥–∞—Ç–∫–æ–≤—ñ –¥–∞–Ω—ñ - –∑–∞–∫–æ–Ω–Ω—ñ –≤–∏–º–æ–≥–∏",
                "retention_period_days": 1825,  # 5 —Ä–æ–∫—ñ–≤
                "archive_after_days": 730,  # 2 —Ä–æ–∫–∏ - –≤ –∞—Ä—Ö—ñ–≤
                "delete_after_days": 1825,  # 5 —Ä–æ–∫—ñ–≤ - –≤–∏–¥–∞–ª–µ–Ω–Ω—è
                "applies_to": ["tax_declarations", "tax_payments", "tax_assessments"],
            },
            "osint_operational": {
                "description": "OSINT –¥–∞–Ω—ñ - –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω—ñ –ø–æ—Ç—Ä–µ–±–∏",
                "retention_period_days": 365,  # 1 —Ä—ñ–∫
                "archive_after_days": 90,  # 3 –º—ñ—Å—è—Ü—ñ - –≤ –∞—Ä—Ö—ñ–≤
                "delete_after_days": 365,  # 1 —Ä—ñ–∫ - –≤–∏–¥–∞–ª–µ–Ω–Ω—è
                "applies_to": ["telegram_messages", "web_scraping", "social_media"],
            },
            "ml_models": {
                "description": "ML –º–æ–¥–µ–ª—ñ —Ç–∞ –µ–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∏",
                "retention_period_days": 730,  # 2 —Ä–æ–∫–∏
                "archive_after_days": 180,  # 6 –º—ñ—Å—è—Ü—ñ–≤ - –≤ –∞—Ä—Ö—ñ–≤
                "delete_after_days": 730,  # 2 —Ä–æ–∫–∏ - –≤–∏–¥–∞–ª–µ–Ω–Ω—è
                "applies_to": ["ml_experiments", "model_artifacts", "training_data"],
            },
            "audit_logs": {
                "description": "–ê—É–¥–∏—Ç –ª–æ–≥–∏ - –±–µ–∑–ø–µ–∫–∞",
                "retention_period_days": 2555,  # 7 —Ä–æ–∫—ñ–≤
                "archive_after_days": 365,  # 1 —Ä—ñ–∫ - –≤ –∞—Ä—Ö—ñ–≤
                "delete_after_days": 2555,  # 7 —Ä–æ–∫—ñ–≤ - –≤–∏–¥–∞–ª–µ–Ω–Ω—è
                "applies_to": ["access_logs", "api_logs", "security_events"],
            },
        }

    def register_entity(self, entry: DataCatalogEntry) -> str:
        """–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è —Å—É—Ç–Ω–æ—Å—Ç—ñ –≤ –∫–∞—Ç–∞–ª–æ–∑—ñ"""
        self.catalog[entry.entity_id] = entry

        # –ó–∞–ø–∏—Å—É—î–º–æ lineage –ø–æ–¥—ñ—é
        lineage_event = DataLineageEvent(
            event_id=str(uuid.uuid4()),
            source_entity="data_governance",
            target_entity=entry.entity_id,
            operation="register",
            timestamp=datetime.now(),
            metadata={
                "entity_type": entry.entity_type,
                "classification": entry.classification.value,
                "pii_fields_count": len(entry.pii_fields),
            },
        )
        self.lineage_events.append(lineage_event)

        logger.info(f"‚úÖ Registered entity in catalog: {entry.entity_name}")
        return entry.entity_id

    def track_lineage(
        self,
        source_entity: str,
        target_entity: str,
        operation: str,
        metadata: Dict[str, Any] = None,
    ):
        """–í—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –ª—ñ–Ω—ñ—ó –¥–∞–Ω–∏—Ö"""
        event = DataLineageEvent(
            event_id=str(uuid.uuid4()),
            source_entity=source_entity,
            target_entity=target_entity,
            operation=operation,
            timestamp=datetime.now(),
            metadata=metadata or {},
        )
        self.lineage_events.append(event)

        logger.info(f"üìä Tracked lineage: {source_entity} ‚Üí {target_entity} ({operation})")

    def get_lineage_chain(
        self, entity_id: str, direction: str = "downstream"
    ) -> List[DataLineageEvent]:
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –ª–∞–Ω—Ü—é–∂–∫–∞ –ª—ñ–Ω—ñ—ó –¥–∞–Ω–∏—Ö"""
        chain = []

        if direction == "downstream":
            # –í–Ω–∏–∑ –ø–æ —Ç–µ—á—ñ—ó: —â–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ –∑ —Ü—ñ—î—ó —Å—É—Ç–Ω–æ—Å—Ç—ñ
            chain = [e for e in self.lineage_events if e.source_entity == entity_id]
        elif direction == "upstream":
            # –í–≥–æ—Ä—É –ø–æ —Ç–µ—á—ñ—ó: –∑ —á–æ–≥–æ —Å—Ç–≤–æ—Ä–µ–Ω–∞ —Ü—è —Å—É—Ç–Ω—ñ—Å—Ç—å
            chain = [e for e in self.lineage_events if e.target_entity == entity_id]
        else:
            # –û–±–∏–¥–≤—ñ –Ω–∞–ø—Ä—è–º–∫–∏
            chain = [
                e
                for e in self.lineage_events
                if e.source_entity == entity_id or e.target_entity == entity_id
            ]

        return sorted(chain, key=lambda x: x.timestamp)

    def mask_pii_data(self, data: Dict[str, Any], entity_type: str) -> Dict[str, Any]:
        """–ú–∞—Å–∫—É–≤–∞–Ω–Ω—è PII –¥–∞–Ω–∏—Ö"""
        if entity_type not in self.pii_registry:
            return data

        masked_data = data.copy()
        pii_fields = self.pii_registry[entity_type]

        for pii_field in pii_fields:
            # –ù–∞–≤—ñ–≥–∞—Ü—ñ—è –ø–æ –≤–∫–ª–∞–¥–µ–Ω–∏—Ö –ø–æ–ª—è—Ö (–Ω–∞–ø—Ä. "declarant.name")
            field_path = pii_field.field_path.split(".")
            current_obj = masked_data

            try:
                # –î–æ–π—Ç–∏ –¥–æ –±–∞—Ç—å–∫—ñ–≤—Å—å–∫–æ–≥–æ –æ–±'—î–∫—Ç–∞
                for i, path_part in enumerate(field_path[:-1]):
                    if path_part in current_obj:
                        current_obj = current_obj[path_part]
                    else:
                        break
                else:
                    # –ó–∞–º–∞—Å–∫—É–≤–∞—Ç–∏ –ø–æ–ª–µ
                    field_name = field_path[-1]
                    if field_name in current_obj:
                        original_value = current_obj[field_name]
                        current_obj[field_name] = pii_field.mask_pattern

                        logger.debug(f"üîí Masked PII field: {pii_field.field_path}")

            except Exception as e:
                logger.warning(f"‚ö†Ô∏è  Could not mask PII field {pii_field.field_path}: {e}")

        return masked_data

    def check_retention_compliance(self, entity_id: str) -> Dict[str, Any]:
        """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ—Ç—Ä–∏–º–∞–Ω–Ω—è retention –ø–æ–ª—ñ—Ç–∏–∫"""
        if entity_id not in self.catalog:
            return {"status": "error", "message": "Entity not found in catalog"}

        entity = self.catalog[entity_id]

        if not entity.retention_policy or entity.retention_policy not in self.retention_policies:
            return {"status": "warning", "message": "No retention policy assigned"}

        policy = self.retention_policies[entity.retention_policy]
        age_days = (datetime.now() - entity.created_at).days

        result = {
            "entity_id": entity_id,
            "entity_name": entity.entity_name,
            "policy": entity.retention_policy,
            "age_days": age_days,
            "status": "compliant",
            "actions": [],
        }

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –∞—Ä—Ö—ñ–≤—É–≤–∞–Ω–Ω—è
        if age_days >= policy["archive_after_days"]:
            result["actions"].append(
                {
                    "action": "archive",
                    "due_date": entity.created_at + timedelta(days=policy["archive_after_days"]),
                    "overdue": True,
                }
            )

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è
        if age_days >= policy["delete_after_days"]:
            result["actions"].append(
                {
                    "action": "delete",
                    "due_date": entity.created_at + timedelta(days=policy["delete_after_days"]),
                    "overdue": True,
                }
            )
            result["status"] = "action_required"

        return result

    def get_catalog_summary(self) -> Dict[str, Any]:
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–≤–µ–¥–µ–Ω–Ω—è –∫–∞—Ç–∞–ª–æ–≥—É"""
        total_entities = len(self.catalog)

        # –ì—Ä—É–ø—É–≤–∞–Ω–Ω—è –ø–æ —Ç–∏–ø–∞—Ö
        by_type = {}
        by_classification = {}
        pii_entities = 0

        for entity in self.catalog.values():
            # –ü–æ —Ç–∏–ø–∞—Ö
            if entity.entity_type not in by_type:
                by_type[entity.entity_type] = 0
            by_type[entity.entity_type] += 1

            # –ü–æ –∫–ª–∞—Å–∏—Ñ—ñ–∫–∞—Ü—ñ—ó
            if entity.classification.value not in by_classification:
                by_classification[entity.classification.value] = 0
            by_classification[entity.classification.value] += 1

            # PII –¥–∞–Ω—ñ
            if len(entity.pii_fields) > 0:
                pii_entities += 1

        # Lineage —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        lineage_operations = {}
        for event in self.lineage_events:
            if event.operation not in lineage_operations:
                lineage_operations[event.operation] = 0
            lineage_operations[event.operation] += 1

        return {
            "catalog": {
                "total_entities": total_entities,
                "by_type": by_type,
                "by_classification": by_classification,
                "pii_entities": pii_entities,
            },
            "lineage": {
                "total_events": len(self.lineage_events),
                "by_operation": lineage_operations,
            },
            "retention_policies": list(self.retention_policies.keys()),
            "pii_registries": list(self.pii_registry.keys()),
        }

    def get_pii_audit_report(self) -> Dict[str, Any]:
        """–ó–≤—ñ—Ç –∞—É–¥–∏—Ç—É PII –¥–∞–Ω–∏—Ö"""
        pii_summary = {}

        for registry_name, pii_fields in self.pii_registry.items():
            pii_summary[registry_name] = {
                "total_pii_fields": len(pii_fields),
                "by_type": {},
                "by_classification": {},
                "retention_days": {},
            }

            for pii_field in pii_fields:
                # –ü–æ —Ç–∏–ø–∞—Ö PII
                pii_type = pii_field.pii_type.value
                if pii_type not in pii_summary[registry_name]["by_type"]:
                    pii_summary[registry_name]["by_type"][pii_type] = 0
                pii_summary[registry_name]["by_type"][pii_type] += 1

                # –ü–æ –∫–ª–∞—Å–∏—Ñ—ñ–∫–∞—Ü—ñ—ó
                classification = pii_field.classification.value
                if classification not in pii_summary[registry_name]["by_classification"]:
                    pii_summary[registry_name]["by_classification"][classification] = 0
                pii_summary[registry_name]["by_classification"][classification] += 1

                # –ü–æ retention
                retention = pii_field.retention_days or 0
                if retention not in pii_summary[registry_name]["retention_days"]:
                    pii_summary[registry_name]["retention_days"][retention] = 0
                pii_summary[registry_name]["retention_days"][retention] += 1

        return {
            "pii_registries": pii_summary,
            "audit_timestamp": datetime.now().isoformat(),
            "total_pii_types": len(PIIType),
            "total_classification_levels": len(DataClassification),
        }


# Singleton instance
governance_manager = DataGovernanceManager()


async def get_governance_manager() -> DataGovernanceManager:
    """–û—Ç—Ä–∏–º–∞–Ω–Ω—è governance manager"""
    return governance_manager
