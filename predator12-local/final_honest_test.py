#!/usr/bin/env python3
"""
üîç –†–ï–ê–õ–¨–ù–ê –ü–ï–†–ï–í–Ü–†–ö–ê: –ß–ò –ê–ì–ï–ù–¢–ò –í–ò–ö–û–†–ò–°–¢–û–í–£–Æ–¢–¨ AI –ú–û–î–ï–õ–Ü
–ß–µ—Å–Ω–∏–π —Ç–µ—Å—Ç –±–µ–∑ —Ñ—ñ–∫—Ç–∏–≤–Ω–∏—Ö –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π
"""
import asyncio
import httpx
import json
import subprocess
import logging
import os
import glob

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

async def test_real_agent_ai_usage():
    """–†–µ–∞–ª—å–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è AI –º–æ–¥–µ–ª–µ–π –∞–≥–µ–Ω—Ç–∞–º–∏"""

    print("üîç –†–ï–ê–õ–¨–ù–ê –ü–ï–†–ï–í–Ü–†–ö–ê –í–ò–ö–û–†–ò–°–¢–ê–ù–ù–Ø AI –ú–û–î–ï–õ–ï–ô –ê–ì–ï–ù–¢–ê–ú–ò")
    print("="*80)

    results = {
        "model_sdk_accessible": False,
        "agents_can_connect": False,
        "agents_get_real_responses": False,
        "containers_healthy": 0,
        "containers_total": 0,
        "real_agents_found": 0,
        "agents_with_ai_code": 0
    }

    # 1. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ Model SDK
    print("üîå –ü–µ—Ä–µ–≤—ñ—Ä—è—é Model SDK...")
    try:
        async with httpx.AsyncClient(timeout=5.0) as client:
            response = await client.get("http://localhost:3010/health")
            if response.status_code == 200:
                results["model_sdk_accessible"] = True
                health_data = response.json()
                print(f"‚úÖ Model SDK –¥–æ—Å—Ç—É–ø–Ω–∏–π: {health_data.get('models_total', 'N/A')} –º–æ–¥–µ–ª–µ–π")

                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π
                models_response = await client.get("http://localhost:3010/v1/models")
                if models_response.status_code == 200:
                    models_data = models_response.json()
                    total_models = len(models_data.get('data', []))
                    print(f"üìä –î–æ—Å—Ç—É–ø–Ω–æ –º–æ–¥–µ–ª–µ–π —á–µ—Ä–µ–∑ API: {total_models}")
            else:
                print(f"‚ùå Model SDK –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π: HTTP {response.status_code}")
    except Exception as e:
        print(f"‚ùå Model SDK –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π: {str(e)}")

    # 2. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞–Ω—É –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ–≤
    print("\nüê≥ –ü–µ—Ä–µ–≤—ñ—Ä—è—é —Å—Ç–∞–Ω –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ–≤...")
    try:
        result = subprocess.run(['docker', 'ps', '--format', 'table {{.Names}}\t{{.Status}}'],
                              capture_output=True, text=True)

        if result.returncode == 0:
            lines = result.stdout.strip().split('\n')[1:]  # Skip header
            results["containers_total"] = len(lines)

            healthy_count = 0
            unhealthy_containers = []

            for line in lines:
                parts = line.split('\t')
                if len(parts) >= 2:
                    name = parts[0].strip()
                    status = parts[1].strip()

                    if 'healthy' in status or ('Up' in status and 'unhealthy' not in status and 'starting' not in status):
                        healthy_count += 1
                    else:
                        unhealthy_containers.append(f"{name}: {status}")

            results["containers_healthy"] = healthy_count
            print(f"üìä –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏: {healthy_count}/{len(lines)} –∑–¥–æ—Ä–æ–≤–∏—Ö")

            if unhealthy_containers:
                print("‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–Ω—ñ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏:")
                for container in unhealthy_containers[:5]:  # –ü–æ–∫–∞–∑—É—î–º–æ –ø–µ—Ä—à—ñ 5
                    print(f"  - {container}")
        else:
            print("‚ùå –ù–µ –º–æ–∂—É –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —Å—Ç–∞–Ω –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ–≤")

    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ–≤: {e}")

    # 3. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ä–µ–∞–ª—å–Ω–∏—Ö —Ñ–∞–π–ª—ñ–≤ –∞–≥–µ–Ω—Ç—ñ–≤
    print("\nüìÅ –®—É–∫–∞—é —Å–ø—Ä–∞–≤–∂–Ω—ñ —Ñ–∞–π–ª–∏ –∞–≥–µ–Ω—Ç—ñ–≤...")
    agent_files = find_real_agent_files()
    results["real_agents_found"] = len(agent_files)

    agents_with_ai = 0
    for agent_file in agent_files:
        if check_agent_has_ai_integration(agent_file):
            agents_with_ai += 1

    results["agents_with_ai_code"] = agents_with_ai
    print(f"üìã –ó–Ω–∞–π–¥–µ–Ω–æ –∞–≥–µ–Ω—Ç—ñ–≤: {len(agent_files)}")
    print(f"ü§ñ –ê–≥–µ–Ω—Ç—ñ–≤ –∑ AI –∫–æ–¥–æ–º: {agents_with_ai}")

    # 4. –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è Model SDK
    if results["model_sdk_accessible"]:
        print("\nüß™ –¢–µ—Å—Ç—É—é —Ä–µ–∞–ª—å–Ω—ñ –∑–∞–ø–∏—Ç–∏ –¥–æ Model SDK...")
        ai_test_results = await test_model_sdk_responses()
        results.update(ai_test_results)

    # 5. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ª–æ–≥—ñ–≤ –∞–≥–µ–Ω—Ç—ñ–≤
    print("\nüìã –ê–Ω–∞–ª—ñ–∑—É—é –ª–æ–≥–∏ –∞–≥–µ–Ω—Ç—ñ–≤...")
    agent_activity = await check_agent_logs()

    # 6. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
    print("\n‚öôÔ∏è –ü–µ—Ä–µ–≤—ñ—Ä—è—é –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é —Å–∏—Å—Ç–µ–º–∏...")
    config_check = check_system_configuration()

    # 7. –§—ñ–Ω–∞–ª—å–Ω—ñ –≤–∏—Å–Ω–æ–≤–∫–∏
    print("\n" + "="*80)
    print("üìã –î–ï–¢–ê–õ–¨–ù–Ü –†–ï–ó–£–õ–¨–¢–ê–¢–ò")
    print("="*80)

    print(f"üîå Model SDK: {'‚úÖ –ü—Ä–∞—Ü—é—î' if results['model_sdk_accessible'] else '‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π'}")
    print(f"üê≥ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏: {results['containers_healthy']}/{results['containers_total']} –∑–¥–æ—Ä–æ–≤–∏—Ö ({(results['containers_healthy']/results['containers_total']*100):.1f}%)")
    print(f"üìÅ –ê–≥–µ–Ω—Ç–∏ –∑–Ω–∞–π–¥–µ–Ω–æ: {results['real_agents_found']}")
    print(f"ü§ñ –ê–≥–µ–Ω—Ç–∏ –∑ AI –∫–æ–¥–æ–º: {results['agents_with_ai_code']}")

    if results.get("agents_can_connect"):
        print("‚úÖ –ê–≥–µ–Ω—Ç–∏ –º–æ–∂—É—Ç—å –ø—ñ–¥–∫–ª—é—á–∞—Ç–∏—Å—å –¥–æ Model SDK")
    else:
        print("‚ùå –ê–≥–µ–Ω—Ç–∏ –ù–ï –º–æ–∂—É—Ç—å –ø—ñ–¥–∫–ª—é—á–∞—Ç–∏—Å—å –¥–æ Model SDK")

    if results.get("agents_get_real_responses"):
        print("‚úÖ –ê–≥–µ–Ω—Ç–∏ –æ—Ç—Ä–∏–º—É—é—Ç—å –†–ï–ê–õ–¨–ù–Ü AI –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ")
    else:
        print("‚ùå –ê–≥–µ–Ω—Ç–∏ –æ—Ç—Ä–∏–º—É—é—Ç—å —Ç—ñ–ª—å–∫–∏ –î–ï–ú–û/MOCK –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ")

    if agent_activity.get("real_ai_usage"):
        print("‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ –¥–æ–∫–∞–∑–∏ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è AI –≤ –ª–æ–≥–∞—Ö")
    else:
        print("‚ùå –ù–µ–º–∞—î –¥–æ–∫–∞–∑—ñ–≤ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è AI –≤ –ª–æ–≥–∞—Ö")

    # –ó–∞–≥–∞–ª—å–Ω–∏–π –≤–∏—Å–Ω–æ–≤–æ–∫
    print("\nüéØ –ó–ê–ì–ê–õ–¨–ù–ò–ô –í–ò–°–ù–û–í–û–ö:")

    # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –∑–∞–≥–∞–ª—å–Ω–æ–≥–æ —Å–∫–æ—Ä—É
    score = 0
    max_score = 6

    if results["model_sdk_accessible"]: score += 1
    if results["containers_healthy"] / results["containers_total"] > 0.7: score += 1
    if results["real_agents_found"] > 0: score += 1
    if results["agents_with_ai_code"] > 0: score += 1
    if results.get("agents_can_connect"): score += 1
    if results.get("agents_get_real_responses"): score += 1

    print(f"üìä –ó–∞–≥–∞–ª—å–Ω–∏–π —Å–∫–æ—Ä —Å–∏—Å—Ç–µ–º–∏: {score}/{max_score} ({score/max_score*100:.1f}%)")

    if score >= 5:
        print("‚úÖ –°–ò–°–¢–ï–ú–ê –ü–û–í–ù–Ü–°–¢–Æ –§–£–ù–ö–¶–Ü–û–ù–ê–õ–¨–ù–ê: –ê–≥–µ–Ω—Ç–∏ —Ä–µ–∞–ª—å–Ω–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—Ç—å AI –º–æ–¥–µ–ª—ñ")
    elif score >= 3:
        print("‚ö†Ô∏è –°–ò–°–¢–ï–ú–ê –ß–ê–°–¢–ö–û–í–û –ü–†–ê–¶–Æ–Ñ: –ê–≥–µ–Ω—Ç–∏ –ø—ñ–¥–∫–ª—é—á–µ–Ω—ñ, –∞–ª–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—Ç—å –¥–µ–º–æ")
    elif score >= 1:
        print("üîß –°–ò–°–¢–ï–ú–ê –ü–û–¢–†–ï–ë–£–Ñ –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø: –û—Å–Ω–æ–≤–Ω—ñ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∏ –ø—Ä–∞—Ü—é—é—Ç—å")
    else:
        print("‚ùå –°–ò–°–¢–ï–ú–ê –ù–ï –§–£–ù–ö–¶–Ü–û–ù–ê–õ–¨–ù–ê: –ê–≥–µ–Ω—Ç–∏ –Ω–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—Ç—å AI –º–æ–¥–µ–ª—ñ")

    return results

def find_real_agent_files():
    """–ó–Ω–∞—Ö–æ–¥–∏—Ç—å —Å–ø—Ä–∞–≤–∂–Ω—ñ —Ñ–∞–π–ª–∏ –∞–≥–µ–Ω—Ç—ñ–≤ –≤ —Å–∏—Å—Ç–µ–º—ñ"""
    agent_files = []

    # –®—É–∫–∞—î–º–æ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—è—Ö –∞–≥–µ–Ω—Ç—ñ–≤
    search_paths = [
        "/Users/dima/Documents/Predator11/agents/**/*.py",
        "/Users/dima/Documents/Predator11/backend/app/agents/**/*.py"
    ]

    for pattern in search_paths:
        files = glob.glob(pattern, recursive=True)
        for file in files:
            if os.path.getsize(file) > 1000:  # –§–∞–π–ª–∏ –±—ñ–ª—å—à–µ 1KB
                agent_files.append(file)

    return agent_files

def check_agent_has_ai_integration(agent_file):
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ –º–∞—î –∞–≥–µ–Ω—Ç —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—é –∑ AI"""
    try:
        with open(agent_file, 'r', encoding='utf-8') as f:
            content = f.read()

        # –®—É–∫–∞—î–º–æ –æ–∑–Ω–∞–∫–∏ AI —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—ó
        ai_indicators = [
            'model_sdk', 'MODEL_SDK', 'chat_completion', 'openai', 'anthropic',
            'gpt-', 'claude-', 'llama', 'ai_model', 'LLM', 'language_model',
            'http://localhost:3010', 'v1/chat/completions'
        ]

        return any(indicator in content for indicator in ai_indicators)

    except Exception:
        return False

async def test_model_sdk_responses():
    """–¢–µ—Å—Ç—É—î —Ä—ñ–∑–Ω—ñ —Ç–∏–ø–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π –≤—ñ–¥ Model SDK"""
    results = {
        "agents_can_connect": False,
        "agents_get_real_responses": False,
        "demo_responses_detected": False,
        "error_responses": 0
    }

    test_cases = [
        {"model": "gpt-4", "content": "–ü—Ä–∏–≤—ñ—Ç, —Ü–µ —Ä–µ–∞–ª—å–Ω–∏–π —Ç–µ—Å—Ç"},
        {"model": "claude-3", "content": "–ü—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–π –¥–∞–Ω—ñ —Å–∏—Å—Ç–µ–º–∏"},
        {"model": "llama-3.1-70b", "content": "–ù–∞–¥–∞–π —Ç–µ—Ö–Ω—ñ—á–Ω—ñ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó"},
        {"model": "nonexistent-model", "content": "–¢–µ—Å—Ç –Ω–µ—ñ—Å–Ω—É—é—á–æ—ó –º–æ–¥–µ–ª—ñ"}
    ]

    try:
        async with httpx.AsyncClient(timeout=10.0) as client:
            for i, test_case in enumerate(test_cases):
                try:
                    test_request = {
                        "model": test_case["model"],
                        "messages": [{"role": "user", "content": test_case["content"]}],
                        "max_tokens": 100
                    }

                    response = await client.post("http://localhost:3010/v1/chat/completions",
                                               json=test_request)

                    if response.status_code == 200:
                        data = response.json()
                        if "choices" in data and len(data["choices"]) > 0:
                            content = data["choices"][0]["message"]["content"].lower()

                            results["agents_can_connect"] = True

                            # –ê–Ω–∞–ª—ñ–∑—É—î–º–æ —Ç–∏–ø –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
                            if any(word in content for word in ["demo", "mock", "fallback", "–∑–∞–≥–ª—É—à–∫–∞"]):
                                results["demo_responses_detected"] = True
                                print(f"  Test {i+1}: –î–ï–ú–û –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ {test_case['model']}")
                            elif "api —Ç–∏–º—á–∞—Å–æ–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π" in content or "error" in content:
                                results["error_responses"] += 1
                                print(f"  Test {i+1}: –ü–û–ú–ò–õ–ö–ê –≤—ñ–¥ {test_case['model']}")
                            else:
                                results["agents_get_real_responses"] = True
                                print(f"  Test {i+1}: –†–ï–ê–õ–¨–ù–ê –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ {test_case['model']}")
                    else:
                        results["error_responses"] += 1
                        print(f"  Test {i+1}: HTTP –ø–æ–º–∏–ª–∫–∞ {response.status_code}")

                except Exception as e:
                    results["error_responses"] += 1
                    print(f"  Test {i+1}: –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Ç—É - {str(e)[:50]}...")

    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è Model SDK: {e}")

    return results

async def check_agent_logs():
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î –ª–æ–≥–∏ –∞–≥–µ–Ω—Ç—ñ–≤ –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è AI"""
    results = {
        "real_ai_usage": False,
        "mock_usage_detected": False,
        "agents_checked": 0,
        "ai_requests_found": 0
    }

    # –°–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ–≤ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
    agent_containers = [
        "predator11-scheduler-1",
        "predator11-celery-worker-1",
        "predator11-worker-1",
        "predator11-backend-1"
    ]

    for container in agent_containers:
        try:
            result = subprocess.run(['docker', 'logs', '--tail', '50', container],
                                  capture_output=True, text=True, timeout=10)

            if result.returncode == 0:
                logs = result.stdout.lower()
                results["agents_checked"] += 1

                # –®—É–∫–∞—î–º–æ –æ–∑–Ω–∞–∫–∏ AI –∑–∞–ø–∏—Ç—ñ–≤
                ai_patterns = ['gpt-4', 'claude', 'llama', '/v1/chat/completions', 'model_sdk', 'ai completion']
                mock_patterns = ['mock', 'demo', 'fallback', 'test response']

                ai_found = sum(1 for pattern in ai_patterns if pattern in logs)
                mock_found = sum(1 for pattern in mock_patterns if pattern in logs)

                if ai_found > 0:
                    results["ai_requests_found"] += ai_found
                    if mock_found == 0:
                        results["real_ai_usage"] = True

                if mock_found > 0:
                    results["mock_usage_detected"] = True

                print(f"  {container}: AI patterns: {ai_found}, Mock patterns: {mock_found}")

        except Exception as e:
            print(f"  {container}: –ù–µ –º–æ–∂—É –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –ª–æ–≥–∏ - {str(e)[:30]}...")
            continue

    return results

def check_system_configuration():
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é —Å–∏—Å—Ç–µ–º–∏"""
    config_issues = []

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≤–∞–∂–ª–∏–≤—ñ —Ñ–∞–π–ª–∏ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
    config_files = [
        "/Users/dima/Documents/Predator11/docker-compose.yml",
        "/Users/dima/Documents/Predator11/.env",
        "/Users/dima/Documents/Predator11/backend/app/agents/specialized_model_router.py"
    ]

    for file_path in config_files:
        if not os.path.exists(file_path):
            config_issues.append(f"–í—ñ–¥—Å—É—Ç–Ω—ñ–π —Ñ–∞–π–ª: {file_path}")

    if config_issues:
        print("‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∏ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó:")
        for issue in config_issues:
            print(f"  - {issue}")
    else:
        print("‚úÖ –û—Å–Ω–æ–≤–Ω—ñ —Ñ–∞–π–ª–∏ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó –Ω–∞ –º—ñ—Å—Ü—ñ")

    return len(config_issues) == 0

if __name__ == "__main__":
    asyncio.run(test_real_agent_ai_usage())
