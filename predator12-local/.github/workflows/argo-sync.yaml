# ==========================================
# ARGOCD AUTO-SYNC WORKFLOW
# Automated GitOps Synchronization
# ==========================================

name: ArgoCD Auto-Sync

on:
  push:
    branches: [main]
    paths:
      - 'helm/**'
      - 'infra/argocd/**'
      - 'infra/k8s/**'
  workflow_dispatch:
    inputs:
      app_name:
        description: 'Application to sync (or "all")'
        required: true
        default: 'all'
      prune:
        description: 'Prune resources'
        required: false
        default: 'true'
        type: boolean
      force:
        description: 'Force sync'
        required: false
        default: 'false'
        type: boolean

env:
  ARGOCD_VERSION: 'v2.9.3'

jobs:
  validate:
    name: Validate Manifests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.4'

      - name: Validate Kubernetes Manifests
        run: |
          find infra/k8s -name "*.yaml" -exec kubectl --dry-run=client apply -f {} \;

      - name: Setup Helm
        uses: azure/setup-helm@v3
        with:
          version: 'v3.13.3'

      - name: Validate Helm Charts
        run: |
          for chart in helm/charts/*/; do
            echo "Validating $chart"
            helm lint "$chart"
            helm template test "$chart" --dry-run
          done

      - name: Setup Kustomize
        run: |
          curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh" | bash
          sudo mv kustomize /usr/local/bin/

      - name: Validate Kustomize
        run: |
          kustomize build infra/argocd/base > /dev/null
          kustomize build infra/argocd/overlays/staging > /dev/null
          kustomize build infra/argocd/overlays/production > /dev/null

  sync:
    name: Sync to ArgoCD
    runs-on: ubuntu-latest
    needs: validate
    environment:
      name: production
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install ArgoCD CLI
        run: |
          curl -sSL -o argocd https://github.com/argoproj/argo-cd/releases/download/${{ env.ARGOCD_VERSION }}/argocd-linux-amd64
          chmod +x argocd
          sudo mv argocd /usr/local/bin/

      - name: Login to ArgoCD
        env:
          ARGOCD_SERVER: ${{ secrets.ARGOCD_SERVER }}
          ARGOCD_AUTH_TOKEN: ${{ secrets.ARGOCD_AUTH_TOKEN }}
        run: |
          argocd login $ARGOCD_SERVER \
            --auth-token=$ARGOCD_AUTH_TOKEN \
            --grpc-web

      - name: Get Application List
        id: apps
        run: |
          if [ "${{ github.event.inputs.app_name }}" = "all" ] || [ -z "${{ github.event.inputs.app_name }}" ]; then
            APPS=$(argocd app list -o name | grep predator12)
          else
            APPS="${{ github.event.inputs.app_name }}"
          fi
          echo "apps=$APPS" >> $GITHUB_OUTPUT
          echo "Applications to sync: $APPS"

      - name: Sync Applications
        env:
          PRUNE: ${{ github.event.inputs.prune || 'true' }}
          FORCE: ${{ github.event.inputs.force || 'false' }}
        run: |
          SYNC_OPTS=""
          if [ "$PRUNE" = "true" ]; then
            SYNC_OPTS="$SYNC_OPTS --prune"
          fi
          if [ "$FORCE" = "true" ]; then
            SYNC_OPTS="$SYNC_OPTS --force"
          fi

          for app in ${{ steps.apps.outputs.apps }}; do
            echo "Syncing $app..."
            argocd app sync $app $SYNC_OPTS || echo "Failed to sync $app"
          done

      - name: Wait for Sync Completion
        run: |
          for app in ${{ steps.apps.outputs.apps }}; do
            echo "Waiting for $app..."
            argocd app wait $app --timeout 600 || echo "Timeout waiting for $app"
          done

      - name: Get Application Status
        id: status
        run: |
          STATUS=""
          for app in ${{ steps.apps.outputs.apps }}; do
            APP_STATUS=$(argocd app get $app -o json | jq -r '.status.health.status')
            SYNC_STATUS=$(argocd app get $app -o json | jq -r '.status.sync.status')
            STATUS="$STATUS\n$app: Health=$APP_STATUS, Sync=$SYNC_STATUS"
          done
          echo "status<<EOF" >> $GITHUB_OUTPUT
          echo -e "$STATUS" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Display Status
        run: |
          echo "Application Status:"
          echo "${{ steps.status.outputs.status }}"

  health-check:
    name: Post-Sync Health Check
    runs-on: ubuntu-latest
    needs: sync
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install ArgoCD CLI
        run: |
          curl -sSL -o argocd https://github.com/argoproj/argo-cd/releases/download/${{ env.ARGOCD_VERSION }}/argocd-linux-amd64
          chmod +x argocd
          sudo mv argocd /usr/local/bin/

      - name: Login to ArgoCD
        env:
          ARGOCD_SERVER: ${{ secrets.ARGOCD_SERVER }}
          ARGOCD_AUTH_TOKEN: ${{ secrets.ARGOCD_AUTH_TOKEN }}
        run: |
          argocd login $ARGOCD_SERVER \
            --auth-token=$ARGOCD_AUTH_TOKEN \
            --grpc-web

      - name: Check Application Health
        run: |
          FAILED_APPS=""
          for app in $(argocd app list -o name | grep predator12); do
            HEALTH=$(argocd app get $app -o json | jq -r '.status.health.status')
            if [ "$HEALTH" != "Healthy" ]; then
              FAILED_APPS="$FAILED_APPS $app"
              echo "❌ $app is not healthy (status: $HEALTH)"
              argocd app get $app
            else
              echo "✅ $app is healthy"
            fi
          done

          if [ -n "$FAILED_APPS" ]; then
            echo "Failed applications: $FAILED_APPS"
            exit 1
          fi

      - name: Run Smoke Tests
        run: |
          # Add your smoke test commands here
          echo "Running smoke tests..."
          # curl -f http://your-api-endpoint/health || exit 1

  rollback:
    name: Rollback on Failure
    runs-on: ubuntu-latest
    needs: health-check
    if: failure()
    steps:
      - name: Install ArgoCD CLI
        run: |
          curl -sSL -o argocd https://github.com/argoproj/argo-cd/releases/download/${{ env.ARGOCD_VERSION }}/argocd-linux-amd64
          chmod +x argocd
          sudo mv argocd /usr/local/bin/

      - name: Login to ArgoCD
        env:
          ARGOCD_SERVER: ${{ secrets.ARGOCD_SERVER }}
          ARGOCD_AUTH_TOKEN: ${{ secrets.ARGOCD_AUTH_TOKEN }}
        run: |
          argocd login $ARGOCD_SERVER \
            --auth-token=$ARGOCD_AUTH_TOKEN \
            --grpc-web

      - name: Rollback Applications
        run: |
          for app in $(argocd app list -o name | grep predator12); do
            echo "Rolling back $app..."
            argocd app rollback $app || echo "Failed to rollback $app"
          done

  notify:
    name: Send Notifications
    runs-on: ubuntu-latest
    needs: [sync, health-check]
    if: always()
    steps:
      - name: Send Slack Notification
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: |
            ArgoCD Sync: ${{ job.status }}
            Branch: ${{ github.ref }}
            Commit: ${{ github.sha }}
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        if: always()

      - name: Create GitHub Deployment
        uses: chrnorm/deployment-action@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          environment: production
          state: ${{ job.status }}
