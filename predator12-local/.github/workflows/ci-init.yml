# ==========================================
# CI/CD Pipeline - Production Grade
# GitHub Actions Workflow
# ==========================================

name: CI/CD Pipeline

on:
  push:
    branches: [main, develop, staging]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.github/**'
  pull_request:
    branches: [main, develop, staging]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - production

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '22'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

# ========== JOBS ==========
jobs:
  # ========== PRE-COMMIT CHECKS ==========
  pre-commit:
    name: Pre-commit Checks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install pre-commit
        run: pip install pre-commit

      - name: Run pre-commit
        run: pre-commit run --all-files

  # ========== SECURITY SCAN ==========
  security:
    name: Security Scanning
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Run Gitleaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Run Bandit
        run: |
          pip install bandit
          bandit -r backend/ agents/ -ll -f json -o bandit-report.json || true

      - name: Run pip-audit
        run: |
          pip install pip-audit
          pip-audit -r requirements.txt --format json --output pip-audit.json || true

      - name: Upload Security Reports
        uses: actions/upload-artifact@v4
        with:
          name: security-reports
          path: |
            bandit-report.json
            pip-audit.json

  # ========== BACKEND TESTS ==========
  backend-test:
    name: Backend Tests
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_DB: predator12_test
          POSTGRES_USER: predator12
          POSTGRES_PASSWORD: test_password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 3s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt

      - name: Run Pytest
        env:
          DATABASE_URL: postgresql://predator12:test_password@localhost:5432/predator12_test
          REDIS_URL: redis://localhost:6379/0
        run: |
          pytest backend/tests/ \
            --cov=backend \
            --cov-report=xml \
            --cov-report=html \
            --junitxml=pytest-report.xml \
            -v

      - name: Upload Coverage
        uses: codecov/codecov-action@v3
        with:
          files: ./coverage.xml
          flags: backend
          name: backend-coverage

      - name: Upload Test Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: backend-test-results
          path: |
            pytest-report.xml
            htmlcov/

  # ========== FRONTEND TESTS ==========
  frontend-test:
    name: Frontend Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        working-directory: frontend
        run: npm ci

      - name: Run ESLint
        working-directory: frontend
        run: npm run lint

      - name: Run Tests
        working-directory: frontend
        run: npm test -- --coverage --watchAll=false

      - name: Upload Coverage
        uses: codecov/codecov-action@v3
        with:
          files: ./frontend/coverage/lcov.info
          flags: frontend
          name: frontend-coverage

  # ========== BUILD & PUSH IMAGES ==========
  build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [pre-commit, security, backend-test, frontend-test]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/staging')
    permissions:
      contents: read
      packages: write
    strategy:
      matrix:
        component: [backend, frontend, agents]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.component }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: ./${{ matrix.component }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # ========== HELM LINT & PACKAGE ==========
  helm:
    name: Helm Chart Validation
    runs-on: ubuntu-latest
    needs: [build]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/staging')
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Helm
        uses: azure/setup-helm@v3
        with:
          version: 'v3.13.3'

      - name: Lint Helm Charts
        run: |
          helm lint helm/charts/backend/
          helm lint helm/charts/frontend/
          helm lint helm/charts/agents/

      - name: Package Helm Charts
        run: |
          mkdir -p helm-packages
          helm package helm/charts/backend/ -d helm-packages/
          helm package helm/charts/frontend/ -d helm-packages/
          helm package helm/charts/agents/ -d helm-packages/

      - name: Upload Helm Packages
        uses: actions/upload-artifact@v4
        with:
          name: helm-charts
          path: helm-packages/*.tgz

  # ========== ARGOCD SYNC ==========
  argocd-sync:
    name: ArgoCD Sync
    runs-on: ubuntu-latest
    needs: [helm]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment:
      name: ${{ github.event.inputs.environment || 'staging' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install ArgoCD CLI
        run: |
          curl -sSL -o argocd https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
          chmod +x argocd
          sudo mv argocd /usr/local/bin/

      - name: Login to ArgoCD
        env:
          ARGOCD_SERVER: ${{ secrets.ARGOCD_SERVER }}
          ARGOCD_AUTH_TOKEN: ${{ secrets.ARGOCD_AUTH_TOKEN }}
        run: |
          argocd login $ARGOCD_SERVER \
            --auth-token=$ARGOCD_AUTH_TOKEN \
            --grpc-web

      - name: Sync Applications
        run: |
          argocd app sync predator12-backend --prune
          argocd app sync predator12-frontend --prune
          argocd app sync predator12-agents --prune

      - name: Wait for Sync
        run: |
          argocd app wait predator12-backend --timeout 600
          argocd app wait predator12-frontend --timeout 600
          argocd app wait predator12-agents --timeout 600

  # ========== SMOKE TESTS ==========
  smoke-tests:
    name: Smoke Tests
    runs-on: ubuntu-latest
    needs: [argocd-sync]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Run Smoke Tests
        env:
          API_URL: ${{ secrets.API_URL }}
        run: |
          pip install requests pytest
          pytest smoke_tests/ -v --tb=short

  # ========== NOTIFICATION ==========
  notify:
    name: Send Notifications
    runs-on: ubuntu-latest
    needs: [smoke-tests]
    if: always()
    steps:
      - name: Send Slack Notification
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: 'Deployment ${{ job.status }}'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        if: always()
