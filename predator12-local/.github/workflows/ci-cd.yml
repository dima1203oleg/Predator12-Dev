name: CI/CD Pipeline - Build and Deploy

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: predator11

jobs:
  # ================== BUILD & TEST ==================
  build-and-test:
    runs-on: ubuntu-latest
    outputs:
      backend-image: ${{ steps.meta-backend.outputs.tags }}
      frontend-image: ${{ steps.meta-frontend.outputs.tags }}
      agents-image: ${{ steps.meta-agents.outputs.tags }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest flake8 black isort safety bandit
        
    - name: Install Node.js dependencies
      run: |
        cd frontend
        npm ci
        
    # ================== CODE QUALITY CHECKS ==================
    - name: Run Python linting
      run: |
        flake8 backend/ --count --select=E9,F63,F7,F82 --show-source --statistics
        black --check backend/
        isort --check-only backend/
        
    - name: Run JavaScript/TypeScript linting
      run: |
        cd frontend
        npm run lint
        npm run type-check
        
    - name: Security scan - Python dependencies
      run: |
        safety check --json --output safety-report.json || true
        bandit -r backend/ -f json -o bandit-report.json || true
        
    - name: Security scan - Node.js dependencies
      run: |
        cd frontend
        npm audit --audit-level=high
        
    # ================== UNIT TESTS ==================
    - name: Run Python tests
      run: |
        cd backend
        pytest --cov=app --cov-report=xml --cov-report=html
        
    - name: Run Frontend tests
      run: |
        cd frontend
        npm run test:ci
        
    # ================== DOCKER BUILD ==================
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata for Backend
      id: meta-backend
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/backend
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: Extract metadata for Frontend
      id: meta-frontend
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/frontend
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: Extract metadata for Agents
      id: meta-agents
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/agents
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push Backend image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        push: true
        tags: ${{ steps.meta-backend.outputs.tags }}
        labels: ${{ steps.meta-backend.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Build and push Frontend image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        push: true
        tags: ${{ steps.meta-frontend.outputs.tags }}
        labels: ${{ steps.meta-frontend.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Build and push Agents image
      uses: docker/build-push-action@v5
      with:
        context: ./agents
        push: true
        tags: ${{ steps.meta-agents.outputs.tags }}
        labels: ${{ steps.meta-agents.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    # ================== SECURITY SCANNING ==================
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ steps.meta-backend.outputs.tags }}
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
        
    # ================== ARTIFACTS ==================
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results
        path: |
          backend/htmlcov/
          frontend/coverage/
          safety-report.json
          bandit-report.json

  # ================== DEPLOY TO STAGING ==================
  deploy-staging:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: Checkout deployment manifests
      uses: actions/checkout@v4
      with:
        repository: predator11/predator11-deployments
        token: ${{ secrets.DEPLOYMENT_TOKEN }}
        path: deployments
        
    - name: Update staging manifests
      run: |
        cd deployments
        # Update image tags in staging values.yaml
        sed -i "s|tag: .*|tag: \"${{ github.sha }}\"|g" environments/staging/values.yaml
        
    - name: Commit and push changes
      run: |
        cd deployments
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add environments/staging/values.yaml
        git commit -m "Update staging images to ${{ github.sha }}" || exit 0
        git push

  # ================== INTEGRATION TESTS ==================
  integration-tests:
    needs: deploy-staging
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install test dependencies
      run: |
        pip install pytest requests python-dotenv
        
    - name: Wait for staging deployment
      run: |
        sleep 120  # Wait for ArgoCD to deploy
        
    - name: Run integration tests
      env:
        STAGING_URL: https://api-staging.predator11.com
        TEST_USER_EMAIL: ${{ secrets.TEST_USER_EMAIL }}
        TEST_USER_PASSWORD: ${{ secrets.TEST_USER_PASSWORD }}
      run: |
        cd tests/integration
        pytest -v --tb=short

  # ================== DEPLOY TO PRODUCTION ==================
  deploy-production:
    needs: [build-and-test, integration-tests]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout deployment manifests
      uses: actions/checkout@v4
      with:
        repository: predator11/predator11-deployments
        token: ${{ secrets.DEPLOYMENT_TOKEN }}
        path: deployments
        
    - name: Update production manifests
      run: |
        cd deployments
        # Update image tags in production values.yaml
        sed -i "s|tag: .*|tag: \"${{ github.sha }}\"|g" environments/production/values.yaml
        
    - name: Commit and push changes
      run: |
        cd deployments
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add environments/production/values.yaml
        git commit -m "Deploy to production: ${{ github.sha }}" || exit 0
        git push
        
    - name: Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ github.run_number }}
        release_name: Release v${{ github.run_number }}
        body: |
          Automated production deployment
          
          Changes in this release:
          ${{ github.event.head_commit.message }}
          
          Docker Images:
          - Backend: ${{ needs.build-and-test.outputs.backend-image }}
          - Frontend: ${{ needs.build-and-test.outputs.frontend-image }}
          - Agents: ${{ needs.build-and-test.outputs.agents-image }}
        draft: false
        prerelease: false

  # ================== NOTIFICATIONS ==================
  notify:
    needs: [deploy-production]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Notify Slack on success
      if: success()
      uses: 8398a7/action-slack@v3
      with:
        status: success
        channel: '#deployments'
        text: '✅ Production deployment successful!'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        
    - name: Notify Slack on failure
      if: failure()
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        channel: '#deployments'
        text: '❌ Production deployment failed!'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
