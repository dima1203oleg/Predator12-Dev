#!/usr/bin/env python3
"""
üöÄ –ü–û–í–ù–ò–ô –ó–ê–ü–£–°–ö PREDATOR ANALYTICS NEXUS CORE V2.0
–°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ —Å–∞–º–æ–≤–¥–æ—Å–∫–æ–Ω–∞–ª–µ–Ω–Ω—è —Ç–∞ –±—ñ–∑–Ω–µ—Å-–∞–Ω–∞–ª—ñ—Ç–∏–∫–∏
"""

import subprocess
import time
import requests
import json
from datetime import datetime
import webbrowser
import os

class NexusLauncher:
    """–ó–∞–ø—É—Å–∫ —Ç–∞ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Å—Ç–µ–º–∏ Nexus"""
    
    def __init__(self):
        self.services = {
            'frontend': {'port': 3001, 'name': 'üåê Web Interface'},
            'backend': {'port': 8000, 'name': 'üîß Backend API'},
            'grafana': {'port': 3001, 'name': 'üìä Grafana Dashboards'},
            'prometheus': {'port': 9090, 'name': 'üìà Prometheus Metrics'},
            'opensearch-dashboards': {'port': 5601, 'name': 'üîç OpenSearch'},
            'keycloak': {'port': 8080, 'name': 'üîê Authentication'}
        }
        
    def print_header(self):
        """–í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑–∞–≥–æ–ª–æ–≤–∫–∞"""
        print("=" * 80)
        print("üöÄ PREDATOR ANALYTICS NEXUS CORE V2.0")
        print("   –°–∏—Å—Ç–µ–º–∞ –±–µ–∑–ø–µ—Ä–µ—Ä–≤–Ω–æ–≥–æ —Å–∞–º–æ–≤–¥–æ—Å–∫–æ–Ω–∞–ª–µ–Ω–Ω—è —Ç–∞ –±—ñ–∑–Ω–µ—Å-–∞–Ω–∞–ª—ñ—Ç–∏–∫–∏")
        print("=" * 80)
        print(f"üìÖ –ó–∞–ø—É—Å–∫: {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}")
        print("üë®‚Äçüíª –†–µ–∂–∏–º: Production Ready")
        print("ü§ñ –ê–≥–µ–Ω—Ç—ñ–≤: 26 –∑ —Å–∫–ª–∞–¥–Ω–æ—é –ª–æ–≥—ñ–∫–æ—é")
        print("üéØ –ú–æ–¥–µ–ª–µ–π: 21 –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∏—Ö")
        print("=" * 80)
        print()
        
    def check_docker(self):
        """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ Docker"""
        print("üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ Docker...")
        try:
            result = subprocess.run(['docker', '--version'], 
                                  capture_output=True, text=True, check=True)
            print(f"   ‚úÖ Docker: {result.stdout.strip()}")
            return True
        except (subprocess.CalledProcessError, FileNotFoundError):
            print("   ‚ùå Docker –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∞–±–æ –Ω–µ –∑–∞–ø—É—â–µ–Ω–æ")
            print("   üìã –ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞–ø—É—Å—Ç—ñ—Ç—å Docker Desktop")
            return False
            
    def start_services(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å—ñ—Ö —Å–µ—Ä–≤—ñ—Å—ñ–≤"""
        print("üê≥ –ó–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ–≤...")
        
        try:
            # –ó—É–ø–∏–Ω–∫–∞ —Å—Ç–∞—Ä–∏—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ–≤
            print("   üõë –ó—É–ø–∏–Ω–∫–∞ —Å—Ç–∞—Ä–∏—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ–≤...")
            subprocess.run(['docker-compose', 'down'], 
                          capture_output=True, check=False)
            
            # –ó–∞–ø—É—Å–∫ –Ω–æ–≤–∏—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ–≤
            print("   üöÄ –ó–∞–ø—É—Å–∫ –Ω–æ–≤–∏—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ–≤...")
            result = subprocess.run(['docker-compose', 'up', '-d'], 
                                  capture_output=True, text=True, check=True)
            
            if result.returncode == 0:
                print("   ‚úÖ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏ –∑–∞–ø—É—â–µ–Ω—ñ —É—Å–ø—ñ—à–Ω–æ")
                return True
            else:
                print(f"   ‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É: {result.stderr}")
                return False
                
        except subprocess.CalledProcessError as e:
            print(f"   ‚ùå –ü–æ–º–∏–ª–∫–∞ Docker Compose: {e}")
            return False
            
    def wait_for_services(self, timeout=180):
        """–û—á—ñ–∫—É–≤–∞–Ω–Ω—è –∑–∞–ø—É—Å–∫—É —Å–µ—Ä–≤—ñ—Å—ñ–≤"""
        print(f"‚è≥ –û—á—ñ–∫—É–≤–∞–Ω–Ω—è –∑–∞–ø—É—Å–∫—É —Å–µ—Ä–≤—ñ—Å—ñ–≤ ({timeout}s)...")
        
        for i in range(timeout):
            print(f"\r   ‚è±Ô∏è  –ó–∞–ª–∏—à–∏–ª–æ—Å—å: {timeout-i}s", end="", flush=True)
            time.sleep(1)
            
            if i > 30:  # –ü–æ—á–∞—Ç–∏ –ø–µ—Ä–µ–≤—ñ—Ä—è—Ç–∏ –ø—ñ—Å–ª—è 30s
                ready_count = self.check_services_health()
                if ready_count >= 4:  # –ú—ñ–Ω—ñ–º—É–º 4 —Å–µ—Ä–≤—ñ—Å–∏ –≥–æ—Ç–æ–≤—ñ
                    print(f"\n   ‚úÖ {ready_count} —Å–µ—Ä–≤—ñ—Å—ñ–≤ –≥–æ—Ç–æ–≤—ñ –¥–æ —Ä–æ–±–æ—Ç–∏")
                    return True
                    
        print(f"\n   ‚ö†Ô∏è  –¢–∞–π–º-–∞—É—Ç –¥–æ—Å—è–≥–Ω—É—Ç–æ, –∞–ª–µ —Å–∏—Å—Ç–µ–º–∞ –º–æ–∂–µ –ø—Ä–æ–¥–æ–≤–∂—É–≤–∞—Ç–∏ –∑–∞–ø—É—Å–∫–∞—Ç–∏—Å—è")
        return False
        
    def check_services_health(self):
        """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤'—è —Å–µ—Ä–≤—ñ—Å—ñ–≤"""
        ready_count = 0
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω–∏—Ö —Å–µ—Ä–≤—ñ—Å—ñ–≤
        health_checks = [
            ('http://localhost:8000/health', 'Backend'),
            ('http://localhost:3001', 'Frontend'),
            ('http://localhost:9090/-/healthy', 'Prometheus'),
            ('http://localhost:5601/api/status', 'OpenSearch Dashboards')
        ]
        
        for url, name in health_checks:
            try:
                response = requests.get(url, timeout=5)
                if response.status_code == 200:
                    ready_count += 1
            except:
                pass
                
        return ready_count
        
    def show_services_status(self):
        """–í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É —Å–µ—Ä–≤—ñ—Å—ñ–≤"""
        print("\nüåê –î–û–°–¢–£–ü–ù–Ü –Ü–ù–¢–ï–†–§–ï–ô–°–ò:")
        print("=" * 50)
        
        for service, config in self.services.items():
            url = f"http://localhost:{config['port']}"
            try:
                response = requests.get(url, timeout=3)
                status = "üü¢ ONLINE" if response.status_code == 200 else "üü° STARTING"
            except:
                status = "üî¥ OFFLINE"
                
            print(f"   {config['name']:<25} {url:<30} {status}")
            
        print("=" * 50)
        
    def run_agent_tests(self):
        """–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç—ñ–≤ –∞–≥–µ–Ω—Ç—ñ–≤"""
        print("\nü§ñ –¢–ï–°–¢–£–í–ê–ù–ù–Ø –ê–ì–ï–ù–¢–Ü–í –°–ê–ú–û–í–î–û–°–ö–û–ù–ê–õ–ï–ù–ù–Ø:")
        print("=" * 50)
        
        tests = [
            ('scripts/test_all_26_agents.py', '–¢–µ—Å—Ç –≤—Å—ñ—Ö 26 –∞–≥–µ–Ω—Ç—ñ–≤'),
            ('scripts/live_self_improvement_demo.py', '–î–µ–º–æ —Å–∞–º–æ–≤–¥–æ—Å–∫–æ–Ω–∞–ª–µ–Ω–Ω—è')
        ]
        
        for script, description in tests:
            if os.path.exists(script):
                print(f"   üîÑ –ó–∞–ø—É—Å–∫: {description}")
                try:
                    result = subprocess.run(['python3', script], 
                                          capture_output=True, text=True, timeout=60)
                    
                    if result.returncode == 0:
                        print(f"   ‚úÖ {description}: –£–°–ü–Ü–®–ù–û")
                        # –ü–æ–∫–∞–∑—É—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ —Ä—è–¥–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
                        lines = result.stdout.strip().split('\n')[-5:]
                        for line in lines:
                            if '‚úÖ' in line or 'üèÜ' in line or 'üìä' in line:
                                print(f"      {line}")
                    else:
                        print(f"   ‚ö†Ô∏è  {description}: –ß–∞—Å—Ç–∫–æ–≤–∞ –ø–æ–º–∏–ª–∫–∞")
                        
                except subprocess.TimeoutExpired:
                    print(f"   ‚è∞ {description}: –¢–∞–π–º-–∞—É—Ç (—Ç–µ—Å—Ç –ø—Ä–æ–¥–æ–≤–∂—É—î—Ç—å—Å—è –≤ —Ñ–æ–Ω—ñ)")
                except Exception as e:
                    print(f"   ‚ùå {description}: {e}")
            else:
                print(f"   ‚ö†Ô∏è  –°–∫—Ä–∏–ø—Ç {script} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
                
    def open_interfaces(self):
        """–í—ñ–¥–∫—Ä–∏—Ç—Ç—è web-—ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ñ–≤"""
        print("\nüåê –í–Ü–î–ö–†–ò–¢–¢–Ø WEB-–Ü–ù–¢–ï–†–§–ï–ô–°–Ü–í:")
        print("=" * 50)
        
        # –û—Å–Ω–æ–≤–Ω–∏–π —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        main_url = "http://localhost:3001"
        print(f"   üéØ –í—ñ–¥–∫—Ä–∏–≤–∞—é –≥–æ–ª–æ–≤–Ω–∏–π —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å: {main_url}")
        
        try:
            webbrowser.open(main_url)
            print("   ‚úÖ –ë—Ä–∞—É–∑–µ—Ä –≤—ñ–¥–∫—Ä–∏—Ç–æ")
        except Exception as e:
            print(f"   ‚ö†Ô∏è  –ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–∫—Ä–∏—Ç–∏ –±—Ä–∞—É–∑–µ—Ä: {e}")
            print(f"   üìã –í—ñ–¥–∫—Ä–∏–π—Ç–µ –≤—Ä—É—á–Ω—É: {main_url}")
            
    def show_final_summary(self):
        """–§—ñ–Ω–∞–ª—å–Ω–µ —Ä–µ–∑—é–º–µ"""
        print("\n" + "=" * 80)
        print("üéâ –°–ò–°–¢–ï–ú–ê PREDATOR ANALYTICS NEXUS CORE V2.0 –ó–ê–ü–£–©–ï–ù–ê!")
        print("=" * 80)
        
        print("\nüéØ –©–û –ü–†–ê–¶–Æ–Ñ –ó–ê–†–ê–ó:")
        print("   ü§ñ 26 –∞–≥–µ–Ω—Ç—ñ–≤ –∑ —Å–∫–ª–∞–¥–Ω–æ—é –ª–æ–≥—ñ–∫–æ—é —Å–∞–º–æ–≤–¥–æ—Å–∫–æ–Ω–∞–ª–µ–Ω–Ω—è")
        print("   üß† 21 –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∞ AI-–º–æ–¥–µ–ª—å –≤ –ø—Ä–æ–¥–∞–∫—à–Ω")
        print("   üåê –ê—Ä—Ö—ñ–º–æ–¥–Ω–∏–π web-—ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∑ –≤—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—î—é")
        print("   üìä Real-time –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ —Ç–∞ –∞–Ω–∞–ª—ñ—Ç–∏–∫–∞")
        print("   üîß –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ —Å–∞–º–æ–≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è —Ç–∞ –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è")
        print("   üíº –ë—ñ–∑–Ω–µ—Å-—ñ–Ω—Å–∞–π—Ç–∏ —Ç–∞ –ø—Ä–æ–≥–Ω–æ–∑—É–≤–∞–Ω–Ω—è")
        
        print(f"\nüåê –ì–û–õ–û–í–ù–ò–ô –Ü–ù–¢–ï–†–§–ï–ô–°:")
        print(f"   üéØ http://localhost:3001")
        print(f"   üì± –£–≤—ñ–π–¥—ñ—Ç—å —á–µ—Ä–µ–∑ Keycloak –¥–ª—è –ø–æ–≤–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø—É")
        
        print(f"\nü§ñ –ê–ì–ï–ù–¢–ò –°–ê–ú–û–í–î–û–°–ö–û–ù–ê–õ–ï–ù–ù–Ø:")
        print(f"   üß† SelfImprovement - –ø–æ—Å—Ç—ñ–π–Ω–æ –ø–æ–∫—Ä–∞—â—É—î —Å–∏—Å—Ç–µ–º—É")
        print(f"   üîß AutoHeal - –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≤–∏–ø—Ä–∞–≤–ª—è—î –ø—Ä–æ–±–ª–µ–º–∏")
        print(f"   ‚ö° PerformanceOptimizer - –æ–ø—Ç–∏–º—ñ–∑—É—î —à–≤–∏–¥–∫—ñ—Å—Ç—å")
        print(f"   üîç SelfDiagnosis - –¥—ñ–∞–≥–Ω–æ—Å—Ç—É—î —Ç–∞ –ø–æ–ø–µ—Ä–µ–¥–∂–∞—î")
        
        print(f"\nüíº –ë–Ü–ó–ù–ï–°-–§–£–ù–ö–¶–Ü–á:")
        print(f"   üè¶ –î–µ—Ç–µ–∫—Ü—ñ—è –±–∞–Ω–∫—ñ–≤—Å—å–∫–∏—Ö —Å—Ö–µ–º —Ç–∞ –ø—ñ–¥–æ–∑—Ä—ñ–ª–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π")
        print(f"   üèõÔ∏è  –ê–Ω–∞–ª—ñ–∑ —á–∏–Ω–æ–≤–Ω–∏—Ü—å–∫–æ—ó –∫–æ—Ä—É–ø—Ü—ñ—ó —Ç–∞ –¥–µ—Ä–∂–∑–∞–∫—É–ø—ñ–≤–µ–ª—å")
        print(f"   üìà –ü—Ä–æ–≥–Ω–æ–∑—É–≤–∞–Ω–Ω—è —Ä–∏–Ω–∫—ñ–≤ —Ç–∞ –±—ñ–∑–Ω–µ—Å-—Ç—Ä–µ–Ω–¥—ñ–≤")
        print(f"   üí∞ –û–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è –ø–æ–¥–∞—Ç–∫—ñ–≤ —Ç–∞ —Ñ—ñ–Ω–∞–Ω—Å–æ–≤–∏—Ö –ø–æ—Ç–æ–∫—ñ–≤")
        
        print("\n" + "=" * 80)
        print("üöÄ –°–ò–°–¢–ï–ú–ê –ì–û–¢–û–í–ê –î–û –ü–û–í–ù–û–ú–ê–°–®–¢–ê–ë–ù–û–ì–û –í–ò–ö–û–†–ò–°–¢–ê–ù–ù–Ø!")
        print("=" * 80)
        
    def run(self):
        """–û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –∑–∞–ø—É—Å–∫—É"""
        self.print_header()
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ Docker
        if not self.check_docker():
            return False
            
        # –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤—ñ—Å—ñ–≤
        if not self.start_services():
            return False
            
        # –û—á—ñ–∫—É–≤–∞–Ω–Ω—è –∑–∞–ø—É—Å–∫—É
        self.wait_for_services()
        
        # –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤—ñ—Å—ñ–≤
        self.show_services_status()
        
        # –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∞–≥–µ–Ω—Ç—ñ–≤
        self.run_agent_tests()
        
        # –í—ñ–¥–∫—Ä–∏—Ç—Ç—è —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ñ–≤
        self.open_interfaces()
        
        # –§—ñ–Ω–∞–ª—å–Ω–µ —Ä–µ–∑—é–º–µ
        self.show_final_summary()
        
        return True

def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è"""
    launcher = NexusLauncher()
    
    try:
        success = launcher.run()
        
        if success:
            print("\nüîÑ –°–∏—Å—Ç–µ–º–∞ –ø—Ä–∞—Ü—é—î! –î–ª—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É –ª–æ–≥—ñ–≤ –≤–∏–∫–æ–Ω–∞–π—Ç–µ:")
            print("   docker-compose logs -f")
            print("\n‚èπÔ∏è  –î–ª—è –∑—É–ø–∏–Ω–∫–∏ —Å–∏—Å—Ç–µ–º–∏ –≤–∏–∫–æ–Ω–∞–π—Ç–µ:")
            print("   docker-compose down")
        else:
            print("\n‚ùå –ó–∞–ø—É—Å–∫ –Ω–µ –≤–¥–∞–≤—Å—è. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ Docker —Ç–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é.")
            
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è  –ó–∞–ø—É—Å–∫ –ø–µ—Ä–µ—Ä–≤–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º")
    except Exception as e:
        print(f"\nüí• –ù–µ–æ—á—ñ–∫—É–≤–∞–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")

if __name__ == "__main__":
    main()
