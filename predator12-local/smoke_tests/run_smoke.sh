#!/usr/bin/env bash
# ==========================================
# SMOKE –¢–ï–°–¢–ò –î–õ–Ø –õ–û–ö–ê–õ–¨–ù–û–ì–û –°–ï–†–ï–î–û–í–ò–©–ê
# ==========================================

set -e

echo "üß™ –ó–∞–ø—É—Å–∫ smoke —Ç–µ—Å—Ç—ñ–≤ –¥–ª—è Predator12..."

# –ö–æ–ª—å–æ—Ä–∏ –¥–ª—è –≤–∏–≤–æ–¥—É
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# –õ—ñ—á–∏–ª—å–Ω–∏–∫–∏
TESTS_TOTAL=0
TESTS_PASSED=0
TESTS_FAILED=0

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —Ç–µ—Å—Ç—É
run_test() {
    local test_name="$1"
    local test_command="$2"
    local expected_output="$3"
    
    TESTS_TOTAL=$((TESTS_TOTAL + 1))
    echo -n "  üîç $test_name... "
    
    if eval "$test_command" > /dev/null 2>&1; then
        echo -e "${GREEN}‚úÖ PASS${NC}"
        TESTS_PASSED=$((TESTS_PASSED + 1))
        return 0
    else
        echo -e "${RED}‚ùå FAIL${NC}"
        TESTS_FAILED=$((TESTS_FAILED + 1))
        return 1
    fi
}

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ HTTP –µ–Ω–¥–ø–æ—ñ–Ω—Ç—É
check_http() {
    local url="$1"
    local expected_status="${2:-200}"
    
    local status=$(curl -s -o /dev/null -w "%{http_code}" "$url" || echo "000")
    
    if [ "$status" = "$expected_status" ]; then
        return 0
    else
        echo "Expected $expected_status, got $status" >&2
        return 1
    fi
}

echo "üèÅ –ü–æ—á–∞—Ç–æ–∫ smoke —Ç–µ—Å—Ç—ñ–≤..."
echo "========================================"

# 1. –¢–µ—Å—Ç –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –ë–î
echo "üìä –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö:"
run_test "PostgreSQL –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è" "
    . .venv/bin/activate 2>/dev/null || true
    python -c 'import psycopg2; psycopg2.connect(\"postgresql://predator_user:changeme@127.0.0.1:5432/predator\").close()'
"

run_test "–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ë–î" "
    PGPASSWORD=changeme psql -h 127.0.0.1 -U predator_user -d predator -c 'SELECT COUNT(*) FROM information_schema.tables WHERE table_schema = \"public\"' | grep -q '[0-9]'
"

# 2. –¢–µ—Å—Ç backend
echo ""
echo "üöÄ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è backend:"
run_test "Backend health endpoint" "check_http http://localhost:8000/health"
run_test "Backend API docs" "check_http http://localhost:8000/docs"
run_test "Backend root endpoint" "check_http http://localhost:8000/"

# –¢–µ—Å—Ç API –µ–Ω–¥–ø–æ—ñ–Ω—Ç—ñ–≤
run_test "API status endpoint" "check_http http://localhost:8000/api/status"
run_test "Agents list endpoint" "check_http http://localhost:8000/api/agents"

# 3. –¢–µ—Å—Ç frontend
echo ""
echo "üåê –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è frontend:"
run_test "Frontend –¥–æ—Å—Ç—É–ø–Ω—ñ—Å—Ç—å" "check_http http://localhost:3000"
run_test "Frontend assets" "curl -s http://localhost:3000 | grep -q 'Predator'"

# 4. –¢–µ—Å—Ç —Ñ–∞–π–ª–æ–≤–æ–≥–æ —Å—Ö–æ–≤–∏—â–∞
echo ""
echo "üìÅ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Ñ–∞–π–ª–æ–≤–æ–≥–æ —Å—Ö–æ–≤–∏—â–∞:"
run_test "–õ–æ–∫–∞–ª—å–Ω–∞ –ø–∞–ø–∫–∞ storage" "[ -d ./local_storage ]"
run_test "–ü—Ä–∞–≤–∞ –∑–∞–ø–∏—Å—É –≤ storage" "touch ./local_storage/test_file && rm ./local_storage/test_file"

# 5. –¢–µ—Å—Ç –≤—ñ—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
echo ""
echo "üêç –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è Python —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞:"
run_test "Virtual environment" "[ -d .venv ] && [ -f .venv/bin/activate ]"
run_test "Python –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ" ". .venv/bin/activate && pip list | grep -q fastapi"
run_test "Backend –º–æ–¥—É–ª—ñ" ". .venv/bin/activate && python -c 'import backend.main'"

# 6. –¢–µ—Å—Ç –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
echo ""
echo "‚öôÔ∏è –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó:"
run_test "–§–∞–π–ª .env —ñ—Å–Ω—É—î" "[ -f .env ]"
run_test "VS Code –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è" "[ -f .vscode/tasks.json ] && [ -f .vscode/launch.json ]"
run_test "Makefile –∫–æ–º–∞–Ω–¥–∏" "make help | grep -q 'install'"

# 7. –¢–µ—Å—Ç –ª–æ–≥—ñ–≤
echo ""
echo "üìã –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è:"
run_test "–ü–∞–ø–∫–∞ –ª–æ–≥—ñ–≤" "[ -d logs ]"
run_test "Backend –ª–æ–≥–∏" "[ -f logs/predator.log ] || touch logs/predator.log"

# 8. –†–æ–∑—à–∏—Ä–µ–Ω—ñ API —Ç–µ—Å—Ç–∏
echo ""
echo "üîß –†–æ–∑—à–∏—Ä–µ–Ω—ñ API —Ç–µ—Å—Ç–∏:"

# –¢–µ—Å—Ç —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—Ä–æ—Å—Ç–æ–≥–æ –∑–∞–ø–∏—Ç—É
run_test "AI agents API" "
    curl -s -X POST http://localhost:8000/api/agents/test \
    -H 'Content-Type: application/json' \
    -d '{\"message\": \"test\"}' | grep -q -E '(success|result|response)'
"

# –¢–µ—Å—Ç –º–µ—Ç—Ä–∏–∫
run_test "Metrics endpoint" "check_http http://localhost:8000/metrics"

# 9. –¢–µ—Å—Ç —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ–π
echo ""
echo "üîó –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ–π:"

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ Redis (—è–∫—â–æ —É–≤—ñ–º–∫–Ω–µ–Ω–∏–π)
if command -v redis-cli &> /dev/null; then
    run_test "Redis –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è" "redis-cli ping | grep -q PONG"
fi

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –º–æ–¥–µ–ª–µ–π AI
run_test "AI models config" "[ -f backend/model_registry.yaml ] || [ -f agents/registry_production.yaml ]"

echo ""
echo "========================================"
echo "üìä –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ smoke —Ç–µ—Å—Ç—ñ–≤:"
echo "  üìà –í—Å—å–æ–≥–æ —Ç–µ—Å—Ç—ñ–≤: $TESTS_TOTAL"
echo -e "  ${GREEN}‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: $TESTS_PASSED${NC}"
echo -e "  ${RED}‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: $TESTS_FAILED${NC}"

# –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –≤—ñ–¥—Å–æ—Ç–∫–∞ —É—Å–ø—ñ—à–Ω–æ—Å—Ç—ñ
if [ $TESTS_TOTAL -gt 0 ]; then
    SUCCESS_RATE=$((TESTS_PASSED * 100 / TESTS_TOTAL))
    echo "  üìä –£—Å–ø—ñ—à–Ω—ñ—Å—Ç—å: $SUCCESS_RATE%"
    
    if [ $SUCCESS_RATE -ge 90 ]; then
        echo -e "${GREEN}üéâ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –¥–æ —Ä–æ–±–æ—Ç–∏!${NC}"
        exit 0
    elif [ $SUCCESS_RATE -ge 70 ]; then
        echo -e "${YELLOW}‚ö†Ô∏è –°–∏—Å—Ç–µ–º–∞ —á–∞—Å—Ç–∫–æ–≤–æ –≥–æ—Ç–æ–≤–∞, —î –ø–æ–º–∏–ª–∫–∏${NC}"
        exit 1
    else
        echo -e "${RED}‚ùå –°–∏—Å—Ç–µ–º–∞ –Ω–µ –≥–æ—Ç–æ–≤–∞, –±–∞–≥–∞—Ç–æ –ø–æ–º–∏–ª–æ–∫${NC}"
        exit 2
    fi
else
    echo -e "${RED}‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–ø—É—Å—Ç–∏—Ç–∏ —Ç–µ—Å—Ç–∏${NC}"
    exit 3
fi

echo ""
echo "üîç –î–ª—è –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø–æ–º–∏–ª–æ–∫:"
echo "  - Backend –ª–æ–≥–∏: tail -f logs/predator.log"
echo "  - Frontend –ª–æ–≥–∏: cd frontend && npm run dev"
echo "  - Database –ª–æ–≥–∏: sudo journalctl -u postgresql"
echo "  - –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—Ä–æ—Ü–µ—Å—ñ–≤: ps aux | grep -E '(uvicorn|node)'"
