#!/usr/bin/env python3
"""
Smoke —Ç–µ—Å—Ç–∏ –¥–ª—è Predator12 –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
"""
import os
import sys
import requests
import psycopg2
from pathlib import Path
from typing import List, Tuple
import time

# –ö–æ–ª—å–æ—Ä–∏ –¥–ª—è –≤–∏–≤–æ–¥—É
class Colors:
    GREEN = '\033[92m'
    RED = '\033[91m'
    YELLOW = '\033[93m'
    BLUE = '\033[94m'
    END = '\033[0m'

class SmokeTests:
    def __init__(self):
        self.tests_passed = 0
        self.tests_failed = 0
        self.tests_total = 0
        
        # –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è .env
        self.load_env()
        
    def load_env(self):
        """–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–º—ñ–Ω–Ω–∏—Ö –∑ .env"""
        env_path = Path(__file__).parent.parent / '.env'
        if env_path.exists():
            with open(env_path) as f:
                for line in f:
                    if line.strip() and not line.startswith('#'):
                        key, value = line.strip().split('=', 1)
                        os.environ[key] = value
    
    def print_header(self, text: str):
        """–î—Ä—É–∫ –∑–∞–≥–æ–ª–æ–≤–∫—É —Å–µ–∫—Ü—ñ—ó"""
        print(f"\n{Colors.BLUE}{'='*50}")
        print(f"{text}")
        print(f"{'='*50}{Colors.END}\n")
    
    def run_test(self, name: str, test_func) -> bool:
        """–ó–∞–ø—É—Å–∫ –æ–¥–Ω–æ–≥–æ —Ç–µ—Å—Ç—É"""
        self.tests_total += 1
        print(f"  üîç {name}... ", end='', flush=True)
        
        try:
            test_func()
            print(f"{Colors.GREEN}‚úÖ PASS{Colors.END}")
            self.tests_passed += 1
            return True
        except Exception as e:
            print(f"{Colors.RED}‚ùå FAIL{Colors.END}")
            print(f"     –ü–æ–º–∏–ª–∫–∞: {str(e)}")
            self.tests_failed += 1
            return False
    
    def test_database_connection(self):
        """–¢–µ—Å—Ç –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ PostgreSQL"""
        db_url = os.getenv('DATABASE_URL', 'postgresql://predator_user:changeme@127.0.0.1:5432/predator')
        conn = psycopg2.connect(db_url)
        conn.close()
    
    def test_database_tables(self):
        """–¢–µ—Å—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ –ë–î"""
        db_url = os.getenv('DATABASE_URL', 'postgresql://predator_user:changeme@127.0.0.1:5432/predator')
        conn = psycopg2.connect(db_url)
        cur = conn.cursor()
        cur.execute("SELECT COUNT(*) FROM information_schema.tables WHERE table_schema = 'public'")
        count = cur.fetchone()[0]
        conn.close()
        if count < 1:
            raise Exception(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ —Ç–∞–±–ª–∏—Ü—å –≤ –ë–î: {count}")
    
    def test_backend_health(self):
        """–¢–µ—Å—Ç health endpoint backend"""
        response = requests.get('http://localhost:8000/health', timeout=5)
        if response.status_code != 200:
            raise Exception(f"Status code: {response.status_code}")
    
    def test_backend_docs(self):
        """–¢–µ—Å—Ç API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—ó"""
        response = requests.get('http://localhost:8000/docs', timeout=5)
        if response.status_code != 200:
            raise Exception(f"Status code: {response.status_code}")
    
    def test_frontend_available(self):
        """–¢–µ—Å—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ frontend"""
        response = requests.get('http://localhost:3000', timeout=5)
        if response.status_code != 200:
            raise Exception(f"Status code: {response.status_code}")
    
    def test_local_storage(self):
        """–¢–µ—Å—Ç –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å—Ö–æ–≤–∏—â–∞"""
        storage_path = Path(__file__).parent.parent / 'local_storage'
        if not storage_path.exists():
            raise Exception("–ü–∞–ø–∫–∞ local_storage –Ω–µ —ñ—Å–Ω—É—î")
        
        # –°–ø—Ä–æ–±–∞ —Å—Ç–≤–æ—Ä–∏—Ç–∏ —Ç–µ—Å—Ç–æ–≤–∏–π —Ñ–∞–π–ª
        test_file = storage_path / 'test_file.txt'
        test_file.write_text('test')
        if not test_file.exists():
            raise Exception("–ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ —Ç–µ—Å—Ç–æ–≤–∏–π —Ñ–∞–π–ª")
        test_file.unlink()
    
    def test_venv_exists(self):
        """–¢–µ—Å—Ç –≤—ñ—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞"""
        venv_path = Path(__file__).parent.parent / '.venv'
        if not venv_path.exists():
            raise Exception("–í—ñ—Ä—Ç—É–∞–ª—å–Ω–µ —Å–µ—Ä–µ–¥–æ–≤–∏—â–µ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        
        activate_script = venv_path / 'bin' / 'activate'
        if not activate_script.exists():
            raise Exception("–°–∫—Ä–∏–ø—Ç –∞–∫—Ç–∏–≤–∞—Ü—ñ—ó –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
    
    def test_env_file(self):
        """–¢–µ—Å—Ç –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ .env —Ñ–∞–π–ª—É"""
        env_path = Path(__file__).parent.parent / '.env'
        if not env_path.exists():
            raise Exception(".env —Ñ–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
    
    def test_logs_directory(self):
        """–¢–µ—Å—Ç –ø–∞–ø–∫–∏ –ª–æ–≥—ñ–≤"""
        logs_path = Path(__file__).parent.parent / 'logs'
        if not logs_path.exists():
            logs_path.mkdir(parents=True)
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—Ä–∞–≤ –∑–∞–ø–∏—Å—É
        test_log = logs_path / 'test.log'
        test_log.write_text('test')
        test_log.unlink()
    
    def print_summary(self):
        """–î—Ä—É–∫ –ø—ñ–¥—Å—É–º–∫—ñ–≤"""
        self.print_header("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ smoke —Ç–µ—Å—Ç—ñ–≤")
        
        print(f"  üìà –í—Å—å–æ–≥–æ —Ç–µ—Å—Ç—ñ–≤: {self.tests_total}")
        print(f"  {Colors.GREEN}‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: {self.tests_passed}{Colors.END}")
        print(f"  {Colors.RED}‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {self.tests_failed}{Colors.END}")
        
        if self.tests_total > 0:
            success_rate = (self.tests_passed / self.tests_total) * 100
            print(f"  üìä –£—Å–ø—ñ—à–Ω—ñ—Å—Ç—å: {success_rate:.1f}%")
            
            if success_rate >= 90:
                print(f"\n{Colors.GREEN}üéâ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –¥–æ —Ä–æ–±–æ—Ç–∏!{Colors.END}")
                return 0
            elif success_rate >= 70:
                print(f"\n{Colors.YELLOW}‚ö†Ô∏è –°–∏—Å—Ç–µ–º–∞ —á–∞—Å—Ç–∫–æ–≤–æ –≥–æ—Ç–æ–≤–∞, —î –ø–æ–º–∏–ª–∫–∏{Colors.END}")
                return 1
            else:
                print(f"\n{Colors.RED}‚ùå –°–∏—Å—Ç–µ–º–∞ –Ω–µ –≥–æ—Ç–æ–≤–∞, –±–∞–≥–∞—Ç–æ –ø–æ–º–∏–ª–æ–∫{Colors.END}")
                return 2
        else:
            print(f"\n{Colors.RED}‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–ø—É—Å—Ç–∏—Ç–∏ —Ç–µ—Å—Ç–∏{Colors.END}")
            return 3
    
    def run_all(self) -> int:
        """–ó–∞–ø—É—Å–∫ –≤—Å—ñ—Ö —Ç–µ—Å—Ç—ñ–≤"""
        print(f"{Colors.BLUE}üß™ –ó–∞–ø—É—Å–∫ smoke —Ç–µ—Å—Ç—ñ–≤ –¥–ª—è Predator12...{Colors.END}")
        
        # –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö
        self.print_header("üìä –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö")
        self.run_test("PostgreSQL –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è", self.test_database_connection)
        self.run_test("–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ë–î", self.test_database_tables)
        
        # Backend
        self.print_header("üöÄ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è backend")
        self.run_test("Backend health endpoint", self.test_backend_health)
        self.run_test("Backend API docs", self.test_backend_docs)
        
        # Frontend
        self.print_header("üåê –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è frontend")
        self.run_test("Frontend –¥–æ—Å—Ç—É–ø–Ω—ñ—Å—Ç—å", self.test_frontend_available)
        
        # –§–∞–π–ª–æ–≤–µ —Å—Ö–æ–≤–∏—â–µ
        self.print_header("üìÅ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Ñ–∞–π–ª–æ–≤–æ–≥–æ —Å—Ö–æ–≤–∏—â–∞")
        self.run_test("–õ–æ–∫–∞–ª—å–Ω–∞ –ø–∞–ø–∫–∞ storage", self.test_local_storage)
        
        # Python —Å–µ—Ä–µ–¥–æ–≤–∏—â–µ
        self.print_header("üêç –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è Python —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞")
        self.run_test("Virtual environment", self.test_venv_exists)
        
        # –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è
        self.print_header("‚öôÔ∏è –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó")
        self.run_test("–§–∞–π–ª .env —ñ—Å–Ω—É—î", self.test_env_file)
        self.run_test("–ü–∞–ø–∫–∞ –ª–æ–≥—ñ–≤", self.test_logs_directory)
        
        return self.print_summary()

def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è"""
    tests = SmokeTests()
    exit_code = tests.run_all()
    
    if exit_code != 0:
        print(f"\n{Colors.YELLOW}üîç –î–ª—è –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø–æ–º–∏–ª–æ–∫:{Colors.END}")
        print("  - Backend –ª–æ–≥–∏: tail -f logs/predator.log")
        print("  - Frontend –ª–æ–≥–∏: cd frontend && npm run dev")
        print("  - –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—Ä–æ—Ü–µ—Å—ñ–≤: ps aux | grep -E '(uvicorn|node)'")
    
    sys.exit(exit_code)

if __name__ == "__main__":
    main()
