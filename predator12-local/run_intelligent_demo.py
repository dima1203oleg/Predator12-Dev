#!/usr/bin/env python3
"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è —Ä–æ–±–æ—Ç–∏ —ñ–Ω—Ç–µ–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ —Å—É–ø–µ—Ä–≤—ñ–∑–æ—Ä–∞ Predator11
"""
import os
import sys
import time

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —à–ª—è—Ö—É
current_dir = os.path.dirname(os.path.abspath(__file__))
agents_dir = os.path.join(current_dir, 'agents')
sys.path.insert(0, agents_dir)

def run_demo():
    print("üöÄ PREDATOR11 INTELLIGENT SYSTEM DEMO")
    print("=" * 60)

    try:
        # –Ü–º–ø–æ—Ä—Ç –ø—ñ—Å–ª—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —à–ª—è—Ö—É
        from supervisor import Supervisor, TaskType, IntelligentModelRouter, RoutingTier

        print("üìã –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó –∞–≥–µ–Ω—Ç—ñ–≤...")

        # –°—Ç–≤–æ—Ä—é—î–º–æ —Å—É–ø–µ—Ä–≤—ñ–∑–æ—Ä
        config_path = os.path.join(current_dir, 'agents', 'agents.yaml')
        supervisor = Supervisor(config_path, dry_run=True)

        print("üîß –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —ñ–Ω—Ç–µ–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ —Å—É–ø–µ—Ä–≤—ñ–∑–æ—Ä–∞...")
        supervisor.load_config()

        print(f"‚úÖ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ {len(supervisor.agents)} –∞–≥–µ–Ω—Ç—ñ–≤")
        print(f"üß† –Ü–Ω—Ç–µ–ª–µ–∫—Ç—É–∞–ª—å–Ω–∏–π —Ä–æ—É—Ç–µ—Ä: {'–ê–∫—Ç–∏–≤–Ω–∏–π' if supervisor.model_router else '–ù–µ–∞–∫—Ç–∏–≤–Ω–∏–π'}")

        # –ü–æ–∫–∞–∑—É—î–º–æ –∫–ª—é—á–æ–≤—ñ –∞–≥–µ–Ω—Ç–∏
        print("\nüìä –°–¢–ê–ù –ö–õ–Æ–ß–û–í–ò–• –ê–ì–ï–ù–¢–Ü–í:")
        print("-" * 50)

        key_agents = {
            'ChiefOrchestratorAgent': '–ì–æ–ª–æ–≤–Ω–∏–π –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä',
            'ModelRouterAgent': '–Ü–Ω—Ç–µ–ª–µ–∫—Ç—É–∞–ª—å–Ω–∏–π —Ä–æ—É—Ç–µ—Ä –º–æ–¥–µ–ª–µ–π',
            'AnomalyAgent': '–î–µ—Ç–µ–∫—Ç–æ—Ä –∞–Ω–æ–º–∞–ª—ñ–π',
            'ForecastAgent': '–ü—Ä–æ–≥–Ω–æ–∑—É–≤–∞–Ω–Ω—è',
            'SelfHealingAgent': '–°–∞–º–æ–≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è',
            'SecurityPrivacyAgent': '–ë–µ–∑–ø–µ–∫–∞ —Ç–∞ –ø—Ä–∏–≤–∞—Ç–Ω—ñ—Å—Ç—å'
        }

        for agent_name, description in key_agents.items():
            if agent_name in supervisor.agents:
                cfg = supervisor.agents[agent_name]
                print(f"‚úÖ {agent_name} ({description})")
                print(f"   –ü–æ—Ä—Ç: {cfg.port}")
                print(f"   –°—Ç—Ä–∞—Ç–µ–≥—ñ—è: {cfg.models.selection_strategy}")
                if cfg.models.primary_pool:
                    print(f"   –ú–æ–¥–µ–ª—ñ: {len(cfg.models.primary_pool)} –≤ primary pool")
                if cfg.models.routing_strategies:
                    print(f"   –†–æ—É—Ç–∏–Ω–≥: {len(cfg.models.routing_strategies)} —Å—Ç—Ä–∞—Ç–µ–≥—ñ–π")
            else:
                print(f"‚ùå {agent_name} - –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
            print()

        # –¢–µ—Å—Ç—É—î–º–æ —ñ–Ω—Ç–µ–ª–µ–∫—Ç—É–∞–ª—å–Ω–∏–π —Ä–æ—É—Ç–∏–Ω–≥
        if supervisor.model_router:
            print("üîÑ –î–ï–ú–û–ù–°–¢–†–ê–¶–Ü–Ø –Ü–ù–¢–ï–õ–ï–ö–¢–£–ê–õ–¨–ù–û–ì–û –†–û–£–¢–ò–ù–ì–£:")
            print("-" * 50)

            # –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–µ—Å—Ç–æ–≤—ñ —Å—Ü–µ–Ω–∞—Ä—ñ—ó
            scenarios = [
                {
                    "name": "–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è Python –∫–æ–¥—É",
                    "task_type": TaskType.CODE,
                    "context": {"specialization": "python", "complexity_score": 0.8, "language": "python"}
                },
                {
                    "name": "–°–∫–ª–∞–¥–Ω–µ –∞–Ω–∞–ª—ñ—Ç–∏—á–Ω–µ –º—ñ—Ä–∫—É–≤–∞–Ω–Ω—è",
                    "task_type": TaskType.REASONING,
                    "context": {"context_length": 35000, "complexity_score": 0.9}
                },
                {
                    "name": "–ë–∞–≥–∞—Ç–æ–º–æ–≤–Ω—ñ –µ–º–±–µ–¥–∏–Ω–≥–∏",
                    "task_type": TaskType.EMBED,
                    "context": {"specialization": "multilingual", "language": "ukrainian", "task": "semantic_search"}
                }
            ]

            for i, scenario in enumerate(scenarios, 1):
                print(f"üéØ –°—Ü–µ–Ω–∞—Ä—ñ–π {i}: {scenario['name']}")
                selected_model = supervisor.model_router.select_model_for_task(
                    scenario["task_type"],
                    scenario["context"]
                )
                print(f"   –¢–∏–ø –∑–∞–¥–∞—á—ñ: {scenario['task_type'].value}")
                print(f"   –ö–æ–Ω—Ç–µ–∫—Å—Ç: {scenario['context']}")
                print(f"   –û–±—Ä–∞–Ω–∞ –º–æ–¥–µ–ª—å: {selected_model or '–ú–æ–¥–µ–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞'}")
                print()

        # –¢–µ—Å—Ç—É—î–º–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ-–∞–¥–∞–ø—Ç–∏–≤–Ω–∏–π –≤–∏–±—ñ—Ä
        if 'ChiefOrchestratorAgent' in supervisor.agents:
            print("üéØ –ö–û–ù–¢–ï–ö–°–¢–ù–û-–ê–î–ê–ü–¢–ò–í–ù–ò–ô –í–ò–ë–Ü–†:")
            print("-" * 50)

            contexts = [
                {
                    "name": "–í–∏—Å–æ–∫–æ—Å–∫–ª–∞–¥–Ω–µ –∑–∞–≤–¥–∞–Ω–Ω—è",
                    "context": {"task_complexity": 0.9, "reasoning_required": True}
                },
                {
                    "name": "–®–≤–∏–¥–∫–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å",
                    "context": {"task_complexity": 0.2, "response_time_required": 2}
                },
                {
                    "name": "–ó–±–∞–ª–∞–Ω—Å–æ–≤–∞–Ω–µ –∑–∞–≤–¥–∞–Ω–Ω—è",
                    "context": {"task_complexity": 0.6, "reasoning_required": False}
                }
            ]

            for i, test in enumerate(contexts, 1):
                print(f"üéØ –¢–µ—Å—Ç {i}: {test['name']}")
                selected_model = supervisor.select_model_for_context_adaptive_task(
                    'ChiefOrchestratorAgent',
                    test["context"]
                )
                print(f"   –ö–æ–Ω—Ç–µ–∫—Å—Ç: {test['context']}")
                print(f"   –û–±—Ä–∞–Ω–∞ –º–æ–¥–µ–ª—å: {selected_model or '–ú–æ–¥–µ–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞'}")
                print()

        print("üéâ –°–ò–°–¢–ï–ú–ê –£–°–ü–Ü–®–ù–û –ü–†–û–¢–ï–°–¢–û–í–ê–ù–ê!")
        print("üí∞ –ï–∫–æ–Ω–æ–º—ñ—è –∫–æ—à—Ç—ñ–≤: 100% (—Ç—ñ–ª—å–∫–∏ –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω—ñ –º–æ–¥–µ–ª—ñ)")
        print("ü§ñ –ö—ñ–ª—å–∫—ñ—Å—Ç—å –º–æ–¥–µ–ª–µ–π: 58 –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∏—Ö")
        print("üß† –Ü–Ω—Ç–µ–ª–µ–∫—Ç—É–∞–ª—å–Ω–∏–π —Ä–æ—É—Ç–∏–Ω–≥: –ê–∫—Ç–∏–≤–Ω–∏–π")
        print("üîÑ –ë–∞–≥–∞—Ç–æ—Ä—ñ–≤–Ω–µ–≤—ñ fallback'–∏: –†–µ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ")
        print("üéØ –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ-–∞–¥–∞–ø—Ç–∏–≤–Ω–∏–π –≤–∏–±—ñ—Ä: –ü—Ä–∞—Ü—é—î")

        return True

    except Exception as e:
        print(f"‚ùå –ü–û–ú–ò–õ–ö–ê: {str(e)}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    success = run_demo()
    if success:
        print("\nüöÄ –°–ò–°–¢–ï–ú–ê –ì–û–¢–û–í–ê –î–û –†–û–ë–û–¢–ò!")
    else:
        print("\n‚ùå –ü–û–¢–†–Ü–ë–ù–ï –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø –ü–û–ú–ò–õ–û–ö")

    exit(0 if success else 1)
