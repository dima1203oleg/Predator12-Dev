#!/usr/bin/env python3
"""
ü§ñ –†–ï–ê–õ–¨–ù–ò–ô AI –ê–ì–ï–ù–¢ –î–õ–Ø PREDATOR11
–ê–≥–µ–Ω—Ç —è–∫–∏–π —Å–ø—Ä–∞–≤–¥—ñ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î AI –º–æ–¥–µ–ª—ñ —á–µ—Ä–µ–∑ Model SDK
"""
import asyncio
import httpx
import json
import logging
from datetime import datetime
from typing import Dict, List, Any, Optional

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class RealAIAgent:
    def __init__(self, agent_name: str, model_sdk_url: str = "http://localhost:3010"):
        self.agent_name = agent_name
        self.model_sdk_url = model_sdk_url
        self.client = httpx.AsyncClient(timeout=30.0)
        self.preferred_models = self._get_preferred_models()

    def _get_preferred_models(self) -> Dict[str, str]:
        """–í–∏–∑–Ω–∞—á–∞—î –∫—Ä–∞—â—ñ –º–æ–¥–µ–ª—ñ –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö —Ç–∏–ø—ñ–≤ –∑–∞–≤–¥–∞–Ω—å"""
        models_by_agent = {
            "AnomalyAgent": {
                "analysis": "deepseek/deepseek-r1",
                "detection": "openai/o1",
                "reporting": "microsoft/phi-4-reasoning"
            },
            "ForecastAgent": {
                "prediction": "meta/meta-llama-3.1-405b-instruct",
                "analysis": "mistral-ai/mistral-large-2411",
                "reporting": "openai/gpt-5"
            },
            "SecurityAgent": {
                "threat_analysis": "deepseek/deepseek-v3-0324",
                "vulnerability_scan": "microsoft/phi-4-mini-reasoning",
                "reporting": "deepseek/deepseek-r1"
            },
            "DataAgent": {
                "processing": "cohere/cohere-command-r-plus-08-2024",
                "analysis": "microsoft/phi-4-reasoning",
                "cleaning": "openai/gpt-4o-mini"
            }
        }

        return models_by_agent.get(self.agent_name, {
            "default": "gpt-4",
            "analysis": "claude-3",
            "processing": "llama-3.1-70b"
        })

    async def call_ai_model(self, task_type: str, prompt: str, context: Dict = None) -> Dict[str, Any]:
        """–†–µ–∞–ª—å–Ω–∏–π –≤–∏–∫–ª–∏–∫ AI –º–æ–¥–µ–ª—ñ —á–µ—Ä–µ–∑ Model SDK"""

        # –í–∏–±–∏—Ä–∞—î–º–æ –Ω–∞–π–∫—Ä–∞—â—É –º–æ–¥–µ–ª—å –¥–ª—è —Ç–∏–ø—É –∑–∞–≤–¥–∞–Ω–Ω—è
        model = self.preferred_models.get(task_type, self.preferred_models.get("default", "gpt-4"))

        # –§–æ—Ä–º—É—î–º–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç
        messages = []
        if context:
            system_prompt = f"–¢–∏ {self.agent_name} –≤ —Å–∏—Å—Ç–µ–º—ñ Predator11. –ö–æ–Ω—Ç–µ–∫—Å—Ç: {json.dumps(context, ensure_ascii=False)}"
            messages.append({"role": "system", "content": system_prompt})

        messages.append({"role": "user", "content": prompt})

        try:
            logger.info(f"[{self.agent_name}] –í–∏–∫–ª–∏–∫–∞—é –º–æ–¥–µ–ª—å {model} –¥–ª—è –∑–∞–≤–¥–∞–Ω–Ω—è {task_type}")

            request_data = {
                "model": model,
                "messages": messages,
                "max_tokens": 1000,
                "temperature": 0.7
            }

            response = await self.client.post(
                f"{self.model_sdk_url}/v1/chat/completions",
                json=request_data
            )

            if response.status_code == 200:
                data = response.json()
                ai_response = data["choices"][0]["message"]["content"]

                logger.info(f"[{self.agent_name}] ‚úÖ –û—Ç—Ä–∏–º–∞–Ω–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ {model}: {len(ai_response)} —Å–∏–º–≤–æ–ª—ñ–≤")

                return {
                    "success": True,
                    "model_used": model,
                    "response": ai_response,
                    "usage": data.get("usage", {}),
                    "task_type": task_type,
                    "timestamp": datetime.now().isoformat()
                }
            else:
                logger.error(f"[{self.agent_name}] ‚ùå HTTP –ø–æ–º–∏–ª–∫–∞ {response.status_code}")
                return {"success": False, "error": f"HTTP {response.status_code}"}

        except Exception as e:
            logger.error(f"[{self.agent_name}] ‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–∫–ª–∏–∫—É AI: {e}")
            return {"success": False, "error": str(e)}

    async def process_task(self, task: Dict[str, Any]) -> Dict[str, Any]:
        """–û–±—Ä–æ–±–ª—è—î –∑–∞–≤–¥–∞–Ω–Ω—è –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ AI"""

        task_type = task.get("type", "analysis")
        task_data = task.get("data", "")
        context = task.get("context", {})

        # –§–æ—Ä–º—É—î–º–æ –ø—Ä–æ–º–ø—Ç –≤ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –≤—ñ–¥ —Ç–∏–ø—É –∞–≥–µ–Ω—Ç–∞
        if self.agent_name == "AnomalyAgent":
            prompt = f"–ü—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–π –¥–∞–Ω—ñ –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –∞–Ω–æ–º–∞–ª—ñ–π: {task_data}. –ó–Ω–∞–π–¥–∏ –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è –≤—ñ–¥ –Ω–æ—Ä–º–∏."
        elif self.agent_name == "ForecastAgent":
            prompt = f"–ó—Ä–æ–±–∏ –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –æ—Å–Ω–æ–≤—ñ –¥–∞–Ω–∏—Ö: {task_data}. –í—Ä–∞—Ö—É–π —Ç—Ä–µ–Ω–¥–∏ —Ç–∞ —Å–µ–∑–æ–Ω–Ω—ñ—Å—Ç—å."
        elif self.agent_name == "SecurityAgent":
            prompt = f"–ü—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–π –±–µ–∑–ø–µ–∫—É: {task_data}. –ó–Ω–∞–π–¥–∏ –ø–æ—Ç–µ–Ω—Ü—ñ–π–Ω—ñ –∑–∞–≥—Ä–æ–∑–∏ —Ç–∞ –≤—Ä–∞–∑–ª–∏–≤–æ—Å—Ç—ñ."
        else:
            prompt = f"–û–±—Ä–æ–±—å –¥–∞–Ω—ñ —è–∫ {self.agent_name}: {task_data}"

        # –í–∏–∫–ª–∏–∫–∞—î–º–æ AI
        ai_result = await self.call_ai_model(task_type, prompt, context)

        if ai_result["success"]:
            # –û–±—Ä–æ–±–ª—è—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å AI
            processed_result = {
                "agent": self.agent_name,
                "task_id": task.get("id", "unknown"),
                "ai_analysis": ai_result["response"],
                "model_used": ai_result["model_used"],
                "confidence": 0.85,  # –ú–æ–∂–Ω–∞ –æ–±—á–∏—Å–ª—é–≤–∞—Ç–∏ –Ω–∞ –æ—Å–Ω–æ–≤—ñ AI –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
                "recommendations": self._extract_recommendations(ai_result["response"]),
                "timestamp": ai_result["timestamp"],
                "processing_successful": True
            }

            logger.info(f"[{self.agent_name}] ‚úÖ –ó–∞–≤–¥–∞–Ω–Ω—è {task.get('id')} —É—Å–ø—ñ—à–Ω–æ –æ–±—Ä–æ–±–ª–µ–Ω–æ")
            return processed_result
        else:
            logger.error(f"[{self.agent_name}] ‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ–±—Ä–æ–±–∏—Ç–∏ –∑–∞–≤–¥–∞–Ω–Ω—è: {ai_result.get('error')}")
            return {
                "agent": self.agent_name,
                "task_id": task.get("id", "unknown"),
                "error": ai_result.get("error"),
                "processing_successful": False,
                "timestamp": datetime.now().isoformat()
            }

    def _extract_recommendations(self, ai_response: str) -> List[str]:
        """–í–∏—Ç—è–≥—É—î —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –∑ AI –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ"""
        recommendations = []

        # –ü—Ä–æ—Å—Ç–∏–π –ø–∞—Ä—Å–∏–Ω–≥ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π
        lines = ai_response.split('\n')
        for line in lines:
            line = line.strip()
            if any(keyword in line.lower() for keyword in ['—Ä–µ–∫–æ–º–µ–Ω–¥—É—é', '–ø–æ—Ç—Ä—ñ–±–Ω–æ', '–≤–∞—Ä—Ç–æ', '—Å–ª—ñ–¥']):
                recommendations.append(line)

        return recommendations[:5]  # –ú–∞–∫—Å–∏–º—É–º 5 —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π

class AgentRunner:
    """–ó–∞–ø—É—Å–∫–∞—á —Ä–µ–∞–ª—å–Ω–∏—Ö AI –∞–≥–µ–Ω—Ç—ñ–≤"""

    def __init__(self):
        self.agents = {}
        self.running = False

    async def start_agents(self):
        """–ó–∞–ø—É—Å–∫–∞—î –≤—Å—ñ—Ö AI –∞–≥–µ–Ω—Ç—ñ–≤"""
        agent_types = ["AnomalyAgent", "ForecastAgent", "SecurityAgent", "DataAgent"]

        logger.info("üöÄ –ó–∞–ø—É—Å–∫–∞—é —Ä–µ–∞–ª—å–Ω–∏—Ö AI –∞–≥–µ–Ω—Ç—ñ–≤...")

        for agent_type in agent_types:
            agent = RealAIAgent(agent_type)
            self.agents[agent_type] = agent
            logger.info(f"‚úÖ {agent_type} –≥–æ—Ç–æ–≤–∏–π –¥–æ —Ä–æ–±–æ—Ç–∏")

        self.running = True
        logger.info("üéâ –í—Å—ñ –∞–≥–µ–Ω—Ç–∏ –∑–∞–ø—É—â–µ–Ω—ñ —ñ –≥–æ—Ç–æ–≤—ñ –æ–±—Ä–æ–±–ª—è—Ç–∏ –∑–∞–≤–¥–∞–Ω–Ω—è –∑ AI!")

    async def process_demo_tasks(self):
        """–ó–∞–ø—É—Å–∫–∞—î –¥–µ–º–æ –∑–∞–≤–¥–∞–Ω–Ω—è –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∞–≥–µ–Ω—Ç—ñ–≤"""

        demo_tasks = [
            {
                "id": "anomaly_001",
                "type": "detection",
                "data": "[1, 2, 3, 100, 4, 5, 6]",
                "context": {"source": "sensor_data", "threshold": 10}
            },
            {
                "id": "forecast_001",
                "type": "prediction",
                "data": "–ü—Ä–æ–¥–∞–∂—ñ –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ 12 –º—ñ—Å—è—Ü—ñ–≤: 100, 120, 110, 130, 140, 135, 150, 160, 155, 170, 180, 175",
                "context": {"period": "monthly", "target": "sales"}
            },
            {
                "id": "security_001",
                "type": "threat_analysis",
                "data": "–ù–µ–∑–≤–∏—á–∞–π–Ω–∞ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å: 1000 –∑–∞–ø–∏—Ç—ñ–≤ –∑ IP 192.168.1.100 –∑–∞ 1 —Ö–≤–∏–ª–∏–Ω—É",
                "context": {"system": "web_server", "time_window": "1min"}
            },
            {
                "id": "data_001",
                "type": "processing",
                "data": "CSV —Ñ–∞–π–ª –∑ 10000 –∑–∞–ø–∏—Å—ñ–≤, 15% –≤—ñ–¥—Å—É—Ç–Ω—ñ—Ö –∑–Ω–∞—á–µ–Ω—å —É –∫–æ–ª–æ–Ω—Ü—ñ 'email'",
                "context": {"format": "csv", "size": "10k_rows"}
            }
        ]

        logger.info("üß™ –ó–∞–ø—É—Å–∫–∞—é –¥–µ–º–æ –∑–∞–≤–¥–∞–Ω–Ω—è –¥–ª—è –∞–≥–µ–Ω—Ç—ñ–≤...")

        results = []
        for task in demo_tasks:
            # –í–∏–∑–Ω–∞—á–∞—î–º–æ —è–∫–∏–π –∞–≥–µ–Ω—Ç –º–∞—î –æ–±—Ä–æ–±–ª—è—Ç–∏ –∑–∞–≤–¥–∞–Ω–Ω—è
            if "anomaly" in task["id"]:
                agent = self.agents["AnomalyAgent"]
            elif "forecast" in task["id"]:
                agent = self.agents["ForecastAgent"]
            elif "security" in task["id"]:
                agent = self.agents["SecurityAgent"]
            elif "data" in task["id"]:
                agent = self.agents["DataAgent"]
            else:
                continue

            # –û–±—Ä–æ–±–ª—è—î–º–æ –∑–∞–≤–¥–∞–Ω–Ω—è
            result = await agent.process_task(task)
            results.append(result)

            # –ù–µ–≤–µ–ª–∏–∫–∞ –ø–∞—É–∑–∞ –º—ñ–∂ –∑–∞–≤–¥–∞–Ω–Ω—è–º–∏
            await asyncio.sleep(2)

        return results

    async def run_continuous_mode(self):
        """–ó–∞–ø—É—Å–∫–∞—î –∞–≥–µ–Ω—Ç—ñ–≤ –≤ –±–µ–∑–ø–µ—Ä–µ—Ä–≤–Ω–æ–º—É —Ä–µ–∂–∏–º—ñ"""
        logger.info("üîÑ –ó–∞–ø—É—Å–∫–∞—é –∞–≥–µ–Ω—Ç—ñ–≤ –≤ –±–µ–∑–ø–µ—Ä–µ—Ä–≤–Ω–æ–º—É —Ä–µ–∂–∏–º—ñ...")

        while self.running:
            try:
                # –ì–µ–Ω–µ—Ä—É—î–º–æ –≤–∏–ø–∞–¥–∫–æ–≤—ñ –∑–∞–≤–¥–∞–Ω–Ω—è
                await self.process_demo_tasks()

                # –ß–µ–∫–∞—î–º–æ 30 —Å–µ–∫—É–Ω–¥ –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ —Ü–∏–∫–ª—É
                await asyncio.sleep(30)

            except KeyboardInterrupt:
                logger.info("üõë –ó—É–ø–∏–Ω–∫–∞ –∞–≥–µ–Ω—Ç—ñ–≤...")
                self.running = False
                break
            except Exception as e:
                logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ —Ä–æ–±–æ—Ç—ñ –∞–≥–µ–Ω—Ç—ñ–≤: {e}")
                await asyncio.sleep(10)

async def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –∑–∞–ø—É—Å–∫—É"""

    print("ü§ñ –ó–ê–ü–£–°–ö –†–ï–ê–õ–¨–ù–ò–• AI –ê–ì–ï–ù–¢–Ü–í PREDATOR11")
    print("="*60)

    runner = AgentRunner()

    # –ó–∞–ø—É—Å–∫–∞—î–º–æ –∞–≥–µ–Ω—Ç—ñ–≤
    await runner.start_agents()

    # –¢–µ—Å—Ç—É—î–º–æ –∑ –¥–µ–º–æ –∑–∞–≤–¥–∞–Ω–Ω—è–º–∏
    print("\nüß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∞–≥–µ–Ω—Ç—ñ–≤ –∑ —Ä–µ–∞–ª—å–Ω–∏–º–∏ AI –º–æ–¥–µ–ª—è–º–∏:")
    results = await runner.process_demo_tasks()

    print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–ò –¢–ï–°–¢–£–í–ê–ù–ù–Ø:")
    print("="*40)

    successful_tasks = 0
    for result in results:
        if result.get("processing_successful"):
            successful_tasks += 1
            print(f"‚úÖ {result['agent']}: –ó–∞–≤–¥–∞–Ω–Ω—è {result['task_id']} - –º–æ–¥–µ–ª—å {result.get('model_used', 'N/A')}")
        else:
            print(f"‚ùå {result['agent']}: –ó–∞–≤–¥–∞–Ω–Ω—è {result['task_id']} - –ø–æ–º–∏–ª–∫–∞")

    print(f"\nüéØ –£—Å–ø—ñ—à–Ω—ñ—Å—Ç—å: {successful_tasks}/{len(results)} ({successful_tasks/len(results)*100:.1f}%)")

    if successful_tasks > len(results) * 0.7:
        print("‚úÖ –ê–ì–ï–ù–¢–ò –£–°–ü–Ü–®–ù–û –í–ò–ö–û–†–ò–°–¢–û–í–£–Æ–¢–¨ AI –ú–û–î–ï–õ–Ü!")
    else:
        print("‚ö†Ô∏è –î–µ—è–∫—ñ –∞–≥–µ–Ω—Ç–∏ –º–∞—é—Ç—å –ø—Ä–æ–±–ª–µ–º–∏ –∑ AI –º–æ–¥–µ–ª—è–º–∏")

if __name__ == "__main__":
    asyncio.run(main())
