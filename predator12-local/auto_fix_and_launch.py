#!/usr/bin/env python3
"""
üîß –ê–í–¢–û–ú–ê–¢–ò–ß–ù–ï –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø –¢–ê –ó–ê–ü–£–°–ö –°–ò–°–¢–ï–ú–ò PREDATOR11
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫—É –≤—Å—ñ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ–≤ —Å–∏—Å—Ç–µ–º–∏
"""
import subprocess
import time
import requests
import asyncio
import logging
from pathlib import Path

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

class SystemLauncher:
    def __init__(self):
        self.base_path = Path("/Users/dima/Documents/Predator11")

    def check_docker(self):
        """–ü–µ—Ä–µ–≤—ñ—Ä—è—î —Å—Ç–∞—Ç—É—Å Docker"""
        try:
            result = subprocess.run(['docker', 'ps'], capture_output=True, text=True, timeout=5)
            return result.returncode == 0
        except:
            return False

    def start_docker(self):
        """–ó–∞–ø—É—Å–∫–∞—î Docker Desktop"""
        logger.info("üê≥ –ó–∞–ø—É—Å–∫–∞—é Docker Desktop...")
        try:
            subprocess.run(['open', '-a', 'Docker'], check=False)
            # –ß–µ–∫–∞—î–º–æ –ø–æ–∫–∏ Docker –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è
            for i in range(30):
                if self.check_docker():
                    logger.info("‚úÖ Docker –≥–æ—Ç–æ–≤–∏–π!")
                    return True
                logger.info(f"‚è≥ –ß–µ–∫–∞—é Docker... ({i+1}/30)")
                time.sleep(2)
            return False
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É Docker: {e}")
            return False

    def start_standalone_models(self):
        """–ó–∞–ø—É—Å–∫–∞—î standalone model server"""
        logger.info("ü§ñ –ó–∞–ø—É—Å–∫–∞—é Standalone Model Server...")
        try:
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –≤–∂–µ –∑–∞–ø—É—â–µ–Ω–∏–π
            response = requests.get("http://localhost:3010/health", timeout=2)
            if response.status_code == 200:
                logger.info("‚úÖ Model Server –≤–∂–µ –ø—Ä–∞—Ü—é—î!")
                return True
        except:
            pass

        # –ó–∞–ø—É—Å–∫–∞—î–º–æ –Ω–æ–≤–∏–π –ø—Ä–æ—Ü–µ—Å
        try:
            subprocess.Popen([
                'python3', 'standalone_model_server.py'
            ], cwd=self.base_path)

            # –ß–µ–∫–∞—î–º–æ –∑–∞–ø—É—Å–∫—É
            for i in range(10):
                try:
                    response = requests.get("http://localhost:3010/health", timeout=2)
                    if response.status_code == 200:
                        logger.info("‚úÖ Model Server –∑–∞–ø—É—â–µ–Ω–∏–π!")
                        return True
                except:
                    pass
                time.sleep(1)
            return False
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É Model Server: {e}")
            return False

    def start_docker_compose(self):
        """–ó–∞–ø—É—Å–∫–∞—î Docker Compose"""
        logger.info("üêã –ó–∞–ø—É—Å–∫–∞—é Docker Compose...")
        try:
            result = subprocess.run([
                'docker-compose', 'up', '-d'
            ], cwd=self.base_path, capture_output=True, text=True)

            if result.returncode == 0:
                logger.info("‚úÖ Docker Compose –∑–∞–ø—É—â–µ–Ω–∏–π!")
                return True
            else:
                logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ Docker Compose: {result.stderr}")
                return False
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É Docker Compose: {e}")
            return False

    def start_agents(self):
        """–ó–∞–ø—É—Å–∫–∞—î –∞–≥–µ–Ω—Ç—ñ–≤ —Å–∞–º–æ–≤–¥–æ—Å–∫–æ–Ω–∞–ª–µ–Ω–Ω—è"""
        logger.info("ü§ñ –ó–∞–ø—É—Å–∫–∞—é –∞–≥–µ–Ω—Ç—ñ–≤ —Å–∞–º–æ–≤–¥–æ—Å–∫–æ–Ω–∞–ª–µ–Ω–Ω—è...")

        agents = [
            "agents/self-healing/self_healing_agent.py",
            "agents/self-improvement/self_improvement_agent.py",
            "agents/self-diagnosis/self_diagnosis_agent.py"
        ]

        started_agents = 0
        for agent in agents:
            try:
                agent_path = self.base_path / agent
                if agent_path.exists():
                    subprocess.Popen([
                        'python3', str(agent_path)
                    ], cwd=self.base_path)
                    logger.info(f"‚úÖ –ó–∞–ø—É—â–µ–Ω–æ: {agent}")
                    started_agents += 1
                    time.sleep(2)
                else:
                    logger.warning(f"‚ö†Ô∏è  –§–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: {agent}")
            except Exception as e:
                logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É {agent}: {e}")

        return started_agents > 0

    def run_system_check(self):
        """–ü–µ—Ä–µ–≤—ñ—Ä—è—î —Å—Ç–∞–Ω —Å–∏—Å—Ç–µ–º–∏"""
        logger.info("üîç –ü–µ—Ä–µ–≤—ñ—Ä—è—é —Å—Ç–∞–Ω —Å–∏—Å—Ç–µ–º–∏...")

        checks = {
            "Model Server (3010)": "http://localhost:3010/health",
            "Backend (8000)": "http://localhost:8000/health",
            "Frontend (3000)": "http://localhost:3000",
        }

        results = {}
        for name, url in checks.items():
            try:
                response = requests.get(url, timeout=3)
                results[name] = "‚úÖ –ü—Ä–∞—Ü—é—î" if response.status_code == 200 else "‚ùå –ü–æ–º–∏–ª–∫–∞"
            except:
                results[name] = "‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π"

        return results

    def launch_full_system(self):
        """–ó–∞–ø—É—Å–∫–∞—î –≤—Å—é —Å–∏—Å—Ç–µ–º—É"""
        logger.info("üöÄ –ó–ê–ü–£–°–ö –ü–û–í–ù–û–á –°–ò–°–¢–ï–ú–ò PREDATOR11")
        logger.info("=" * 50)

        # 1. –ó–∞–ø—É—Å–∫ Model Server (–∑–∞–º—ñ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞)
        if not self.start_standalone_models():
            logger.error("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–ø—É—Å—Ç–∏—Ç–∏ Model Server")
            return False

        # 2. –ó–∞–ø—É—Å–∫ Docker
        if not self.check_docker():
            if not self.start_docker():
                logger.error("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–ø—É—Å—Ç–∏—Ç–∏ Docker")
                return False

        # 3. –ó–∞–ø—É—Å–∫ Docker Compose
        if not self.start_docker_compose():
            logger.error("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–ø—É—Å—Ç–∏—Ç–∏ Docker Compose")
            return False

        # 4. –ß–µ–∫–∞—î–º–æ –∫–æ–ª–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏ –±—É–¥—É—Ç—å –≥–æ—Ç–æ–≤—ñ
        logger.info("‚è≥ –ß–µ–∫–∞—é –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—ñ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ–≤...")
        time.sleep(30)

        # 5. –ó–∞–ø—É—Å–∫ –∞–≥–µ–Ω—Ç—ñ–≤
        if not self.start_agents():
            logger.warning("‚ö†Ô∏è  –î–µ—è–∫—ñ –∞–≥–µ–Ω—Ç–∏ –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª–∏—Å—è")

        # 6. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–∏
        logger.info("\n" + "=" * 50)
        logger.info("üìä –§–Ü–ù–ê–õ–¨–ù–ê –ü–ï–†–ï–í–Ü–†–ö–ê –°–ò–°–¢–ï–ú–ò")
        logger.info("=" * 50)

        time.sleep(10)
        results = self.run_system_check()

        for component, status in results.items():
            logger.info(f"{component}: {status}")

        logger.info("\nüéâ –°–ò–°–¢–ï–ú–ê –ì–û–¢–û–í–ê –î–û –†–û–ë–û–¢–ò!")
        logger.info("üåê Frontend: http://localhost:3000")
        logger.info("üîß Backend API: http://localhost:8000")
        logger.info("ü§ñ Model Server: http://localhost:3010")

        return True

def main():
    launcher = SystemLauncher()
    launcher.launch_full_system()

if __name__ == "__main__":
    main()
