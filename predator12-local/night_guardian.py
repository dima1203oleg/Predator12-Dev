#!/usr/bin/env python3
"""
üõ°Ô∏è –ù–Ü–ß–ù–ò–ô –°–¢–†–ê–ñ –°–ò–°–¢–ï–ú–ò PREDATOR11
–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–π –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ —Ç–∞ —Å–∞–º–æ–≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è —Å–∏—Å—Ç–µ–º–∏
"""
import asyncio
import aiohttp
import logging
import subprocess
import time
from datetime import datetime
from pathlib import Path
import json
import psutil

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('/Users/dima/Documents/Predator11/logs/night_guardian.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class NightGuardian:
    def __init__(self):
        self.base_path = Path("/Users/dima/Documents/Predator11")
        self.components = {
            "Model Server": {"url": "http://localhost:3010/health", "critical": True},
            "Backend API": {"url": "http://localhost:8000/health", "critical": True},
            "Frontend": {"url": "http://localhost:3000", "critical": False},
            "Grafana": {"url": "http://localhost:3001", "critical": False},
            "Prometheus": {"url": "http://localhost:9090", "critical": False}
        }

        self.agents = [
            {"name": "SelfHealing", "script": "agents/self-healing/self_healing_agent.py", "port": 8008},
            {"name": "SelfImprovement", "script": "agents/self-improvement/self_improvement_agent.py", "port": 8009},
            {"name": "SelfDiagnosis", "script": "agents/self-diagnosis/self_diagnosis_agent.py", "port": 9040}
        ]

        self.stats = {
            "total_checks": 0,
            "fixes_applied": 0,
            "last_fix_time": None,
            "uptime_start": datetime.now()
        }

    async def check_component(self, name, config):
        """–ü–µ—Ä–µ–≤—ñ—Ä—è—î —Å—Ç–∞–Ω –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞"""
        try:
            async with aiohttp.ClientSession(timeout=aiohttp.ClientTimeout(total=5)) as session:
                async with session.get(config["url"]) as response:
                    if response.status == 200:
                        return True
        except:
            pass
        return False

    async def check_agent_health(self, agent):
        """–ü–µ—Ä–µ–≤—ñ—Ä—è—î —Å—Ç–∞–Ω –∞–≥–µ–Ω—Ç–∞"""
        try:
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –ø—Ä–æ—Ü–µ—Å –∞–≥–µ–Ω—Ç–∞ –∑–∞–ø—É—â–µ–Ω–∏–π
            for proc in psutil.process_iter(['pid', 'name', 'cmdline']):
                cmdline = ' '.join(proc.info['cmdline'] or [])
                if agent["script"] in cmdline:
                    return True
            return False
        except:
            return False

    async def restart_agent(self, agent):
        """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—î –∞–≥–µ–Ω—Ç–∞"""
        try:
            logger.info(f"üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—é –∞–≥–µ–Ω—Ç–∞ {agent['name']}...")

            # –°–ø–æ—á–∞—Ç–∫—É –∑–∞–≤–µ—Ä—à—É—î–º–æ —Å—Ç–∞—Ä–∏–π –ø—Ä–æ—Ü–µ—Å
            for proc in psutil.process_iter(['pid', 'name', 'cmdline']):
                cmdline = ' '.join(proc.info['cmdline'] or [])
                if agent["script"] in cmdline:
                    proc.terminate()
                    await asyncio.sleep(2)
                    if proc.is_running():
                        proc.kill()

            # –ó–∞–ø—É—Å–∫–∞—î–º–æ –Ω–æ–≤–∏–π –ø—Ä–æ—Ü–µ—Å
            agent_path = self.base_path / agent["script"]
            if agent_path.exists():
                subprocess.Popen([
                    'python3', str(agent_path)
                ], cwd=self.base_path)

                await asyncio.sleep(5)
                if await self.check_agent_health(agent):
                    logger.info(f"‚úÖ –ê–≥–µ–Ω—Ç {agent['name']} —É—Å–ø—ñ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω–∏–π")
                    return True
                else:
                    logger.error(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–∏ –∞–≥–µ–Ω—Ç–∞ {agent['name']}")
                    return False
            else:
                logger.error(f"‚ùå –°–∫—Ä–∏–ø—Ç –∞–≥–µ–Ω—Ç–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: {agent_path}")
                return False

        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫—É –∞–≥–µ–Ω—Ç–∞ {agent['name']}: {e}")
            return False

    async def restart_model_server(self):
        """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—î model server"""
        try:
            logger.info("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—é Model Server...")

            # –ó–∞–≤–µ—Ä—à—É—î–º–æ —Å—Ç–∞—Ä–∏–π –ø—Ä–æ—Ü–µ—Å
            for proc in psutil.process_iter(['pid', 'name', 'cmdline']):
                cmdline = ' '.join(proc.info['cmdline'] or [])
                if 'standalone_model_server.py' in cmdline:
                    proc.terminate()
                    await asyncio.sleep(2)
                    if proc.is_running():
                        proc.kill()

            # –ó–∞–ø—É—Å–∫–∞—î–º–æ –Ω–æ–≤–∏–π
            subprocess.Popen([
                'python3', 'standalone_model_server.py'
            ], cwd=self.base_path)

            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∑–∞–ø—É—Å–∫
            for i in range(10):
                if await self.check_component("Model Server", self.components["Model Server"]):
                    logger.info("‚úÖ Model Server —É—Å–ø—ñ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω–∏–π")
                    return True
                await asyncio.sleep(2)

            logger.error("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–∏ Model Server")
            return False

        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫—É Model Server: {e}")
            return False

    async def restart_docker_compose(self):
        """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—î Docker Compose"""
        try:
            logger.info("üêã –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—é Docker Compose...")

            # –ó—É–ø–∏–Ω—è—î–º–æ
            subprocess.run(['docker-compose', 'down'], cwd=self.base_path, capture_output=True)
            await asyncio.sleep(5)

            # –ó–∞–ø—É—Å–∫–∞—î–º–æ
            result = subprocess.run(['docker-compose', 'up', '-d'],
                                  cwd=self.base_path, capture_output=True, text=True)

            if result.returncode == 0:
                await asyncio.sleep(30)  # –ß–µ–∫–∞—î–º–æ –∑–∞–ø—É—Å–∫—É –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ–≤
                logger.info("‚úÖ Docker Compose –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω–∏–π")
                return True
            else:
                logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ Docker Compose: {result.stderr}")
                return False

        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫—É Docker Compose: {e}")
            return False

    async def perform_health_check(self):
        """–í–∏–∫–æ–Ω—É—î –ø–æ–≤–Ω—É –ø–µ—Ä–µ–≤—ñ—Ä–∫—É –∑–¥–æ—Ä–æ–≤'—è —Å–∏—Å—Ç–µ–º–∏"""
        self.stats["total_checks"] += 1
        issues_found = []
        fixes_applied = []

        logger.info("üîç –í–∏–∫–æ–Ω—É—é –ø–µ—Ä–µ–≤—ñ—Ä–∫—É —Å—Ç–∞–Ω—É —Å–∏—Å—Ç–µ–º–∏...")

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∏
        for name, config in self.components.items():
            if not await self.check_component(name, config):
                issues_found.append(f"‚ùå {name} –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π")

                if config["critical"]:
                    if name == "Model Server":
                        if await self.restart_model_server():
                            fixes_applied.append(f"‚úÖ {name} –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω–∏–π")
                    elif name == "Backend API":
                        if await self.restart_docker_compose():
                            fixes_applied.append(f"‚úÖ Docker —Å–∏—Å—Ç–µ–º–∞ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω–∞")
            else:
                logger.info(f"‚úÖ {name} –ø—Ä–∞—Ü—é—î –Ω–æ—Ä–º–∞–ª—å–Ω–æ")

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∞–≥–µ–Ω—Ç—ñ–≤
        for agent in self.agents:
            if not await self.check_agent_health(agent):
                issues_found.append(f"‚ùå –ê–≥–µ–Ω—Ç {agent['name']} –Ω–µ –ø—Ä–∞—Ü—é—î")
                if await self.restart_agent(agent):
                    fixes_applied.append(f"‚úÖ –ê–≥–µ–Ω—Ç {agent['name']} –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω–∏–π")
            else:
                logger.info(f"‚úÖ –ê–≥–µ–Ω—Ç {agent['name']} –ø—Ä–∞—Ü—é—î –Ω–æ—Ä–º–∞–ª—å–Ω–æ")

        # –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        if fixes_applied:
            self.stats["fixes_applied"] += len(fixes_applied)
            self.stats["last_fix_time"] = datetime.now()

        # –õ–æ–≥—É—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏
        if issues_found:
            logger.warning(f"–ó–Ω–∞–π–¥–µ–Ω–æ –ø—Ä–æ–±–ª–µ–º: {len(issues_found)}")
            for issue in issues_found:
                logger.warning(issue)

        if fixes_applied:
            logger.info(f"–ó–∞—Å—Ç–æ—Å–æ–≤–∞–Ω–æ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω—å: {len(fixes_applied)}")
            for fix in fixes_applied:
                logger.info(fix)

        if not issues_found:
            logger.info("‚úÖ –í—Å—ñ —Å–∏—Å—Ç–µ–º–∏ –ø—Ä–∞—Ü—é—é—Ç—å –Ω–æ—Ä–º–∞–ª—å–Ω–æ")

        return len(issues_found), len(fixes_applied)

    async def generate_report(self):
        """–ì–µ–Ω–µ—Ä—É—î –∑–≤—ñ—Ç –ø—Ä–æ —Ä–æ–±–æ—Ç—É"""
        uptime = datetime.now() - self.stats["uptime_start"]

        report = f"""
üõ°Ô∏è –ó–í–Ü–¢ –ù–Ü–ß–ù–û–ì–û –°–¢–†–ê–ñ–£ –°–ò–°–¢–ï–ú–ò
================================
üìÖ –ß–∞—Å —Ä–æ–±–æ—Ç–∏: {uptime}
üîç –í—Å—å–æ–≥–æ –ø–µ—Ä–µ–≤—ñ—Ä–æ–∫: {self.stats['total_checks']}
üîß –ó–∞—Å—Ç–æ—Å–æ–≤–∞–Ω–æ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω—å: {self.stats['fixes_applied']}
‚è∞ –û—Å—Ç–∞–Ω–Ω—è –∫–æ—Ä–µ–∫—Ü—ñ—è: {self.stats['last_fix_time'] or '–ù–µ–º–∞—î'}

üìä –ü–û–¢–û–ß–ù–ò–ô –°–¢–ê–ù –°–ò–°–¢–ï–ú–ò:
"""

        for name, config in self.components.items():
            status = "‚úÖ –ü—Ä–∞—Ü—é—î" if await self.check_component(name, config) else "‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π"
            report += f"‚Ä¢ {name}: {status}\n"

        report += "\nü§ñ –°–¢–ê–ù –ê–ì–ï–ù–¢–Ü–í:\n"
        for agent in self.agents:
            status = "‚úÖ –ê–∫—Ç–∏–≤–Ω–∏–π" if await self.check_agent_health(agent) else "‚ùå –ù–µ–∞–∫—Ç–∏–≤–Ω–∏–π"
            report += f"‚Ä¢ {agent['name']}: {status}\n"

        return report

    async def run_guardian(self):
        """–ó–∞–ø—É—Å–∫–∞—î –Ω—ñ—á–Ω–æ–≥–æ —Å—Ç—Ä–∞–∂–∞"""
        logger.info("üõ°Ô∏è –ù–Ü–ß–ù–ò–ô –°–¢–†–ê–ñ –°–ò–°–¢–ï–ú–ò –ó–ê–ü–£–©–ï–ù–ò–ô")
        logger.info("üåô –°–∏—Å—Ç–µ–º–∞ –±—É–¥–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –∫–æ–Ω—Ç—Ä–æ–ª—é–≤–∞—Ç–∏—Å—è –≤—Å—é –Ω—ñ—á")

        while True:
            try:
                issues, fixes = await self.perform_health_check()

                # –ì–µ–Ω–µ—Ä—É—î–º–æ –∑–≤—ñ—Ç –∫–æ–∂–Ω—ñ 10 –ø–µ—Ä–µ–≤—ñ—Ä–æ–∫
                if self.stats["total_checks"] % 10 == 0:
                    report = await self.generate_report()
                    logger.info(report)

                # –ß–µ–∫–∞—î–º–æ 5 —Ö–≤–∏–ª–∏–Ω –º—ñ–∂ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞–º–∏
                await asyncio.sleep(300)

            except KeyboardInterrupt:
                logger.info("üõë –ù—ñ—á–Ω–∏–π —Å—Ç—Ä–∞–∂ –∑—É–ø–∏–Ω–µ–Ω–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º")
                break
            except Exception as e:
                logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –Ω—ñ—á–Ω–æ–≥–æ —Å—Ç—Ä–∞–∂–∞: {e}")
                await asyncio.sleep(60)  # –ß–µ–∫–∞—î–º–æ —Ö–≤–∏–ª–∏–Ω—É –ø—Ä–∏ –ø–æ–º–∏–ª—Ü—ñ

async def main():
    guardian = NightGuardian()
    await guardian.run_guardian()

if __name__ == "__main__":
    asyncio.run(main())
