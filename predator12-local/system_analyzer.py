#!/usr/bin/env python3
"""
üîç –ê–ù–ê–õ–Ü–ó–ê–¢–û–† –°–ò–°–¢–ï–ú–ò PREDATOR11
–ü–µ—Ä–µ–≤—ñ—Ä—è—î —Ä–æ–±–æ—Ç—É –∞–≥–µ–Ω—Ç—ñ–≤, –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –º–æ–¥–µ–ª–µ–π —Ç–∞ –¥—É–±–ª—é–≤–∞–Ω–Ω—è —Ñ—É–Ω–∫—Ü—ñ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ–≤
"""
import asyncio
import aiohttp
import docker
import json
import psutil
from datetime import datetime, timedelta
from collections import defaultdict
import logging

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class SystemAnalyzer:
    def __init__(self):
        self.docker_client = docker.from_env()
        self.model_sdk_url = "http://localhost:3010"
        self.agents_discovered = []
        self.containers_analysis = {}

    async def analyze_model_usage(self):
        """–ê–Ω–∞–ª—ñ–∑ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –º–æ–¥–µ–ª–µ–π –∞–≥–µ–Ω—Ç–∞–º–∏"""
        logger.info("üîç –ê–Ω–∞–ª—ñ–∑—É—é –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è AI –º–æ–¥–µ–ª–µ–π...")

        try:
            async with aiohttp.ClientSession() as session:
                # –ü–µ—Ä–µ–≤—ñ—Ä—è—é Model SDK
                async with session.get(f"{self.model_sdk_url}/health") as resp:
                    if resp.status == 200:
                        data = await resp.json()
                        logger.info(f"üìä Model SDK: {data.get('models_total', 0)} –º–æ–¥–µ–ª–µ–π, {data.get('providers_connected', 0)} –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ñ–≤ –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ")
                        return data
                    else:
                        logger.error(f"‚ùå Model SDK –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π: {resp.status}")
                        return None
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Model SDK: {e}")
            return None

    def analyze_containers(self):
        """–ê–Ω–∞–ª—ñ–∑ –≤—Å—ñ—Ö Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ–≤"""
        logger.info("üê≥ –ê–Ω–∞–ª—ñ–∑—É—é Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏...")

        containers = self.docker_client.containers.list(all=True)

        # –ì—Ä—É–ø—É—é –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏ –∑–∞ —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω—ñ—Å—Ç—é
        groups = {
            'core': [],           # –û—Å–Ω–æ–≤–Ω—ñ —Å–µ—Ä–≤—ñ—Å–∏
            'monitoring': [],     # –ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ —Ç–∞ –ª–æ–≥–∏
            'storage': [],        # –ë–∞–∑–∏ –¥–∞–Ω–∏—Ö —Ç–∞ —Å—Ö–æ–≤–∏—â–∞
            'agents': [],         # AI –∞–≥–µ–Ω—Ç–∏
            'setup': [],          # Setup —Ç–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è
            'unknown': []         # –ù–µ–≤–∏–∑–Ω–∞—á–µ–Ω—ñ
        }

        for container in containers:
            name = container.name
            image = container.image.tags[0] if container.image.tags else "unknown"
            status = container.status

            # –ö–ª–∞—Å–∏—Ñ—ñ–∫–∞—Ü—ñ—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ–≤
            if any(keyword in name.lower() for keyword in ['backend', 'frontend', 'modelsdk']):
                groups['core'].append({'name': name, 'image': image, 'status': status})
            elif any(keyword in name.lower() for keyword in ['prometheus', 'grafana', 'loki', 'tempo', 'promtail']):
                groups['monitoring'].append({'name': name, 'image': image, 'status': status})
            elif any(keyword in name.lower() for keyword in ['db', 'redis', 'minio', 'qdrant', 'opensearch']):
                groups['storage'].append({'name': name, 'image': image, 'status': status})
            elif any(keyword in name.lower() for keyword in ['agent', 'worker', 'celery', 'scheduler']):
                groups['agents'].append({'name': name, 'image': image, 'status': status})
            elif any(keyword in name.lower() for keyword in ['setup', 'init']):
                groups['setup'].append({'name': name, 'image': image, 'status': status})
            else:
                groups['unknown'].append({'name': name, 'image': image, 'status': status})

        self.containers_analysis = groups
        return groups

    def detect_duplicates(self):
        """–í–∏—è–≤–ª–µ–Ω–Ω—è –¥—É–±–ª—é—é—á–∏—Ö —Ñ—É–Ω–∫—Ü—ñ–π"""
        logger.info("üîÑ –®—É–∫–∞—é –¥—É–±–ª—é–≤–∞–Ω–Ω—è —Ñ—É–Ω–∫—Ü—ñ–π...")

        duplicates = []

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥—É–±–ª—ñ–∫–∞—Ç—ñ–≤ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É
        monitoring = self.containers_analysis.get('monitoring', [])
        if len(monitoring) > 6:  # –ë—ñ–ª—å—à–µ –Ω—ñ–∂ –æ—á—ñ–∫—É–≤–∞–Ω–æ
            duplicates.append({
                'type': 'monitoring_excess',
                'description': f'–ó–∞–±–∞–≥–∞—Ç–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ–≤ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É: {len(monitoring)}',
                'containers': [c['name'] for c in monitoring]
            })

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥—É–±–ª—ñ–∫–∞—Ç—ñ–≤ —Å—Ö–æ–≤–∏—â
        storage = self.containers_analysis.get('storage', [])
        db_containers = [c for c in storage if 'db' in c['name'].lower()]
        if len(db_containers) > 1:
            duplicates.append({
                'type': 'database_duplicate',
                'description': f'–ö—ñ–ª—å–∫–∞ –ë–î –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ–≤: {len(db_containers)}',
                'containers': [c['name'] for c in db_containers]
            })

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥—É–±–ª—ñ–∫–∞—Ç—ñ–≤ –∞–≥–µ–Ω—Ç—ñ–≤
        agents = self.containers_analysis.get('agents', [])
        agent_workers = [c for c in agents if 'worker' in c['name'].lower()]
        if len(agent_workers) > 2:
            duplicates.append({
                'type': 'worker_excess',
                'description': f'–ó–∞–±–∞–≥–∞—Ç–æ worker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ–≤: {len(agent_workers)}',
                'containers': [c['name'] for c in agent_workers]
            })

        return duplicates

    def check_agents_activity(self):
        """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ –∞–≥–µ–Ω—Ç—ñ–≤"""
        logger.info("ü§ñ –ü–µ—Ä–µ–≤—ñ—Ä—è—é –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å AI –∞–≥–µ–Ω—Ç—ñ–≤...")

        agents_status = []

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ—Ü–µ—Å–∏
        for proc in psutil.process_iter(['pid', 'name', 'cmdline', 'cpu_percent', 'memory_info']):
            try:
                cmdline = ' '.join(proc.info['cmdline'] or [])
                if 'agent' in cmdline.lower() and '.py' in cmdline:
                    agents_status.append({
                        'name': proc.info['name'],
                        'cmdline': cmdline,
                        'cpu_percent': proc.info['cpu_percent'],
                        'memory_mb': proc.info['memory_info'].rss / 1024 / 1024 if proc.info['memory_info'] else 0,
                        'status': 'running'
                    })
            except (psutil.NoSuchProcess, psutil.AccessDenied):
                continue

        return agents_status

    def analyze_container_necessity(self):
        """–ê–Ω–∞–ª—ñ–∑ –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ—Å—Ç—ñ –∫–æ–∂–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞"""
        logger.info("üìã –ê–Ω–∞–ª—ñ–∑—É—é –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ—Å—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ–≤...")

        analysis = {}

        for group_name, containers in self.containers_analysis.items():
            for container in containers:
                name = container['name']
                status = container['status']

                # –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ—Å—Ç—ñ
                if group_name == 'core':
                    necessity = 'critical'
                elif group_name == 'storage':
                    necessity = 'critical'
                elif group_name == 'agents':
                    necessity = 'important'
                elif group_name == 'monitoring':
                    necessity = 'useful' if len(containers) <= 6 else 'optional'
                elif group_name == 'setup':
                    necessity = 'temporary'
                else:
                    necessity = 'unknown'

                analysis[name] = {
                    'group': group_name,
                    'status': status,
                    'necessity': necessity,
                    'recommendation': self._get_recommendation(name, status, necessity)
                }

        return analysis

    def _get_recommendation(self, name, status, necessity):
        """–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –¥–ª—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞"""
        if necessity == 'temporary' and status in ['exited', 'created']:
            return '–º–æ–∂–Ω–∞ –≤–∏–¥–∞–ª–∏—Ç–∏'
        elif necessity == 'optional' and status == 'exited':
            return '–º–æ–∂–Ω–∞ –≤–∏–¥–∞–ª–∏—Ç–∏'
        elif necessity == 'critical' and status != 'running':
            return '–ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç–∏'
        elif 'setup' in name.lower() and status == 'exited':
            return '–º–æ–∂–Ω–∞ –≤–∏–¥–∞–ª–∏—Ç–∏ (setup –∑–∞–≤–µ—Ä—à–µ–Ω–æ)'
        else:
            return '–∑–∞–ª–∏—à–∏—Ç–∏ —è–∫ —î'

    async def generate_report(self):
        """–ì–µ–Ω–µ—Ä—É—î –ø–æ–≤–Ω–∏–π –∑–≤—ñ—Ç –∞–Ω–∞–ª—ñ–∑—É —Å–∏—Å—Ç–µ–º–∏"""
        logger.info("üìä –ì–µ–Ω–µ—Ä—É—é –ø–æ–≤–Ω–∏–π –∑–≤—ñ—Ç...")

        # –ó–±–∏—Ä–∞—î–º–æ –≤—Å—ñ –¥–∞–Ω—ñ
        model_data = await self.analyze_model_usage()
        containers_groups = self.analyze_containers()
        duplicates = self.detect_duplicates()
        agents_activity = self.check_agents_activity()
        necessity_analysis = self.analyze_container_necessity()

        report = {
            'timestamp': datetime.now().isoformat(),
            'model_sdk': model_data,
            'containers': {
                'total': sum(len(group) for group in containers_groups.values()),
                'by_groups': {k: len(v) for k, v in containers_groups.items()},
                'detailed': containers_groups
            },
            'duplicates': duplicates,
            'agents': {
                'running_count': len(agents_activity),
                'details': agents_activity
            },
            'recommendations': necessity_analysis
        }

        return report

    def print_summary_report(self, report):
        """–í–∏–≤–æ–¥–∏—Ç—å –∫–æ—Ä–æ—Ç–∫–∏–π –∑–≤—ñ—Ç —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é"""
        print("\n" + "="*60)
        print("üîç –ó–í–Ü–¢ –ê–ù–ê–õ–Ü–ó–£ –°–ò–°–¢–ï–ú–ò PREDATOR11")
        print("="*60)

        # Model SDK —Å—Ç–∞—Ç—É—Å
        model_sdk = report['model_sdk']
        if model_sdk:
            print(f"\nü§ñ MODEL SDK:")
            print(f"   üìä –í—Å—å–æ–≥–æ –º–æ–¥–µ–ª–µ–π: {model_sdk.get('models_total', 0)}")
            print(f"   üì° –î–æ—Å—Ç—É–ø–Ω–∏—Ö —á–µ—Ä–µ–∑ API: {model_sdk.get('models_available', 0)}")
            print(f"   üîå –ü—ñ–¥–∫–ª—é—á–µ–Ω–∏—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ñ–≤: {model_sdk.get('providers_connected', 0)}")
        else:
            print(f"\n‚ùå MODEL SDK: –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π")

        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏
        containers = report['containers']
        print(f"\nüê≥ –ö–û–ù–¢–ï–ô–ù–ï–†–ò: {containers['total']} –≤—Å—å–æ–≥–æ")
        for group, count in containers['by_groups'].items():
            print(f"   {group}: {count}")

        # –î—É–±–ª—ñ–∫–∞—Ç–∏
        duplicates = report['duplicates']
        if duplicates:
            print(f"\n‚ö†Ô∏è –ó–ù–ê–ô–î–ï–ù–û –î–£–ë–õ–Ü–ö–ê–¢–Ü–í: {len(duplicates)}")
            for dup in duplicates:
                print(f"   - {dup['description']}")
        else:
            print(f"\n‚úÖ –î–£–ë–õ–Ü–ö–ê–¢–Ü–í –ù–ï –ó–ù–ê–ô–î–ï–ù–û")

        # –ê–≥–µ–Ω—Ç–∏
        agents = report['agents']
        print(f"\nü§ñ –ê–ö–¢–ò–í–ù–ò–• –ê–ì–ï–ù–¢–Ü–í: {agents['running_count']}")
        for agent in agents['details'][:5]:  # –ü–æ–∫–∞–∑—É—î–º–æ –ø–µ—Ä—à—ñ 5
            print(f"   - CPU: {agent['cpu_percent']:.1f}%, RAM: {agent['memory_mb']:.0f}MB")

        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó
        recommendations = report['recommendations']
        to_remove = [k for k, v in recommendations.items() if '–≤–∏–¥–∞–ª–∏—Ç–∏' in v['recommendation']]
        to_start = [k for k, v in recommendations.items() if '–∑–∞–ø—É—Å—Ç–∏—Ç–∏' in v['recommendation']]

        if to_remove:
            print(f"\nüóëÔ∏è –†–ï–ö–û–ú–ï–ù–î–£–Æ –í–ò–î–ê–õ–ò–¢–ò ({len(to_remove)}):")
            for container in to_remove[:5]:
                print(f"   - {container}")

        if to_start:
            print(f"\nüöÄ –†–ï–ö–û–ú–ï–ù–î–£–Æ –ó–ê–ü–£–°–¢–ò–¢–ò ({len(to_start)}):")
            for container in to_start:
                print(f"   - {container}")

        print("\n" + "="*60)

async def main():
    analyzer = SystemAnalyzer()
    report = await analyzer.generate_report()

    # –í–∏–≤–æ–¥–∏–º–æ –∑–≤—ñ—Ç
    analyzer.print_summary_report(report)

    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –¥–µ—Ç–∞–ª—å–Ω–∏–π –∑–≤—ñ—Ç
    with open('/Users/dima/Documents/Predator11/system_analysis_report.json', 'w', encoding='utf-8') as f:
        json.dump(report, f, ensure_ascii=False, indent=2)

    print(f"\nüíæ –î–µ—Ç–∞–ª—å–Ω–∏–π –∑–≤—ñ—Ç –∑–±–µ—Ä–µ–∂–µ–Ω–æ: system_analysis_report.json")

if __name__ == "__main__":
    asyncio.run(main())
